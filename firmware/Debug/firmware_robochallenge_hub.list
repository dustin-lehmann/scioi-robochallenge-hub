
firmware_robochallenge_hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800d154  0800d154  0001d154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2cc  0800d2cc  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2cc  0800d2cc  0001d2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d4  0800d2d4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d4  0800d2d4  0001d2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2d8  0800d2d8  0001d2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800d2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006578  20000164  0800d440  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200066dc  0800d440  000266dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000233fc  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056a9  00000000  00000000  00043590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  00048c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  0004a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000952d  00000000  00000000  0004c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024bcd  00000000  00000000  000555e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad99  00000000  00000000  0007a1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000745c  00000000  00000000  00114f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d13c 	.word	0x0800d13c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800d13c 	.word	0x0800d13c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b974 	b.w	8000d1c <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	468e      	mov	lr, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14d      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	d969      	bls.n	8000b34 <__udivmoddi4+0xe8>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b152      	cbz	r2, 8000a7c <__udivmoddi4+0x30>
 8000a66:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6a:	f1c2 0120 	rsb	r1, r2, #32
 8000a6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a76:	ea41 0e03 	orr.w	lr, r1, r3
 8000a7a:	4094      	lsls	r4, r2
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	0c21      	lsrs	r1, r4, #16
 8000a82:	fbbe f6f8 	udiv	r6, lr, r8
 8000a86:	fa1f f78c 	uxth.w	r7, ip
 8000a8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a92:	fb06 f107 	mul.w	r1, r6, r7
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aa2:	f080 811f 	bcs.w	8000ce4 <__udivmoddi4+0x298>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 811c 	bls.w	8000ce4 <__udivmoddi4+0x298>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab8:	fb08 3310 	mls	r3, r8, r0, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb00 f707 	mul.w	r7, r0, r7
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x92>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad0:	f080 810a 	bcs.w	8000ce8 <__udivmoddi4+0x29c>
 8000ad4:	42a7      	cmp	r7, r4
 8000ad6:	f240 8107 	bls.w	8000ce8 <__udivmoddi4+0x29c>
 8000ada:	4464      	add	r4, ip
 8000adc:	3802      	subs	r0, #2
 8000ade:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ae2:	1be4      	subs	r4, r4, r7
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	b11d      	cbz	r5, 8000af0 <__udivmoddi4+0xa4>
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	2300      	movs	r3, #0
 8000aec:	e9c5 4300 	strd	r4, r3, [r5]
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0xc2>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	f000 80ef 	beq.w	8000cde <__udivmoddi4+0x292>
 8000b00:	2600      	movs	r6, #0
 8000b02:	e9c5 0100 	strd	r0, r1, [r5]
 8000b06:	4630      	mov	r0, r6
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	fab3 f683 	clz	r6, r3
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d14a      	bne.n	8000bac <__udivmoddi4+0x160>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xd4>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80f9 	bhi.w	8000d12 <__udivmoddi4+0x2c6>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb61 0303 	sbc.w	r3, r1, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	469e      	mov	lr, r3
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d0e0      	beq.n	8000af0 <__udivmoddi4+0xa4>
 8000b2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b32:	e7dd      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000b34:	b902      	cbnz	r2, 8000b38 <__udivmoddi4+0xec>
 8000b36:	deff      	udf	#255	; 0xff
 8000b38:	fab2 f282 	clz	r2, r2
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	f040 8092 	bne.w	8000c66 <__udivmoddi4+0x21a>
 8000b42:	eba1 010c 	sub.w	r1, r1, ip
 8000b46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4a:	fa1f fe8c 	uxth.w	lr, ip
 8000b4e:	2601      	movs	r6, #1
 8000b50:	0c20      	lsrs	r0, r4, #16
 8000b52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b56:	fb07 1113 	mls	r1, r7, r3, r1
 8000b5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b5e:	fb0e f003 	mul.w	r0, lr, r3
 8000b62:	4288      	cmp	r0, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x12c>
 8000b66:	eb1c 0101 	adds.w	r1, ip, r1
 8000b6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x12a>
 8000b70:	4288      	cmp	r0, r1
 8000b72:	f200 80cb 	bhi.w	8000d0c <__udivmoddi4+0x2c0>
 8000b76:	4643      	mov	r3, r8
 8000b78:	1a09      	subs	r1, r1, r0
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b80:	fb07 1110 	mls	r1, r7, r0, r1
 8000b84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b88:	fb0e fe00 	mul.w	lr, lr, r0
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x156>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x154>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f200 80bb 	bhi.w	8000d16 <__udivmoddi4+0x2ca>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	eba4 040e 	sub.w	r4, r4, lr
 8000ba6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000baa:	e79c      	b.n	8000ae6 <__udivmoddi4+0x9a>
 8000bac:	f1c6 0720 	rsb	r7, r6, #32
 8000bb0:	40b3      	lsls	r3, r6
 8000bb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bba:	fa20 f407 	lsr.w	r4, r0, r7
 8000bbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc2:	431c      	orrs	r4, r3
 8000bc4:	40f9      	lsrs	r1, r7
 8000bc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bca:	fa00 f306 	lsl.w	r3, r0, r6
 8000bce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bd2:	0c20      	lsrs	r0, r4, #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be0:	fb08 f00e 	mul.w	r0, r8, lr
 8000be4:	4288      	cmp	r0, r1
 8000be6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b8>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf4:	f080 8088 	bcs.w	8000d08 <__udivmoddi4+0x2bc>
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	f240 8085 	bls.w	8000d08 <__udivmoddi4+0x2bc>
 8000bfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000c02:	4461      	add	r1, ip
 8000c04:	1a09      	subs	r1, r1, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	458e      	cmp	lr, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1e2>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c24:	d26c      	bcs.n	8000d00 <__udivmoddi4+0x2b4>
 8000c26:	458e      	cmp	lr, r1
 8000c28:	d96a      	bls.n	8000d00 <__udivmoddi4+0x2b4>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c32:	fba0 9402 	umull	r9, r4, r0, r2
 8000c36:	eba1 010e 	sub.w	r1, r1, lr
 8000c3a:	42a1      	cmp	r1, r4
 8000c3c:	46c8      	mov	r8, r9
 8000c3e:	46a6      	mov	lr, r4
 8000c40:	d356      	bcc.n	8000cf0 <__udivmoddi4+0x2a4>
 8000c42:	d053      	beq.n	8000cec <__udivmoddi4+0x2a0>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x212>
 8000c46:	ebb3 0208 	subs.w	r2, r3, r8
 8000c4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c52:	fa22 f306 	lsr.w	r3, r2, r6
 8000c56:	40f1      	lsrs	r1, r6
 8000c58:	431f      	orrs	r7, r3
 8000c5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	f1c2 0320 	rsb	r3, r2, #32
 8000c6a:	40d8      	lsrs	r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	fa21 f303 	lsr.w	r3, r1, r3
 8000c74:	4091      	lsls	r1, r2
 8000c76:	4301      	orrs	r1, r0
 8000c78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c84:	fb07 3610 	mls	r6, r7, r0, r3
 8000c88:	0c0b      	lsrs	r3, r1, #16
 8000c8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c92:	429e      	cmp	r6, r3
 8000c94:	fa04 f402 	lsl.w	r4, r4, r2
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x260>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca2:	d22f      	bcs.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca4:	429e      	cmp	r6, r3
 8000ca6:	d92d      	bls.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	b289      	uxth	r1, r1
 8000cb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x28a>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ccc:	d216      	bcs.n	8000cfc <__udivmoddi4+0x2b0>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d914      	bls.n	8000cfc <__udivmoddi4+0x2b0>
 8000cd2:	3e02      	subs	r6, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	1ac9      	subs	r1, r1, r3
 8000cd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cdc:	e738      	b.n	8000b50 <__udivmoddi4+0x104>
 8000cde:	462e      	mov	r6, r5
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	e705      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	e6e3      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000ce8:	4618      	mov	r0, r3
 8000cea:	e6f8      	b.n	8000ade <__udivmoddi4+0x92>
 8000cec:	454b      	cmp	r3, r9
 8000cee:	d2a9      	bcs.n	8000c44 <__udivmoddi4+0x1f8>
 8000cf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	e7a3      	b.n	8000c44 <__udivmoddi4+0x1f8>
 8000cfc:	4646      	mov	r6, r8
 8000cfe:	e7ea      	b.n	8000cd6 <__udivmoddi4+0x28a>
 8000d00:	4620      	mov	r0, r4
 8000d02:	e794      	b.n	8000c2e <__udivmoddi4+0x1e2>
 8000d04:	4640      	mov	r0, r8
 8000d06:	e7d1      	b.n	8000cac <__udivmoddi4+0x260>
 8000d08:	46d0      	mov	r8, sl
 8000d0a:	e77b      	b.n	8000c04 <__udivmoddi4+0x1b8>
 8000d0c:	3b02      	subs	r3, #2
 8000d0e:	4461      	add	r1, ip
 8000d10:	e732      	b.n	8000b78 <__udivmoddi4+0x12c>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e709      	b.n	8000b2a <__udivmoddi4+0xde>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	e742      	b.n	8000ba2 <__udivmoddi4+0x156>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f000 fc48 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f846 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f000 f992 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d30:	f000 f970 	bl	8001014 <MX_DMA_Init>
  MX_TIM4_Init();
 8000d34:	f000 f8f8 	bl	8000f28 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d38:	f000 f8a8 	bl	8000e8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	//Timer used for distance Sensors
	distance_sensor_timer = &htim3;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <main+0x68>)
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <main+0x6c>)
 8000d40:	601a      	str	r2, [r3, #0]

	ws2812_init(&htim4);
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <main+0x70>)
 8000d44:	f00b fe9a 	bl	800ca7c <ws2812_init>

	firmware_init();
 8000d48:	f00b fd94 	bl	800c874 <firmware_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d4c:	f008 f92a 	bl	8008fa4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of test_task */
  test_taskHandle = osThreadNew(test_task_fun, NULL, &test_task_attributes);
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <main+0x74>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <main+0x78>)
 8000d56:	f008 f96f 	bl	8009038 <osThreadNew>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <main+0x7c>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* creation of DistanceSensorT */
  DistanceSensorTHandle = osThreadNew(DistanceSensorTask_Init, NULL, &DistanceSensorT_attributes);
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <main+0x80>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <main+0x84>)
 8000d66:	f008 f967 	bl	8009038 <osThreadNew>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <main+0x88>)
 8000d6e:	6013      	str	r3, [r2, #0]

  /* creation of streaming_task */
  streaming_taskHandle = osThreadNew(streaming_task_entry, NULL, &streaming_task_attributes);
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <main+0x8c>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <main+0x90>)
 8000d76:	f008 f95f 	bl	8009038 <osThreadNew>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <main+0x94>)
 8000d7e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d80:	f008 f934 	bl	8008fec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d84:	e7fe      	b.n	8000d84 <main+0x64>
 8000d86:	bf00      	nop
 8000d88:	200062b4 	.word	0x200062b4
 8000d8c:	20000180 	.word	0x20000180
 8000d90:	200001c8 	.word	0x200001c8
 8000d94:	0800d1e0 	.word	0x0800d1e0
 8000d98:	08001191 	.word	0x08001191
 8000d9c:	20000270 	.word	0x20000270
 8000da0:	0800d204 	.word	0x0800d204
 8000da4:	080011a5 	.word	0x080011a5
 8000da8:	20000274 	.word	0x20000274
 8000dac:	0800d228 	.word	0x0800d228
 8000db0:	080011c1 	.word	0x080011c1
 8000db4:	20000278 	.word	0x20000278

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	; 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f00c f8ee 	bl	800cfa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <SystemClock_Config+0xcc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <SystemClock_Config+0xcc>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <SystemClock_Config+0xcc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <SystemClock_Config+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e04:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <SystemClock_Config+0xd0>)
 8000e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <SystemClock_Config+0xd0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e30:	23c0      	movs	r3, #192	; 0xc0
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e34:	2304      	movs	r3, #4
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fcf9 	bl	8003838 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e4c:	f000 f9f4 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 ff5b 	bl	8003d28 <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e78:	f000 f9de 	bl	8001238 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	; 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <MX_TIM3_Init+0x98>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000eb0:	22f0      	movs	r2, #240	; 0xf0
 8000eb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000eb6:	2210      	movs	r2, #16
 8000eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000ed0:	f003 f928 	bl	8004124 <HAL_TIM_Base_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f9ad 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000eec:	f003 fee8 	bl	8004cc0 <HAL_TIM_ConfigClockSource>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 f99f 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_TIM3_Init+0x94>)
 8000f08:	f004 fb70 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f12:	f000 f991 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000180 	.word	0x20000180
 8000f24:	40000400 	.word	0x40000400

08000f28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <MX_TIM4_Init+0xe8>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60-1;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f6c:	223b      	movs	r2, #59	; 0x3b
 8000f6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f7c:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f7e:	f003 f8d1 	bl	8004124 <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000f88:	f000 f956 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f96:	4619      	mov	r1, r3
 8000f98:	481c      	ldr	r0, [pc, #112]	; (800100c <MX_TIM4_Init+0xe4>)
 8000f9a:	f003 fe91 	bl	8004cc0 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000fa4:	f000 f948 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <MX_TIM4_Init+0xe4>)
 8000faa:	f003 f9ef 	bl	800438c <HAL_TIM_PWM_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 f940 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4811      	ldr	r0, [pc, #68]	; (800100c <MX_TIM4_Init+0xe4>)
 8000fc8:	f004 fb10 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000fd2:	f000 f931 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	; 0x60
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM4_Init+0xe4>)
 8000fee:	f003 fda5 	bl	8004b3c <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000ff8:	f000 f91e 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM4_Init+0xe4>)
 8000ffe:	f000 f9bf 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001c8 	.word	0x200001c8
 8001010:	40000800 	.word	0x40000800

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_DMA_Init+0x3c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <MX_DMA_Init+0x3c>)
 8001024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_DMA_Init+0x3c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2102      	movs	r1, #2
 800103a:	200e      	movs	r0, #14
 800103c:	f000 fbda 	bl	80017f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001040:	200e      	movs	r0, #14
 8001042:	f000 fbf3 	bl	800182c <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <MX_GPIO_Init+0x12c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a43      	ldr	r2, [pc, #268]	; (8001180 <MX_GPIO_Init+0x12c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <MX_GPIO_Init+0x12c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <MX_GPIO_Init+0x12c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a3c      	ldr	r2, [pc, #240]	; (8001180 <MX_GPIO_Init+0x12c>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <MX_GPIO_Init+0x12c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <MX_GPIO_Init+0x12c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a35      	ldr	r2, [pc, #212]	; (8001180 <MX_GPIO_Init+0x12c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <MX_GPIO_Init+0x12c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RANGE_4_TRIG_Pin|RANGE_3_TRIG_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f242 0101 	movw	r1, #8193	; 0x2001
 80010c4:	482f      	ldr	r0, [pc, #188]	; (8001184 <MX_GPIO_Init+0x130>)
 80010c6:	f001 f8ed 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80010d0:	482d      	ldr	r0, [pc, #180]	; (8001188 <MX_GPIO_Init+0x134>)
 80010d2:	f001 f8e7 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010dc:	482b      	ldr	r0, [pc, #172]	; (800118c <MX_GPIO_Init+0x138>)
 80010de:	f001 f8e1 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RANGE_4_TRIG_Pin RANGE_3_TRIG_Pin */
  GPIO_InitStruct.Pin = RANGE_4_TRIG_Pin|RANGE_3_TRIG_Pin;
 80010e2:	f242 0301 	movw	r3, #8193	; 0x2001
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	4822      	ldr	r0, [pc, #136]	; (8001184 <MX_GPIO_Init+0x130>)
 80010fc:	f000 ff36 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RANGE_4_ECHO_Pin RANGE_3_ECHO_Pin */
  GPIO_InitStruct.Pin = RANGE_4_ECHO_Pin|RANGE_3_ECHO_Pin;
 8001100:	f244 0302 	movw	r3, #16386	; 0x4002
 8001104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001106:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800110a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800110c:	2302      	movs	r3, #2
 800110e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	481b      	ldr	r0, [pc, #108]	; (8001184 <MX_GPIO_Init+0x130>)
 8001118:	f000 ff28 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800111c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4619      	mov	r1, r3
 8001134:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_GPIO_Init+0x134>)
 8001136:	f000 ff19 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <MX_GPIO_Init+0x138>)
 8001154:	f000 ff0a 	bl	8001f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	2007      	movs	r0, #7
 800115e:	f000 fb49 	bl	80017f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001162:	2007      	movs	r0, #7
 8001164:	f000 fb62 	bl	800182c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2105      	movs	r1, #5
 800116c:	2028      	movs	r0, #40	; 0x28
 800116e:	f000 fb41 	bl	80017f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001172:	2028      	movs	r0, #40	; 0x28
 8001174:	f000 fb5a 	bl	800182c <HAL_NVIC_EnableIRQ>

}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020000 	.word	0x40020000

08001190 <test_task_fun>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_test_task_fun */
void test_task_fun(void *argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001198:	f00a fc80 	bl	800ba9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(250);
 800119c:	20fa      	movs	r0, #250	; 0xfa
 800119e:	f007 ffdd 	bl	800915c <osDelay>
 80011a2:	e7fb      	b.n	800119c <test_task_fun+0xc>

080011a4 <DistanceSensorTask_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DistanceSensorTask_Init */
void DistanceSensorTask_Init(void *argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DistanceSensorTask_Init */
	distance_meas_task(&distance_sensor_handler);
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <DistanceSensorTask_Init+0x18>)
 80011ae:	f00b fd87 	bl	800ccc0 <distance_meas_task>
  /* USER CODE END DistanceSensorTask_Init */
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200062b8 	.word	0x200062b8

080011c0 <streaming_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_streaming_task_entry */
void streaming_task_entry(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  // Send all distance sensors
	  for (int i=0;i<distance_sensor_handler.num_sensors; i++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e00c      	b.n	80011e8 <streaming_task_entry+0x28>
		  msg_stream_distance(msg_out_buf, distance_sensor_handler.distance_sensors[i]);
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <streaming_task_entry+0x3c>)
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4619      	mov	r1, r3
 80011dc:	4808      	ldr	r0, [pc, #32]	; (8001200 <streaming_task_entry+0x40>)
 80011de:	f00b fa3e 	bl	800c65e <msg_stream_distance>
	  for (int i=0;i<distance_sensor_handler.num_sensors; i++){
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <streaming_task_entry+0x3c>)
 80011ea:	7a1b      	ldrb	r3, [r3, #8]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	dbec      	blt.n	80011ce <streaming_task_entry+0xe>
	  }
    osDelay(100);
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f007 ffb1 	bl	800915c <osDelay>
	  for (int i=0;i<distance_sensor_handler.num_sensors; i++){
 80011fa:	e7e5      	b.n	80011c8 <streaming_task_entry+0x8>
 80011fc:	200062b8 	.word	0x200062b8
 8001200:	20006134 	.word	0x20006134

08001204 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001216:	f000 f9f1 	bl	80015fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM3) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_TIM_PeriodElapsedCallback+0x24>
		distance_sensor_timer_callback();
 8001224:	f00b fe62 	bl	800ceec <distance_sensor_timer_callback>
	}
  /* USER CODE END Callback 1 */
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40014800 	.word	0x40014800
 8001234:	40000400 	.word	0x40000400

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_MspInit+0x54>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_MspInit+0x54>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x54>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_MspInit+0x54>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_MspInit+0x54>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_MspInit+0x54>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	210f      	movs	r1, #15
 8001286:	f06f 0001 	mvn.w	r0, #1
 800128a:	f000 fab3 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_TIM_Base_MspInit+0xd0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d116      	bne.n	80012dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_TIM_Base_MspInit+0xd4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a2e      	ldr	r2, [pc, #184]	; (8001370 <HAL_TIM_Base_MspInit+0xd4>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <HAL_TIM_Base_MspInit+0xd4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	201d      	movs	r0, #29
 80012d0:	f000 fa90 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012d4:	201d      	movs	r0, #29
 80012d6:	f000 faa9 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012da:	e043      	b.n	8001364 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM4)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a24      	ldr	r2, [pc, #144]	; (8001374 <HAL_TIM_Base_MspInit+0xd8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d13e      	bne.n	8001364 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_TIM_Base_MspInit+0xd4>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <HAL_TIM_Base_MspInit+0xd4>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_TIM_Base_MspInit+0xd4>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_TIM_Base_MspInit+0xe0>)
 8001306:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 800130a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800130e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 8001312:	2240      	movs	r2, #64	; 0x40
 8001314:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 800131e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001322:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 8001326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800132a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 800132e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001332:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 800133c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001340:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 800134a:	f000 fa7d 	bl	8001848 <HAL_DMA_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 8001354:	f7ff ff70 	bl	8001238 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_TIM_Base_MspInit+0xdc>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40000400 	.word	0x40000400
 8001370:	40023800 	.word	0x40023800
 8001374:	40000800 	.word	0x40000800
 8001378:	20000210 	.word	0x20000210
 800137c:	40026058 	.word	0x40026058

08001380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_TIM_MspPostInit+0x68>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d11d      	bne.n	80013de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_TIM_MspPostInit+0x6c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_TIM_MspPostInit+0x6c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_TIM_MspPostInit+0x6c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_TIM_MspPostInit+0x70>)
 80013da:	f000 fdc7 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40000800 	.word	0x40000800
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400

080013f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	201a      	movs	r0, #26
 800140a:	f000 f9f3 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800140e:	201a      	movs	r0, #26
 8001410:	f000 fa0c 	bl	800182c <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_InitTick+0xa0>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_InitTick+0xa0>)
 800141e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001422:	6453      	str	r3, [r2, #68]	; 0x44
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_InitTick+0xa0>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001430:	f107 0210 	add.w	r2, r7, #16
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fe40 	bl	80040c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001440:	f002 fe2a 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 8001444:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_InitTick+0xa4>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9b      	lsrs	r3, r3, #18
 8001450:	3b01      	subs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_InitTick+0xa8>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <HAL_InitTick+0xac>)
 8001458:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_InitTick+0xa8>)
 800145c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001460:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_InitTick+0xa8>)
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_InitTick+0xa8>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_InitTick+0xa8>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_InitTick+0xa8>)
 8001476:	f002 fe55 	bl	8004124 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_InitTick+0xa8>)
 8001482:	f002 ff21 	bl	80042c8 <HAL_TIM_Base_Start_IT>
 8001486:	4603      	mov	r3, r0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3730      	adds	r7, #48	; 0x30
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	431bde83 	.word	0x431bde83
 800149c:	2000027c 	.word	0x2000027c
 80014a0:	40014800 	.word	0x40014800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RANGE_4_ECHO_Pin);
 80014d4:	2002      	movs	r0, #2
 80014d6:	f000 ff19 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA1_Stream3_IRQHandler+0x10>)
 80014e6:	f000 fad7 	bl	8001a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000210 	.word	0x20000210

080014f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80014fa:	f003 fa17 	bl	800492c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000027c 	.word	0x2000027c

08001508 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM3_IRQHandler+0x10>)
 800150e:	f003 fa0d 	bl	800492c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000180 	.word	0x20000180

0800151c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RANGE_3_ECHO_Pin);
 8001520:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001524:	f000 fef2 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <OTG_FS_IRQHandler+0x10>)
 8001532:	f001 f853 	bl	80025dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20005988 	.word	0x20005988

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800158e:	f7ff ffd7 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f00b fcd5 	bl	800cf40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fbc3 	bl	8000d20 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80015a8:	0800d2dc 	.word	0x0800d2dc
  ldr r2, =_sbss
 80015ac:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80015b0:	200066dc 	.word	0x200066dc

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f8fc 	bl	80017de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff ff04 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fe2a 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008
 8001620:	200002c4 	.word	0x200002c4

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200002c4 	.word	0x200002c4

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff4c 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001806:	f7ff ff61 	bl	80016cc <__NVIC_GetPriorityGrouping>
 800180a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	6978      	ldr	r0, [r7, #20]
 8001812:	f7ff ffb1 	bl	8001778 <NVIC_EncodePriority>
 8001816:	4602      	mov	r2, r0
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff80 	bl	8001724 <__NVIC_SetPriority>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff54 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fee6 	bl	8001624 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e099      	b.n	8001998 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001884:	e00f      	b.n	80018a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001886:	f7ff fecd 	bl	8001624 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b05      	cmp	r3, #5
 8001892:	d908      	bls.n	80018a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2203      	movs	r2, #3
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e078      	b.n	8001998 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1e8      	bne.n	8001886 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_DMA_Init+0x158>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d107      	bne.n	8001910 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4313      	orrs	r3, r2
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f023 0307 	bic.w	r3, r3, #7
 8001926:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4313      	orrs	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2b04      	cmp	r3, #4
 8001938:	d117      	bne.n	800196a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4313      	orrs	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00e      	beq.n	800196a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa91 	bl	8001e74 <DMA_CheckFifoParam>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001966:	2301      	movs	r3, #1
 8001968:	e016      	b.n	8001998 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fa48 	bl	8001e08 <DMA_CalcBaseAndBitshift>
 8001978:	4603      	mov	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	223f      	movs	r2, #63	; 0x3f
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	f010803f 	.word	0xf010803f

080019a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_DMA_Start_IT+0x26>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e040      	b.n	8001a4c <HAL_DMA_Start_IT+0xa8>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d12f      	bne.n	8001a3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f9da 	bl	8001dac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	223f      	movs	r2, #63	; 0x3f
 80019fe:	409a      	lsls	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0216 	orr.w	r2, r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0208 	orr.w	r2, r2, #8
 8001a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e005      	b.n	8001a4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
 8001a48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d004      	beq.n	8001a72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00c      	b.n	8001a8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2205      	movs	r2, #5
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aa4:	4b8e      	ldr	r3, [pc, #568]	; (8001ce0 <HAL_DMA_IRQHandler+0x248>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a8e      	ldr	r2, [pc, #568]	; (8001ce4 <HAL_DMA_IRQHandler+0x24c>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01a      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0204 	bic.w	r2, r2, #4
 8001aea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	2208      	movs	r2, #8
 8001af2:	409a      	lsls	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b08:	2201      	movs	r2, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d012      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2201      	movs	r2, #1
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	2204      	movs	r2, #4
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d012      	beq.n	8001b70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b68:	f043 0204 	orr.w	r2, r3, #4
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	2210      	movs	r2, #16
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d043      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03c      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	2210      	movs	r2, #16
 8001b94:	409a      	lsls	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d018      	beq.n	8001bda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d024      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
 8001bc6:	e01f      	b.n	8001c08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01b      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
 8001bd8:	e016      	b.n	8001c08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0208 	bic.w	r2, r2, #8
 8001bf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 808f 	beq.w	8001d38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8087 	beq.w	8001d38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2e:	2220      	movs	r2, #32
 8001c30:	409a      	lsls	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d136      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0216 	bic.w	r2, r2, #22
 8001c50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <HAL_DMA_IRQHandler+0x1da>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0208 	bic.w	r2, r2, #8
 8001c80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	223f      	movs	r2, #63	; 0x3f
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d07e      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
        }
        return;
 8001cae:	e079      	b.n	8001da4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01d      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d031      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
 8001cdc:	e02c      	b.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d023      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
 8001cf8:	e01e      	b.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10f      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0210 	bic.w	r2, r2, #16
 8001d16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d032      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d022      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2205      	movs	r2, #5
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	3301      	adds	r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d307      	bcc.n	8001d80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f2      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x2cc>
 8001d7e:	e000      	b.n	8001d82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001da4:	bf00      	nop
    }
  }
}
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d108      	bne.n	8001dec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dea:	e007      	b.n	8001dfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3b10      	subs	r3, #16
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <DMA_CalcBaseAndBitshift+0x64>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <DMA_CalcBaseAndBitshift+0x68>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d909      	bls.n	8001e4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e3e:	f023 0303 	bic.w	r3, r3, #3
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	659a      	str	r2, [r3, #88]	; 0x58
 8001e48:	e007      	b.n	8001e5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	aaaaaaab 	.word	0xaaaaaaab
 8001e70:	0800d264 	.word	0x0800d264

08001e74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11f      	bne.n	8001ece <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d856      	bhi.n	8001f42 <DMA_CheckFifoParam+0xce>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <DMA_CheckFifoParam+0x28>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001ebf 	.word	0x08001ebf
 8001ea4:	08001ead 	.word	0x08001ead
 8001ea8:	08001f43 	.word	0x08001f43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d046      	beq.n	8001f46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ebc:	e043      	b.n	8001f46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ec6:	d140      	bne.n	8001f4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ecc:	e03d      	b.n	8001f4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ed6:	d121      	bne.n	8001f1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d837      	bhi.n	8001f4e <DMA_CheckFifoParam+0xda>
 8001ede:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <DMA_CheckFifoParam+0x70>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001efb 	.word	0x08001efb
 8001eec:	08001ef5 	.word	0x08001ef5
 8001ef0:	08001f0d 	.word	0x08001f0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef8:	e030      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d025      	beq.n	8001f52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f0a:	e022      	b.n	8001f52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f14:	d11f      	bne.n	8001f56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f1a:	e01c      	b.n	8001f56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d903      	bls.n	8001f2a <DMA_CheckFifoParam+0xb6>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d003      	beq.n	8001f30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f28:	e018      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2e:	e015      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00e      	beq.n	8001f5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f40:	e00b      	b.n	8001f5a <DMA_CheckFifoParam+0xe6>
      break;
 8001f42:	bf00      	nop
 8001f44:	e00a      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
 8001f48:	e008      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e006      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
 8001f50:	e004      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f52:	bf00      	nop
 8001f54:	e002      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f56:	bf00      	nop
 8001f58:	e000      	b.n	8001f5c <DMA_CheckFifoParam+0xe8>
      break;
 8001f5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e159      	b.n	800223c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8148 	bne.w	8002236 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d017      	beq.n	800205c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a2 	beq.w	8002236 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b57      	ldr	r3, [pc, #348]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a56      	ldr	r2, [pc, #344]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_GPIO_Init+0x2ec>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <HAL_GPIO_Init+0x2f0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0x202>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a48      	ldr	r2, [pc, #288]	; (8002260 <HAL_GPIO_Init+0x2f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x1fe>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a47      	ldr	r2, [pc, #284]	; (8002264 <HAL_GPIO_Init+0x2f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x1fa>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a46      	ldr	r2, [pc, #280]	; (8002268 <HAL_GPIO_Init+0x2fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x1f6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a45      	ldr	r2, [pc, #276]	; (800226c <HAL_GPIO_Init+0x300>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x1f2>
 800215a:	2304      	movs	r3, #4
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800215e:	2307      	movs	r3, #7
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_GPIO_Init+0x2ec>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_GPIO_Init+0x304>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f aea2 	bls.w	8001f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c0:	e003      	b.n	80022ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e8:	887a      	ldrh	r2, [r7, #2]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	041a      	lsls	r2, r3, #16
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	400b      	ands	r3, r1
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	619a      	str	r2, [r3, #24]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	4618      	mov	r0, r3
 800232c:	f00a fd38 	bl	800cda0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40013c00 	.word	0x40013c00

0800233c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	b08f      	sub	sp, #60	; 0x3c
 8002340:	af0a      	add	r7, sp, #40	; 0x28
 8002342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e10f      	b.n	800256e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f009 fda3 	bl	800beb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fac4 	bl	800591a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	687e      	ldr	r6, [r7, #4]
 800239a:	466d      	mov	r5, sp
 800239c:	f106 0410 	add.w	r4, r6, #16
 80023a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80023b0:	1d33      	adds	r3, r6, #4
 80023b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f003 f99b 	bl	80056f0 <USB_CoreInit>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d0      	b.n	800256e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fab2 	bl	800593c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e04a      	b.n	8002474 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	333d      	adds	r3, #61	; 0x3d
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	333c      	adds	r3, #60	; 0x3c
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	b298      	uxth	r0, r3
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3344      	adds	r3, #68	; 0x44
 800241a:	4602      	mov	r2, r0
 800241c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3340      	adds	r3, #64	; 0x40
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3348      	adds	r3, #72	; 0x48
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	334c      	adds	r3, #76	; 0x4c
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3354      	adds	r3, #84	; 0x54
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d3af      	bcc.n	80023de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e044      	b.n	800250e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	3301      	adds	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d3b5      	bcc.n	8002484 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	687e      	ldr	r6, [r7, #4]
 8002520:	466d      	mov	r5, sp
 8002522:	f106 0410 	add.w	r4, r6, #16
 8002526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002532:	e885 0003 	stmia.w	r5, {r0, r1}
 8002536:	1d33      	adds	r3, r6, #4
 8002538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	f003 fa4a 	bl	80059d4 <USB_DevInit>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00d      	b.n	800256e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f004 fb99 	bl	8006c9e <USB_DevDisconnect>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002576 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_PCD_Start+0x1c>
 800258e:	2302      	movs	r3, #2
 8002590:	e020      	b.n	80025d4 <HAL_PCD_Start+0x5e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d109      	bne.n	80025b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 f99c 	bl	80058f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 fb49 	bl	8006c5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b08d      	sub	sp, #52	; 0x34
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 fc07 	bl	8006e06 <USB_GetMode>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 848a 	bne.w	8002f14 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f004 fb6b 	bl	8006ce0 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8480 	beq.w	8002f12 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 fb58 	bl	8006ce0 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b02      	cmp	r3, #2
 8002638:	d107      	bne.n	800264a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f002 0202 	and.w	r2, r2, #2
 8002648:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fb46 	bl	8006ce0 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b10      	cmp	r3, #16
 800265c:	d161      	bne.n	8002722 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0210 	bic.w	r2, r2, #16
 800266c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f003 020f 	and.w	r2, r3, #15
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	0c5b      	lsrs	r3, r3, #17
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	2b02      	cmp	r3, #2
 8002698:	d124      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d035      	beq.n	8002712 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6a38      	ldr	r0, [r7, #32]
 80026ba:	f004 f97d 	bl	80069b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ca:	441a      	add	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026dc:	441a      	add	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	621a      	str	r2, [r3, #32]
 80026e2:	e016      	b.n	8002712 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	0c5b      	lsrs	r3, r3, #17
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	2b06      	cmp	r3, #6
 80026ee:	d110      	bne.n	8002712 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026f6:	2208      	movs	r2, #8
 80026f8:	4619      	mov	r1, r3
 80026fa:	6a38      	ldr	r0, [r7, #32]
 80026fc:	f004 f95c 	bl	80069b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800270c:	441a      	add	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0210 	orr.w	r2, r2, #16
 8002720:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fada 	bl	8006ce0 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002732:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002736:	f040 80a7 	bne.w	8002888 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fadf 	bl	8006d06 <USB_ReadDevAllOutEpInterrupt>
 8002748:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800274a:	e099      	b.n	8002880 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 808e 	beq.w	8002874 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f004 fb03 	bl	8006d6e <USB_ReadDevOutEPInterrupt>
 8002768:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002780:	461a      	mov	r2, r3
 8002782:	2301      	movs	r3, #1
 8002784:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fec3 	bl	8003514 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	2308      	movs	r3, #8
 80027a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 ff99 	bl	80036e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c8:	461a      	mov	r2, r3
 80027ca:	2310      	movs	r3, #16
 80027cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d030      	beq.n	800283a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d109      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	78db      	ldrb	r3, [r3, #3]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f009 fc42 	bl	800c0ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	2302      	movs	r3, #2
 8002838:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	2320      	movs	r3, #32
 8002854:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286c:	461a      	mov	r2, r3
 800286e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002872:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3301      	adds	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	f47f af62 	bne.w	800274c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f004 fa27 	bl	8006ce0 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800289c:	f040 80db 	bne.w	8002a56 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fa48 	bl	8006d3a <USB_ReadDevAllInEpInterrupt>
 80028aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028b0:	e0cd      	b.n	8002a4e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80c2 	beq.w	8002a42 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 fa6e 	bl	8006daa <USB_ReadDevInEPInterrupt>
 80028ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d057      	beq.n	800298a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	2201      	movs	r2, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69f9      	ldr	r1, [r7, #28]
 80028f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028fa:	4013      	ands	r3, r2
 80028fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290a:	461a      	mov	r2, r3
 800290c:	2301      	movs	r3, #1
 800290e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d132      	bne.n	800297e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	334c      	adds	r3, #76	; 0x4c
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4403      	add	r3, r0
 8002938:	3348      	adds	r3, #72	; 0x48
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4419      	add	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4403      	add	r3, r0
 800294c:	334c      	adds	r3, #76	; 0x4c
 800294e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d113      	bne.n	800297e <HAL_PCD_IRQHandler+0x3a2>
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3354      	adds	r3, #84	; 0x54
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d108      	bne.n	800297e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002976:	461a      	mov	r2, r3
 8002978:	2101      	movs	r1, #1
 800297a:	f004 fa75 	bl	8006e68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f009 fb16 	bl	800bfb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a0:	461a      	mov	r2, r3
 80029a2:	2308      	movs	r3, #8
 80029a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029bc:	461a      	mov	r2, r3
 80029be:	2310      	movs	r3, #16
 80029c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d8:	461a      	mov	r2, r3
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d023      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ea:	6a38      	ldr	r0, [r7, #32]
 80029ec:	f003 f956 	bl	8005c9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	3338      	adds	r3, #56	; 0x38
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d108      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f009 fb59 	bl	800c0d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fcdb 	bl	80033f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	3301      	adds	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f af2e 	bne.w	80028b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 f940 	bl	8006ce0 <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a6a:	d122      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d108      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a92:	2100      	movs	r1, #0
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fec3 	bl	8003820 <HAL_PCDEx_LPM_Callback>
 8002a9a:	e002      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f009 faf7 	bl	800c090 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 f912 	bl	8006ce0 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac6:	d112      	bne.n	8002aee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d102      	bne.n	8002ade <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f009 fab3 	bl	800c044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002aec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 f8f4 	bl	8006ce0 <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b02:	f040 80b7 	bne.w	8002c74 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2110      	movs	r1, #16
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 f8bb 	bl	8005c9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2a:	e046      	b.n	8002bba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b50:	0151      	lsls	r1, r2, #5
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	440a      	add	r2, r1
 8002b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b84:	0151      	lsls	r1, r2, #5
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	440a      	add	r2, r1
 8002b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bb2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3b3      	bcc.n	8002b2c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bd6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d016      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf0:	f043 030b 	orr.w	r3, r3, #11
 8002bf4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c06:	f043 030b 	orr.w	r3, r3, #11
 8002c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0c:	e015      	b.n	8002c3a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c20:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c24:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c34:	f043 030b 	orr.w	r3, r3, #11
 8002c38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f004 f902 	bl	8006e68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f831 	bl	8006ce0 <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c88:	d124      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 f8c7 	bl	8006e22 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 f87c 	bl	8005d96 <USB_GetDevSpeed>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681c      	ldr	r4, [r3, #0]
 8002caa:	f001 f9e9 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 8002cae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f002 fd7b 	bl	80057b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f009 f9a1 	bl	800c006 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f004 f801 	bl	8006ce0 <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d10a      	bne.n	8002cfe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f009 f97e 	bl	800bfea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f002 0208 	and.w	r2, r2, #8
 8002cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 ffec 	bl	8006ce0 <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d122      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d1e:	2301      	movs	r3, #1
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e014      	b.n	8002d4e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fb27 	bl	8003396 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3e5      	bcc.n	8002d24 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 ffbf 	bl	8006ce0 <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6c:	d13b      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d6e:	2301      	movs	r3, #1
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e02b      	b.n	8002dcc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	3340      	adds	r3, #64	; 0x40
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d115      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da12      	bge.n	8002dc6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	333f      	adds	r3, #63	; 0x3f
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fae8 	bl	8003396 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	3301      	adds	r3, #1
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d3ce      	bcc.n	8002d74 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 ff78 	bl	8006ce0 <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dfa:	d155      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002e00:	e045      	b.n	8002e8e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d12e      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da2b      	bge.n	8002e88 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e3c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d121      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e84:	6053      	str	r3, [r2, #4]
            break;
 8002e86:	e007      	b.n	8002e98 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3b4      	bcc.n	8002e02 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 ff17 	bl	8006ce0 <USB_ReadInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f009 f918 	bl	800c0f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 ff01 	bl	8006ce0 <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d115      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f009 f908 	bl	800c110 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	e000      	b.n	8002f14 <HAL_PCD_IRQHandler+0x938>
      return;
 8002f12:	bf00      	nop
    }
  }
}
 8002f14:	3734      	adds	r7, #52	; 0x34
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd90      	pop	{r4, r7, pc}

08002f1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_PCD_SetAddress+0x1a>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e013      	b.n	8002f5c <HAL_PCD_SetAddress+0x42>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fe5f 	bl	8006c10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	70fb      	strb	r3, [r7, #3]
 8002f76:	460b      	mov	r3, r1
 8002f78:	803b      	strh	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da0f      	bge.n	8002faa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3338      	adds	r3, #56	; 0x38
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	705a      	strb	r2, [r3, #1]
 8002fa8:	e00f      	b.n	8002fca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fd6:	883a      	ldrh	r2, [r7, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	78ba      	ldrb	r2, [r7, #2]
 8002fe0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ff4:	78bb      	ldrb	r3, [r7, #2]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d102      	bne.n	8003000 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_PCD_EP_Open+0xaa>
 800300a:	2302      	movs	r3, #2
 800300c:	e00e      	b.n	800302c <HAL_PCD_EP_Open+0xc8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fedf 	bl	8005de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800302a:	7afb      	ldrb	r3, [r7, #11]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003044:	2b00      	cmp	r3, #0
 8003046:	da0f      	bge.n	8003068 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3338      	adds	r3, #56	; 0x38
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	705a      	strb	r2, [r3, #1]
 8003066:	e00f      	b.n	8003088 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_PCD_EP_Close+0x6e>
 800309e:	2302      	movs	r3, #2
 80030a0:	e00e      	b.n	80030c0 <HAL_PCD_EP_Close+0x8c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 ff1d 	bl	8005ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	460b      	mov	r3, r1
 80030d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	3304      	adds	r3, #4
 80030f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	b2da      	uxtb	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	f003 f9fc 	bl	8006538 <USB_EP0StartXfer>
 8003140:	e008      	b.n	8003154 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	6979      	ldr	r1, [r7, #20]
 8003150:	f002 ffaa 	bl	80060a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003180:	681b      	ldr	r3, [r3, #0]
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	460b      	mov	r3, r1
 800319c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	3338      	adds	r3, #56	; 0x38
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2201      	movs	r2, #1
 80031cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ce:	7afb      	ldrb	r3, [r7, #11]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d102      	bne.n	80031e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031e8:	7afb      	ldrb	r3, [r7, #11]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6979      	ldr	r1, [r7, #20]
 8003200:	f003 f99a 	bl	8006538 <USB_EP0StartXfer>
 8003204:	e008      	b.n	8003218 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	6979      	ldr	r1, [r7, #20]
 8003214:	f002 ff48 	bl	80060a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 020f 	and.w	r2, r3, #15
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d901      	bls.n	8003240 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e050      	b.n	80032e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003244:	2b00      	cmp	r3, #0
 8003246:	da0f      	bge.n	8003268 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	3338      	adds	r3, #56	; 0x38
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	705a      	strb	r2, [r3, #1]
 8003266:	e00d      	b.n	8003284 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	3304      	adds	r3, #4
 800327c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_PCD_EP_SetStall+0x82>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e01e      	b.n	80032e2 <HAL_PCD_EP_SetStall+0xc0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 fbd8 	bl	8006a68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	b2d9      	uxtb	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d2:	461a      	mov	r2, r3
 80032d4:	f003 fdc8 	bl	8006e68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	429a      	cmp	r2, r3
 8003302:	d901      	bls.n	8003308 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e042      	b.n	800338e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330c:	2b00      	cmp	r3, #0
 800330e:	da0f      	bge.n	8003330 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	3338      	adds	r3, #56	; 0x38
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	705a      	strb	r2, [r3, #1]
 800332e:	e00f      	b.n	8003350 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_PCD_EP_ClrStall+0x86>
 800336c:	2302      	movs	r3, #2
 800336e:	e00e      	b.n	800338e <HAL_PCD_EP_ClrStall+0xa4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68f9      	ldr	r1, [r7, #12]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 fbe0 	bl	8006b44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da0c      	bge.n	80033c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 020f 	and.w	r2, r3, #15
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	3338      	adds	r3, #56	; 0x38
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	3304      	adds	r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e00c      	b.n	80033de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 f9ff 	bl	80067e8 <USB_EPStopXfer>
 80033ea:	4603      	mov	r3, r0
 80033ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	3338      	adds	r3, #56	; 0x38
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	429a      	cmp	r2, r3
 800342a:	d901      	bls.n	8003430 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e06c      	b.n	800350a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	429a      	cmp	r2, r3
 8003444:	d902      	bls.n	800344c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3303      	adds	r3, #3
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003454:	e02b      	b.n	80034ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	d902      	bls.n	8003472 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3303      	adds	r3, #3
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6919      	ldr	r1, [r3, #16]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800348a:	b2db      	uxtb	r3, r3
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4603      	mov	r3, r0
 8003490:	6978      	ldr	r0, [r7, #20]
 8003492:	f003 fa53 	bl	800693c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1a      	ldr	r2, [r3, #32]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	441a      	add	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d809      	bhi.n	80034d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d203      	bcs.n	80034d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1be      	bne.n	8003456 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d811      	bhi.n	8003508 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	2201      	movs	r2, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	6939      	ldr	r1, [r7, #16]
 8003500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003504:	4013      	ands	r3, r2
 8003506:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	333c      	adds	r3, #60	; 0x3c
 800352c:	3304      	adds	r3, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d17b      	bne.n	8003642 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4a61      	ldr	r2, [pc, #388]	; (80036dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	f240 80b9 	bls.w	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80b3 	beq.w	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	461a      	mov	r2, r3
 8003578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357c:	6093      	str	r3, [r2, #8]
 800357e:	e0a7      	b.n	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	2320      	movs	r3, #32
 800359a:	6093      	str	r3, [r2, #8]
 800359c:	e098      	b.n	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 8093 	bne.w	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	4a4b      	ldr	r2, [pc, #300]	; (80036dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d90f      	bls.n	80035d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c8:	461a      	mov	r2, r3
 80035ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ce:	6093      	str	r3, [r2, #8]
 80035d0:	e07e      	b.n	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	0159      	lsls	r1, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	440b      	add	r3, r1
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fe:	1ad2      	subs	r2, r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d114      	bne.n	8003634 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800361c:	461a      	mov	r2, r3
 800361e:	2101      	movs	r1, #1
 8003620:	f003 fc22 	bl	8006e68 <USB_EP0_OutStart>
 8003624:	e006      	b.n	8003634 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	441a      	add	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f008 fca0 	bl	800bf80 <HAL_PCD_DataOutStageCallback>
 8003640:	e046      	b.n	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d124      	bne.n	8003694 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	461a      	mov	r2, r3
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	6093      	str	r3, [r2, #8]
 8003668:	e032      	b.n	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	2320      	movs	r3, #32
 8003684:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f008 fc77 	bl	800bf80 <HAL_PCD_DataOutStageCallback>
 8003692:	e01d      	b.n	80036d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d114      	bne.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036bc:	461a      	mov	r2, r3
 80036be:	2100      	movs	r1, #0
 80036c0:	f003 fbd2 	bl	8006e68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f008 fc58 	bl	800bf80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	4f54300a 	.word	0x4f54300a
 80036e0:	4f54310a 	.word	0x4f54310a

080036e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	333c      	adds	r3, #60	; 0x3c
 80036fc:	3304      	adds	r3, #4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4a15      	ldr	r2, [pc, #84]	; (800376c <PCD_EP_OutSetupPacket_int+0x88>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d90e      	bls.n	8003738 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003736:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f008 fc0f 	bl	800bf5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a0a      	ldr	r2, [pc, #40]	; (800376c <PCD_EP_OutSetupPacket_int+0x88>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d90c      	bls.n	8003760 <PCD_EP_OutSetupPacket_int+0x7c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d108      	bne.n	8003760 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003758:	461a      	mov	r2, r3
 800375a:	2101      	movs	r1, #1
 800375c:	f003 fb84 	bl	8006e68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	4f54300a 	.word	0x4f54300a

08003770 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
 800377c:	4613      	mov	r3, r2
 800377e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800378e:	883b      	ldrh	r3, [r7, #0]
 8003790:	0419      	lsls	r1, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	430a      	orrs	r2, r1
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
 800379c:	e028      	b.n	80037f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4413      	add	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e00d      	b.n	80037ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	3340      	adds	r3, #64	; 0x40
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4413      	add	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	3301      	adds	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d3ec      	bcc.n	80037b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037d8:	883b      	ldrh	r3, [r7, #0]
 80037da:	0418      	lsls	r0, r3, #16
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	4302      	orrs	r2, r0
 80037e8:	3340      	adds	r3, #64	; 0x40
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e267      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d075      	beq.n	8003942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003856:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d00c      	beq.n	800387c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003862:	4b85      	ldr	r3, [pc, #532]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800386a:	2b08      	cmp	r3, #8
 800386c:	d112      	bne.n	8003894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386e:	4b82      	ldr	r3, [pc, #520]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387a:	d10b      	bne.n	8003894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	4b7e      	ldr	r3, [pc, #504]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d05b      	beq.n	8003940 <HAL_RCC_OscConfig+0x108>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d157      	bne.n	8003940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e242      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389c:	d106      	bne.n	80038ac <HAL_RCC_OscConfig+0x74>
 800389e:	4b76      	ldr	r3, [pc, #472]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a75      	ldr	r2, [pc, #468]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0xb0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b70      	ldr	r3, [pc, #448]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6f      	ldr	r2, [pc, #444]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b6d      	ldr	r3, [pc, #436]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6c      	ldr	r2, [pc, #432]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xb0>
 80038d0:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a68      	ldr	r2, [pc, #416]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a65      	ldr	r2, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fd fe98 	bl	8001624 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fd fe94 	bl	8001624 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e207      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b5b      	ldr	r3, [pc, #364]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0xc0>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd fe84 	bl	8001624 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003920:	f7fd fe80 	bl	8001624 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1f3      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b51      	ldr	r3, [pc, #324]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0xe8>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d063      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394e:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003966:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RCC_OscConfig+0x152>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1c7      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4937      	ldr	r1, [pc, #220]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	e03a      	b.n	8003a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a8:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <HAL_RCC_OscConfig+0x244>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fd fe39 	bl	8001624 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fd fe35 	bl	8001624 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1a8      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4925      	ldr	r1, [pc, #148]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_RCC_OscConfig+0x244>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fe18 	bl	8001624 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fd fe14 	bl	8001624 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e187      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d036      	beq.n	8003a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <HAL_RCC_OscConfig+0x248>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fdf8 	bl	8001624 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fd fdf4 	bl	8001624 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e167      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x200>
 8003a56:	e01b      	b.n	8003a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_OscConfig+0x248>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fde1 	bl	8001624 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a64:	e00e      	b.n	8003a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fd fddd 	bl	8001624 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d907      	bls.n	8003a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e150      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	42470000 	.word	0x42470000
 8003a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ea      	bne.n	8003a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8097 	beq.w	8003bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4b81      	ldr	r3, [pc, #516]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	4b7d      	ldr	r3, [pc, #500]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a7c      	ldr	r2, [pc, #496]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
 8003abe:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b77      	ldr	r3, [pc, #476]	; (8003cac <HAL_RCC_OscConfig+0x474>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b74      	ldr	r3, [pc, #464]	; (8003cac <HAL_RCC_OscConfig+0x474>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a73      	ldr	r2, [pc, #460]	; (8003cac <HAL_RCC_OscConfig+0x474>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd fd9d 	bl	8001624 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fd fd99 	bl	8001624 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e10c      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <HAL_RCC_OscConfig+0x474>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x2ea>
 8003b14:	4b64      	ldr	r3, [pc, #400]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a63      	ldr	r2, [pc, #396]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e01c      	b.n	8003b5c <HAL_RCC_OscConfig+0x324>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x30c>
 8003b2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a5e      	ldr	r2, [pc, #376]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
 8003b36:	4b5c      	ldr	r3, [pc, #368]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0x324>
 8003b44:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a57      	ldr	r2, [pc, #348]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	4b55      	ldr	r3, [pc, #340]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a54      	ldr	r2, [pc, #336]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 0304 	bic.w	r3, r3, #4
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd fd5e 	bl	8001624 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fd5a 	bl	8001624 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0cb      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	4b49      	ldr	r3, [pc, #292]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ee      	beq.n	8003b6c <HAL_RCC_OscConfig+0x334>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fd fd48 	bl	8001624 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fd fd44 	bl	8001624 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e0b5      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bae:	4b3e      	ldr	r3, [pc, #248]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc0:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	4a38      	ldr	r2, [pc, #224]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80a1 	beq.w	8003d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd6:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d05c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d141      	bne.n	8003c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bea:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_RCC_OscConfig+0x478>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fd18 	bl	8001624 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fd fd14 	bl	8001624 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e087      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	491b      	ldr	r1, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x478>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fd fced 	bl	8001624 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fd fce9 	bl	8001624 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e05c      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x416>
 8003c6c:	e054      	b.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_RCC_OscConfig+0x478>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd fcd6 	bl	8001624 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd fcd2 	bl	8001624 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e045      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCC_OscConfig+0x470>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x444>
 8003c9a:	e03d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e038      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x4ec>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d028      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d121      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d11a      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d111      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0cc      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b68      	ldr	r3, [pc, #416]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d90c      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b65      	ldr	r3, [pc, #404]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0b8      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a58      	ldr	r2, [pc, #352]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	494d      	ldr	r1, [pc, #308]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d044      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d119      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de6:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e067      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f023 0203 	bic.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4934      	ldr	r1, [pc, #208]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e18:	f7fd fc04 	bl	8001624 <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e20:	f7fd fc00 	bl	8001624 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e04f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 020c 	and.w	r2, r3, #12
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d1eb      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d20c      	bcs.n	8003e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e032      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4916      	ldr	r1, [pc, #88]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eae:	f000 f821 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	490a      	ldr	r1, [pc, #40]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd fa90 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023c00 	.word	0x40023c00
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800d24c 	.word	0x0800d24c
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	20000004 	.word	0x20000004

08003ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef8:	b090      	sub	sp, #64	; 0x40
 8003efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
 8003f00:	2300      	movs	r3, #0
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f04:	2300      	movs	r3, #0
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f0c:	4b59      	ldr	r3, [pc, #356]	; (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d00d      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x40>
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	f200 80a1 	bhi.w	8004060 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x34>
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f26:	e09b      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f2c:	e09b      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2e:	4b53      	ldr	r3, [pc, #332]	; (800407c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f32:	e098      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3e:	4b4d      	ldr	r3, [pc, #308]	; (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d028      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	2200      	movs	r2, #0
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	627a      	str	r2, [r7, #36]	; 0x24
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f60:	fb03 f201 	mul.w	r2, r3, r1
 8003f64:	2300      	movs	r3, #0
 8003f66:	fb00 f303 	mul.w	r3, r0, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4a43      	ldr	r2, [pc, #268]	; (800407c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f6e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f74:	460a      	mov	r2, r1
 8003f76:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7a:	4413      	add	r3, r2
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	2200      	movs	r2, #0
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	61fa      	str	r2, [r7, #28]
 8003f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f8e:	f7fc fd45 	bl	8000a1c <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4613      	mov	r3, r2
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9a:	e053      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	617a      	str	r2, [r7, #20]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fae:	f04f 0b00 	mov.w	fp, #0
 8003fb2:	4652      	mov	r2, sl
 8003fb4:	465b      	mov	r3, fp
 8003fb6:	f04f 0000 	mov.w	r0, #0
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	0159      	lsls	r1, r3, #5
 8003fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc4:	0150      	lsls	r0, r2, #5
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	ebb2 080a 	subs.w	r8, r2, sl
 8003fce:	eb63 090b 	sbc.w	r9, r3, fp
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fe2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fe6:	ebb2 0408 	subs.w	r4, r2, r8
 8003fea:	eb63 0509 	sbc.w	r5, r3, r9
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	00eb      	lsls	r3, r5, #3
 8003ff8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffc:	00e2      	lsls	r2, r4, #3
 8003ffe:	4614      	mov	r4, r2
 8004000:	461d      	mov	r5, r3
 8004002:	eb14 030a 	adds.w	r3, r4, sl
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	eb45 030b 	adc.w	r3, r5, fp
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401a:	4629      	mov	r1, r5
 800401c:	028b      	lsls	r3, r1, #10
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004024:	4621      	mov	r1, r4
 8004026:	028a      	lsls	r2, r1, #10
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402e:	2200      	movs	r2, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	60fa      	str	r2, [r7, #12]
 8004034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004038:	f7fc fcf0 	bl	8000a1c <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4613      	mov	r3, r2
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_GetSysClockFreq+0x180>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800405e:	e002      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCC_GetSysClockFreq+0x184>)
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004068:	4618      	mov	r0, r3
 800406a:	3740      	adds	r7, #64	; 0x40
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	00f42400 	.word	0x00f42400
 800407c:	017d7840 	.word	0x017d7840

08004080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000000 	.word	0x20000000

08004098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800409c:	f7ff fff0 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0b5b      	lsrs	r3, r3, #13
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	0800d25c 	.word	0x0800d25c

080040c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	220f      	movs	r2, #15
 80040ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_GetClockConfig+0x5c>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0203 	and.w	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_RCC_GetClockConfig+0x5c>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <HAL_RCC_GetClockConfig+0x5c>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCC_GetClockConfig+0x5c>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <HAL_RCC_GetClockConfig+0x60>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0207 	and.w	r2, r3, #7
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40023c00 	.word	0x40023c00

08004124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e041      	b.n	80041ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f8a6 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f000 ff76 	bl	8005054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d001      	beq.n	80041dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e03c      	b.n	8004256 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <HAL_TIM_Base_Start+0xa0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_TIM_Base_Start+0x5c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d013      	beq.n	8004220 <HAL_TIM_Base_Start+0x5c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <HAL_TIM_Base_Start+0xa4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_TIM_Base_Start+0x5c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_TIM_Base_Start+0xa8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_TIM_Base_Start+0x5c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a17      	ldr	r2, [pc, #92]	; (8004270 <HAL_TIM_Base_Start+0xac>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIM_Base_Start+0x5c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <HAL_TIM_Base_Start+0xb0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d111      	bne.n	8004244 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b06      	cmp	r3, #6
 8004230:	d010      	beq.n	8004254 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	e007      	b.n	8004254 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000

08004278 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a1a      	ldr	r2, [r3, #32]
 8004286:	f241 1311 	movw	r3, #4369	; 0x1111
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10f      	bne.n	80042b0 <HAL_TIM_Base_Stop+0x38>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	f240 4344 	movw	r3, #1092	; 0x444
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_Base_Stop+0x38>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d001      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e044      	b.n	800436a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_TIM_Base_Start_IT+0xb0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x6c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d013      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x6c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1a      	ldr	r2, [pc, #104]	; (800437c <HAL_TIM_Base_Start_IT+0xb4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x6c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_TIM_Base_Start_IT+0xb8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x6c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <HAL_TIM_Base_Start_IT+0xbc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x6c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_TIM_Base_Start_IT+0xc0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d111      	bne.n	8004358 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b06      	cmp	r3, #6
 8004344:	d010      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	e007      	b.n	8004368 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40014000 	.word	0x40014000

0800438c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e041      	b.n	8004422 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f839 	bl	800442a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 fe42 	bl	8005054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e022      	b.n	80044b2 <HAL_TIM_PWM_Start_DMA+0x72>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d109      	bne.n	8004486 <HAL_TIM_PWM_Start_DMA+0x46>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e015      	b.n	80044b2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d109      	bne.n	80044a0 <HAL_TIM_PWM_Start_DMA+0x60>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e008      	b.n	80044b2 <HAL_TIM_PWM_Start_DMA+0x72>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
 80044b8:	e15d      	b.n	8004776 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_TIM_PWM_Start_DMA+0x94>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	e022      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0xda>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d109      	bne.n	80044ee <HAL_TIM_PWM_Start_DMA+0xae>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	bf0c      	ite	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	2300      	movne	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e015      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0xda>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d109      	bne.n	8004508 <HAL_TIM_PWM_Start_DMA+0xc8>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	e008      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0xda>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d024      	beq.n	8004568 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start_DMA+0xee>
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e123      	b.n	8004776 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800453c:	e016      	b.n	800456c <HAL_TIM_PWM_Start_DMA+0x12c>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b04      	cmp	r3, #4
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800454c:	e00e      	b.n	800456c <HAL_TIM_PWM_Start_DMA+0x12c>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455c:	e006      	b.n	800456c <HAL_TIM_PWM_Start_DMA+0x12c>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004566:	e001      	b.n	800456c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e104      	b.n	8004776 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	f200 80ae 	bhi.w	80046d0 <HAL_TIM_PWM_Start_DMA+0x290>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080046d1 	.word	0x080046d1
 8004584:	080046d1 	.word	0x080046d1
 8004588:	080046d1 	.word	0x080046d1
 800458c:	080045f9 	.word	0x080045f9
 8004590:	080046d1 	.word	0x080046d1
 8004594:	080046d1 	.word	0x080046d1
 8004598:	080046d1 	.word	0x080046d1
 800459c:	08004641 	.word	0x08004641
 80045a0:	080046d1 	.word	0x080046d1
 80045a4:	080046d1 	.word	0x080046d1
 80045a8:	080046d1 	.word	0x080046d1
 80045ac:	08004689 	.word	0x08004689
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	4a72      	ldr	r2, [pc, #456]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x340>)
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	4a71      	ldr	r2, [pc, #452]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x344>)
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	4a70      	ldr	r2, [pc, #448]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x348>)
 80045c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3334      	adds	r3, #52	; 0x34
 80045d4:	461a      	mov	r2, r3
 80045d6:	887b      	ldrh	r3, [r7, #2]
 80045d8:	f7fd f9e4 	bl	80019a4 <HAL_DMA_Start_IT>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0c7      	b.n	8004776 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	60da      	str	r2, [r3, #12]
      break;
 80045f6:	e06e      	b.n	80046d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	4a60      	ldr	r2, [pc, #384]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x340>)
 80045fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	4a5f      	ldr	r2, [pc, #380]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	4a5e      	ldr	r2, [pc, #376]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x348>)
 800460e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3338      	adds	r3, #56	; 0x38
 800461c:	461a      	mov	r2, r3
 800461e:	887b      	ldrh	r3, [r7, #2]
 8004620:	f7fd f9c0 	bl	80019a4 <HAL_DMA_Start_IT>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0a3      	b.n	8004776 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800463c:	60da      	str	r2, [r3, #12]
      break;
 800463e:	e04a      	b.n	80046d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4a4e      	ldr	r2, [pc, #312]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004646:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a4d      	ldr	r2, [pc, #308]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x344>)
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a4c      	ldr	r2, [pc, #304]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004656:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	333c      	adds	r3, #60	; 0x3c
 8004664:	461a      	mov	r2, r3
 8004666:	887b      	ldrh	r3, [r7, #2]
 8004668:	f7fd f99c 	bl	80019a4 <HAL_DMA_Start_IT>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e07f      	b.n	8004776 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004684:	60da      	str	r2, [r3, #12]
      break;
 8004686:	e026      	b.n	80046d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4a3c      	ldr	r2, [pc, #240]	; (8004780 <HAL_TIM_PWM_Start_DMA+0x340>)
 800468e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4a3b      	ldr	r2, [pc, #236]	; (8004784 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x348>)
 800469e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3340      	adds	r3, #64	; 0x40
 80046ac:	461a      	mov	r2, r3
 80046ae:	887b      	ldrh	r3, [r7, #2]
 80046b0:	f7fd f978 	bl	80019a4 <HAL_DMA_Start_IT>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e05b      	b.n	8004776 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046cc:	60da      	str	r2, [r3, #12]
      break;
 80046ce:	e002      	b.n	80046d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
      break;
 80046d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d14b      	bne.n	8004774 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 ff5b 	bl	80055a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a27      	ldr	r2, [pc, #156]	; (800478c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004702:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d018      	beq.n	8004740 <HAL_TIM_PWM_Start_DMA+0x300>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d013      	beq.n	8004740 <HAL_TIM_PWM_Start_DMA+0x300>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_TIM_PWM_Start_DMA+0x350>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_TIM_PWM_Start_DMA+0x300>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_TIM_PWM_Start_DMA+0x300>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_TIM_PWM_Start_DMA+0x300>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_TIM_PWM_Start_DMA+0x35c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d111      	bne.n	8004764 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b06      	cmp	r3, #6
 8004750:	d010      	beq.n	8004774 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004762:	e007      	b.n	8004774 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	08004f45 	.word	0x08004f45
 8004784:	08004fed 	.word	0x08004fed
 8004788:	08004eb3 	.word	0x08004eb3
 800478c:	40010000 	.word	0x40010000
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800
 8004798:	40000c00 	.word	0x40000c00
 800479c:	40014000 	.word	0x40014000

080047a0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	d855      	bhi.n	8004860 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	08004861 	.word	0x08004861
 80047c4:	08004861 	.word	0x08004861
 80047c8:	08004861 	.word	0x08004861
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	08004861 	.word	0x08004861
 80047d4:	08004861 	.word	0x08004861
 80047d8:	08004861 	.word	0x08004861
 80047dc:	08004829 	.word	0x08004829
 80047e0:	08004861 	.word	0x08004861
 80047e4:	08004861 	.word	0x08004861
 80047e8:	08004861 	.word	0x08004861
 80047ec:	08004845 	.word	0x08004845
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	4618      	mov	r0, r3
 8004806:	f7fd f925 	bl	8001a54 <HAL_DMA_Abort_IT>
      break;
 800480a:	e02c      	b.n	8004866 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	4618      	mov	r0, r3
 8004822:	f7fd f917 	bl	8001a54 <HAL_DMA_Abort_IT>
      break;
 8004826:	e01e      	b.n	8004866 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004836:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4618      	mov	r0, r3
 800483e:	f7fd f909 	bl	8001a54 <HAL_DMA_Abort_IT>
      break;
 8004842:	e010      	b.n	8004866 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004852:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd f8fb 	bl	8001a54 <HAL_DMA_Abort_IT>
      break;
 800485e:	e002      	b.n	8004866 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	bf00      	nop
  }

  if (status == HAL_OK)
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d157      	bne.n	800491c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fe93 	bl	80055a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d117      	bne.n	80048b4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	f241 1311 	movw	r3, #4369	; 0x1111
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6a1a      	ldr	r2, [r3, #32]
 800489a:	f240 4344 	movw	r3, #1092	; 0x444
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a1a      	ldr	r2, [r3, #32]
 80048ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10f      	bne.n	80048e4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	f240 4344 	movw	r3, #1092	; 0x444
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d107      	bne.n	80048e4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_TIM_PWM_Stop_DMA+0x154>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f2:	e013      	b.n	800491c <HAL_TIM_PWM_Stop_DMA+0x17c>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d104      	bne.n	8004904 <HAL_TIM_PWM_Stop_DMA+0x164>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004902:	e00b      	b.n	800491c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b08      	cmp	r3, #8
 8004908:	d104      	bne.n	8004914 <HAL_TIM_PWM_Stop_DMA+0x174>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004912:	e003      	b.n	800491c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000

0800492c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b02      	cmp	r3, #2
 8004940:	d122      	bne.n	8004988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d11b      	bne.n	8004988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0202 	mvn.w	r2, #2
 8004958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa77 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa69 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f008 f867 	bl	800ca50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0204 	mvn.w	r2, #4
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa4d 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fa3f 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f008 f83d 	bl	800ca50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0208 	mvn.w	r2, #8
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2204      	movs	r2, #4
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa23 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa15 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f008 f813 	bl	800ca50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0210 	mvn.w	r2, #16
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9f9 	bl	8004e62 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9eb 	bl	8004e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f007 ffe9 	bl	800ca50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10e      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0201 	mvn.w	r2, #1
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fbaa 	bl	8001204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d10e      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b80      	cmp	r3, #128	; 0x80
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fe00 	bl	80056dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9c1 	bl	8004e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0220 	mvn.w	r2, #32
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fdca 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e0ae      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	f200 809f 	bhi.w	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004ca9 	.word	0x08004ca9
 8004b78:	08004ca9 	.word	0x08004ca9
 8004b7c:	08004ca9 	.word	0x08004ca9
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004ca9 	.word	0x08004ca9
 8004b88:	08004ca9 	.word	0x08004ca9
 8004b8c:	08004ca9 	.word	0x08004ca9
 8004b90:	08004c27 	.word	0x08004c27
 8004b94:	08004ca9 	.word	0x08004ca9
 8004b98:	08004ca9 	.word	0x08004ca9
 8004b9c:	08004ca9 	.word	0x08004ca9
 8004ba0:	08004c67 	.word	0x08004c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fad2 	bl	8005154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0208 	orr.w	r2, r2, #8
 8004bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0204 	bic.w	r2, r2, #4
 8004bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6999      	ldr	r1, [r3, #24]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	619a      	str	r2, [r3, #24]
      break;
 8004be2:	e064      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fb18 	bl	8005220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	619a      	str	r2, [r3, #24]
      break;
 8004c24:	e043      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fb63 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0208 	orr.w	r2, r2, #8
 8004c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0204 	bic.w	r2, r2, #4
 8004c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69d9      	ldr	r1, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	61da      	str	r2, [r3, #28]
      break;
 8004c64:	e023      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fbad 	bl	80053cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	021a      	lsls	r2, r3, #8
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	61da      	str	r2, [r3, #28]
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIM_ConfigClockSource+0x1c>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e0b4      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x186>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d14:	d03e      	beq.n	8004d94 <HAL_TIM_ConfigClockSource+0xd4>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	f200 8087 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	f000 8086 	beq.w	8004e32 <HAL_TIM_ConfigClockSource+0x172>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2a:	d87f      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b70      	cmp	r3, #112	; 0x70
 8004d2e:	d01a      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0xa6>
 8004d30:	2b70      	cmp	r3, #112	; 0x70
 8004d32:	d87b      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b60      	cmp	r3, #96	; 0x60
 8004d36:	d050      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x11a>
 8004d38:	2b60      	cmp	r3, #96	; 0x60
 8004d3a:	d877      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b50      	cmp	r3, #80	; 0x50
 8004d3e:	d03c      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0xfa>
 8004d40:	2b50      	cmp	r3, #80	; 0x50
 8004d42:	d873      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d058      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x13a>
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d86f      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b30      	cmp	r3, #48	; 0x30
 8004d4e:	d064      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	2b30      	cmp	r3, #48	; 0x30
 8004d52:	d86b      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d060      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d867      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05c      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d05a      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	e062      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6899      	ldr	r1, [r3, #8]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f000 fbf3 	bl	8005560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	609a      	str	r2, [r3, #8]
      break;
 8004d92:	e04f      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6899      	ldr	r1, [r3, #8]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f000 fbdc 	bl	8005560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004db6:	609a      	str	r2, [r3, #8]
      break;
 8004db8:	e03c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f000 fb50 	bl	800546c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2150      	movs	r1, #80	; 0x50
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fba9 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004dd8:	e02c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6859      	ldr	r1, [r3, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f000 fb6f 	bl	80054ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2160      	movs	r1, #96	; 0x60
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fb99 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004df8:	e01c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 fb30 	bl	800546c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2140      	movs	r1, #64	; 0x40
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fb89 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004e18:	e00c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f000 fb80 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004e2a:	e003      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e30:	e000      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d107      	bne.n	8004eda <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed8:	e02a      	b.n	8004f30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d107      	bne.n	8004ef4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef2:	e01d      	b.n	8004f30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d107      	bne.n	8004f0e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2204      	movs	r2, #4
 8004f02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f0c:	e010      	b.n	8004f30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d107      	bne.n	8004f28 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f26:	e003      	b.n	8004f30 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff ffb4 	bl	8004e9e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d10b      	bne.n	8004f74 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d136      	bne.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f72:	e031      	b.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d10b      	bne.n	8004f96 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2202      	movs	r2, #2
 8004f82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d125      	bne.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f94:	e020      	b.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d10b      	bne.n	8004fb8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d114      	bne.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb6:	e00f      	b.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d10a      	bne.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f007 fd39 	bl	800ca50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d103      	bne.n	800500c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	771a      	strb	r2, [r3, #28]
 800500a:	e019      	b.n	8005040 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d103      	bne.n	800501e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2202      	movs	r2, #2
 800501a:	771a      	strb	r2, [r3, #28]
 800501c:	e010      	b.n	8005040 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d103      	bne.n	8005030 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2204      	movs	r2, #4
 800502c:	771a      	strb	r2, [r3, #28]
 800502e:	e007      	b.n	8005040 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d102      	bne.n	8005040 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2208      	movs	r2, #8
 800503e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff ff18 	bl	8004e76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a34      	ldr	r2, [pc, #208]	; (8005138 <TIM_Base_SetConfig+0xe4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00f      	beq.n	800508c <TIM_Base_SetConfig+0x38>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005072:	d00b      	beq.n	800508c <TIM_Base_SetConfig+0x38>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a31      	ldr	r2, [pc, #196]	; (800513c <TIM_Base_SetConfig+0xe8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_Base_SetConfig+0x38>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a30      	ldr	r2, [pc, #192]	; (8005140 <TIM_Base_SetConfig+0xec>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_Base_SetConfig+0x38>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2f      	ldr	r2, [pc, #188]	; (8005144 <TIM_Base_SetConfig+0xf0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d108      	bne.n	800509e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a25      	ldr	r2, [pc, #148]	; (8005138 <TIM_Base_SetConfig+0xe4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d01b      	beq.n	80050de <TIM_Base_SetConfig+0x8a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d017      	beq.n	80050de <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <TIM_Base_SetConfig+0xe8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a21      	ldr	r2, [pc, #132]	; (8005140 <TIM_Base_SetConfig+0xec>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_Base_SetConfig+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a20      	ldr	r2, [pc, #128]	; (8005144 <TIM_Base_SetConfig+0xf0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_Base_SetConfig+0x8a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <TIM_Base_SetConfig+0xf4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_Base_SetConfig+0x8a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	; (800514c <TIM_Base_SetConfig+0xf8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_Base_SetConfig+0x8a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <TIM_Base_SetConfig+0xfc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <TIM_Base_SetConfig+0xe4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	615a      	str	r2, [r3, #20]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800

08005154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 0302 	bic.w	r3, r3, #2
 800519c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <TIM_OC1_SetConfig+0xc8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d10c      	bne.n	80051ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 0308 	bic.w	r3, r3, #8
 80051b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <TIM_OC1_SetConfig+0xc8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d111      	bne.n	80051f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40010000 	.word	0x40010000

08005220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0210 	bic.w	r2, r3, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0320 	bic.w	r3, r3, #32
 800526a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <TIM_OC2_SetConfig+0xd4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10d      	bne.n	800529c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <TIM_OC2_SetConfig+0xd4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d113      	bne.n	80052cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <TIM_OC3_SetConfig+0xd0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10d      	bne.n	8005372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <TIM_OC3_SetConfig+0xd0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d113      	bne.n	80053a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40010000 	.word	0x40010000

080053cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	031b      	lsls	r3, r3, #12
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a10      	ldr	r2, [pc, #64]	; (8005468 <TIM_OC4_SetConfig+0x9c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d109      	bne.n	8005440 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000

0800546c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 030a 	bic.w	r3, r3, #10
 80054a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b087      	sub	sp, #28
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	f043 0307 	orr.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	431a      	orrs	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	609a      	str	r2, [r3, #8]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2201      	movs	r2, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	401a      	ands	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	431a      	orrs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005600:	2302      	movs	r3, #2
 8005602:	e050      	b.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d018      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d013      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00e      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a16      	ldr	r2, [pc, #88]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10c      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40014000 	.word	0x40014000

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f0:	b084      	sub	sp, #16
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	f107 001c 	add.w	r0, r7, #28
 80056fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2b01      	cmp	r3, #1
 8005706:	d122      	bne.n	800574e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800571c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fbee 	bl	8006f24 <USB_CoreReset>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e01a      	b.n	8005784 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 fbe2 	bl	8006f24 <USB_CoreReset>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
 8005776:	e005      	b.n	8005784 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	2b01      	cmp	r3, #1
 8005788:	d10b      	bne.n	80057a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f043 0206 	orr.w	r2, r3, #6
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f043 0220 	orr.w	r2, r3, #32
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ae:	b004      	add	sp, #16
 80057b0:	4770      	bx	lr
	...

080057b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d165      	bne.n	8005894 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a41      	ldr	r2, [pc, #260]	; (80058d0 <USB_SetTurnaroundTime+0x11c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d906      	bls.n	80057de <USB_SetTurnaroundTime+0x2a>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a40      	ldr	r2, [pc, #256]	; (80058d4 <USB_SetTurnaroundTime+0x120>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d202      	bcs.n	80057de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057d8:	230f      	movs	r3, #15
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e062      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a3c      	ldr	r2, [pc, #240]	; (80058d4 <USB_SetTurnaroundTime+0x120>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d306      	bcc.n	80057f4 <USB_SetTurnaroundTime+0x40>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a3b      	ldr	r2, [pc, #236]	; (80058d8 <USB_SetTurnaroundTime+0x124>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d202      	bcs.n	80057f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057ee:	230e      	movs	r3, #14
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e057      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a38      	ldr	r2, [pc, #224]	; (80058d8 <USB_SetTurnaroundTime+0x124>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d306      	bcc.n	800580a <USB_SetTurnaroundTime+0x56>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a37      	ldr	r2, [pc, #220]	; (80058dc <USB_SetTurnaroundTime+0x128>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d202      	bcs.n	800580a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005804:	230d      	movs	r3, #13
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e04c      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a33      	ldr	r2, [pc, #204]	; (80058dc <USB_SetTurnaroundTime+0x128>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d306      	bcc.n	8005820 <USB_SetTurnaroundTime+0x6c>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a32      	ldr	r2, [pc, #200]	; (80058e0 <USB_SetTurnaroundTime+0x12c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d802      	bhi.n	8005820 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800581a:	230c      	movs	r3, #12
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e041      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a2f      	ldr	r2, [pc, #188]	; (80058e0 <USB_SetTurnaroundTime+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d906      	bls.n	8005836 <USB_SetTurnaroundTime+0x82>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a2e      	ldr	r2, [pc, #184]	; (80058e4 <USB_SetTurnaroundTime+0x130>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d802      	bhi.n	8005836 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005830:	230b      	movs	r3, #11
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	e036      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <USB_SetTurnaroundTime+0x130>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d906      	bls.n	800584c <USB_SetTurnaroundTime+0x98>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <USB_SetTurnaroundTime+0x134>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d802      	bhi.n	800584c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005846:	230a      	movs	r3, #10
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e02b      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <USB_SetTurnaroundTime+0x134>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d906      	bls.n	8005862 <USB_SetTurnaroundTime+0xae>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a25      	ldr	r2, [pc, #148]	; (80058ec <USB_SetTurnaroundTime+0x138>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d202      	bcs.n	8005862 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800585c:	2309      	movs	r3, #9
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e020      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4a21      	ldr	r2, [pc, #132]	; (80058ec <USB_SetTurnaroundTime+0x138>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d306      	bcc.n	8005878 <USB_SetTurnaroundTime+0xc4>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <USB_SetTurnaroundTime+0x13c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d802      	bhi.n	8005878 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005872:	2308      	movs	r3, #8
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	e015      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <USB_SetTurnaroundTime+0x13c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d906      	bls.n	800588e <USB_SetTurnaroundTime+0xda>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <USB_SetTurnaroundTime+0x140>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d202      	bcs.n	800588e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005888:	2307      	movs	r3, #7
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e00a      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800588e:	2306      	movs	r3, #6
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e007      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800589a:	2309      	movs	r3, #9
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e001      	b.n	80058a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058a0:	2309      	movs	r3, #9
 80058a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058bc:	431a      	orrs	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	00d8acbf 	.word	0x00d8acbf
 80058d4:	00e4e1c0 	.word	0x00e4e1c0
 80058d8:	00f42400 	.word	0x00f42400
 80058dc:	01067380 	.word	0x01067380
 80058e0:	011a499f 	.word	0x011a499f
 80058e4:	01312cff 	.word	0x01312cff
 80058e8:	014ca43f 	.word	0x014ca43f
 80058ec:	016e3600 	.word	0x016e3600
 80058f0:	01a6ab1f 	.word	0x01a6ab1f
 80058f4:	01e84800 	.word	0x01e84800

080058f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f043 0201 	orr.w	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d115      	bne.n	800598a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800596a:	2001      	movs	r0, #1
 800596c:	f7fb fe66 	bl	800163c <HAL_Delay>
      ms++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3301      	adds	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 fa45 	bl	8006e06 <USB_GetMode>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d01e      	beq.n	80059c0 <USB_SetCurrentMode+0x84>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b31      	cmp	r3, #49	; 0x31
 8005986:	d9f0      	bls.n	800596a <USB_SetCurrentMode+0x2e>
 8005988:	e01a      	b.n	80059c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d115      	bne.n	80059bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800599c:	2001      	movs	r0, #1
 800599e:	f7fb fe4d 	bl	800163c <HAL_Delay>
      ms++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 fa2c 	bl	8006e06 <USB_GetMode>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <USB_SetCurrentMode+0x84>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b31      	cmp	r3, #49	; 0x31
 80059b8:	d9f0      	bls.n	800599c <USB_SetCurrentMode+0x60>
 80059ba:	e001      	b.n	80059c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e005      	b.n	80059cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b32      	cmp	r3, #50	; 0x32
 80059c4:	d101      	bne.n	80059ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059d4:	b084      	sub	sp, #16
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e009      	b.n	8005a08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3340      	adds	r3, #64	; 0x40
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3301      	adds	r3, #1
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b0e      	cmp	r3, #14
 8005a0c:	d9f2      	bls.n	80059f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d11c      	bne.n	8005a4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a22:	f043 0302 	orr.w	r3, r3, #2
 8005a26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005a4c:	e00b      	b.n	8005a66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	4619      	mov	r1, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	461a      	mov	r2, r3
 8005a82:	680b      	ldr	r3, [r1, #0]
 8005a84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10c      	bne.n	8005aa6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a92:	2100      	movs	r1, #0
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f965 	bl	8005d64 <USB_SetDevSpeed>
 8005a9a:	e008      	b.n	8005aae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f960 	bl	8005d64 <USB_SetDevSpeed>
 8005aa4:	e003      	b.n	8005aae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f95b 	bl	8005d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aae:	2110      	movs	r1, #16
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f8f3 	bl	8005c9c <USB_FlushTxFifo>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f91f 	bl	8005d04 <USB_FlushRxFifo>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	e043      	b.n	8005b82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b10:	d118      	bne.n	8005b44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	461a      	mov	r2, r3
 8005b26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	e013      	b.n	8005b56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	e008      	b.n	8005b56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	461a      	mov	r2, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	461a      	mov	r2, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	461a      	mov	r2, r3
 8005b76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3b7      	bcc.n	8005afa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e043      	b.n	8005c18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba6:	d118      	bne.n	8005bda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e013      	b.n	8005bec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e008      	b.n	8005bec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	461a      	mov	r2, r3
 8005be8:	2300      	movs	r3, #0
 8005bea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3301      	adds	r3, #1
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d3b7      	bcc.n	8005b90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f043 0210 	orr.w	r2, r3, #16
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <USB_DevInit+0x2c4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f043 0208 	orr.w	r2, r3, #8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d107      	bne.n	8005c88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c80:	f043 0304 	orr.w	r3, r3, #4
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c94:	b004      	add	sp, #16
 8005c96:	4770      	bx	lr
 8005c98:	803c3800 	.word	0x803c3800

08005c9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <USB_FlushTxFifo+0x64>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e01b      	b.n	8005cf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	daf2      	bge.n	8005caa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	019b      	lsls	r3, r3, #6
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <USB_FlushTxFifo+0x64>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e006      	b.n	8005cf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d0f0      	beq.n	8005cd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	00030d40 	.word	0x00030d40

08005d04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <USB_FlushRxFifo+0x5c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e018      	b.n	8005d54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	daf2      	bge.n	8005d10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2210      	movs	r2, #16
 8005d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <USB_FlushRxFifo+0x5c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e006      	b.n	8005d54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d0f0      	beq.n	8005d34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	00030d40 	.word	0x00030d40

08005d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
 8005dba:	e00a      	b.n	8005dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d002      	beq.n	8005dc8 <USB_GetDevSpeed+0x32>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d102      	bne.n	8005dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	75fb      	strb	r3, [r7, #23]
 8005dcc:	e001      	b.n	8005dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dce:	230f      	movs	r3, #15
 8005dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d13a      	bne.n	8005e72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d155      	bne.n	8005ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	059b      	lsls	r3, r3, #22
 8005e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e036      	b.n	8005ee0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11a      	bne.n	8005ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ede:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d161      	bne.n	8005fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f22:	d11f      	bne.n	8005f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f84:	4013      	ands	r3, r2
 8005f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	0159      	lsls	r1, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <USB_DeactivateEndpoint+0x1b0>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
 8005fce:	e060      	b.n	8006092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe6:	d11f      	bne.n	8006028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	2101      	movs	r1, #1
 800603a:	fa01 f303 	lsl.w	r3, r1, r3
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	43db      	mvns	r3, r3
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006048:	4013      	ands	r3, r2
 800604a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	43db      	mvns	r3, r3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800606c:	4013      	ands	r3, r2
 800606e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	0159      	lsls	r1, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	440b      	add	r3, r1
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	4619      	mov	r1, r3
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <USB_DeactivateEndpoint+0x1b4>)
 800608e:	4013      	ands	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	ec337800 	.word	0xec337800
 80060a4:	eff37800 	.word	0xeff37800

080060a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f040 815c 	bne.w	8006382 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d132      	bne.n	8006138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	0cdb      	lsrs	r3, r3, #19
 8006132:	04db      	lsls	r3, r3, #19
 8006134:	6113      	str	r3, [r2, #16]
 8006136:	e074      	b.n	8006222 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006152:	0cdb      	lsrs	r3, r3, #19
 8006154:	04db      	lsls	r3, r3, #19
 8006156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006176:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800617a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6999      	ldr	r1, [r3, #24]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	440b      	add	r3, r1
 8006194:	1e59      	subs	r1, r3, #1
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	fbb1 f3f3 	udiv	r3, r1, r3
 800619e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061a0:	4b9d      	ldr	r3, [pc, #628]	; (8006418 <USB_EPStartXfer+0x370>)
 80061a2:	400b      	ands	r3, r1
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	0148      	lsls	r0, r1, #5
 80061a8:	69f9      	ldr	r1, [r7, #28]
 80061aa:	4401      	add	r1, r0
 80061ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061b0:	4313      	orrs	r3, r2
 80061b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ca:	69b9      	ldr	r1, [r7, #24]
 80061cc:	0148      	lsls	r0, r1, #5
 80061ce:	69f9      	ldr	r1, [r7, #28]
 80061d0:	4401      	add	r1, r0
 80061d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061d6:	4313      	orrs	r3, r2
 80061d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	791b      	ldrb	r3, [r3, #4]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d11f      	bne.n	8006222 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006200:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006220:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d14b      	bne.n	80062c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623c:	461a      	mov	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	791b      	ldrb	r3, [r3, #4]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d128      	bne.n	800629e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d110      	bne.n	800627e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	e00f      	b.n	800629e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e133      	b.n	8006528 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	791b      	ldrb	r3, [r3, #4]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d015      	beq.n	8006314 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 811b 	beq.w	8006528 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	2101      	movs	r1, #1
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	69f9      	ldr	r1, [r7, #28]
 800630a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630e:	4313      	orrs	r3, r2
 8006310:	634b      	str	r3, [r1, #52]	; 0x34
 8006312:	e109      	b.n	8006528 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d110      	bne.n	8006346 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	e00f      	b.n	8006366 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006364:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6919      	ldr	r1, [r3, #16]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	b298      	uxth	r0, r3
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	4603      	mov	r3, r0
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 fade 	bl	800693c <USB_WritePacket>
 8006380:	e0d2      	b.n	8006528 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639c:	0cdb      	lsrs	r3, r3, #19
 800639e:	04db      	lsls	r3, r3, #19
 80063a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d126      	bne.n	800641c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e4:	69b9      	ldr	r1, [r7, #24]
 80063e6:	0148      	lsls	r0, r1, #5
 80063e8:	69f9      	ldr	r1, [r7, #28]
 80063ea:	4401      	add	r1, r0
 80063ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063f0:	4313      	orrs	r3, r2
 80063f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006412:	6113      	str	r3, [r2, #16]
 8006414:	e03a      	b.n	800648c <USB_EPStartXfer+0x3e4>
 8006416:	bf00      	nop
 8006418:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	699a      	ldr	r2, [r3, #24]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4413      	add	r3, r2
 8006426:	1e5a      	subs	r2, r3, #1
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006430:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	8afa      	ldrh	r2, [r7, #22]
 8006438:	fb03 f202 	mul.w	r2, r3, r2
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	8afb      	ldrh	r3, [r7, #22]
 8006450:	04d9      	lsls	r1, r3, #19
 8006452:	4b38      	ldr	r3, [pc, #224]	; (8006534 <USB_EPStartXfer+0x48c>)
 8006454:	400b      	ands	r3, r1
 8006456:	69b9      	ldr	r1, [r7, #24]
 8006458:	0148      	lsls	r0, r1, #5
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	4401      	add	r1, r0
 800645e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006462:	4313      	orrs	r3, r2
 8006464:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10d      	bne.n	80064ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6919      	ldr	r1, [r3, #16]
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	460a      	mov	r2, r1
 80064ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	791b      	ldrb	r3, [r3, #4]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d128      	bne.n	8006508 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d110      	bne.n	80064e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e00f      	b.n	8006508 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006506:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	1ff80000 	.word	0x1ff80000

08006538 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2b01      	cmp	r3, #1
 8006556:	f040 80ce 	bne.w	80066f6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d132      	bne.n	80065c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	440a      	add	r2, r1
 8006578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006580:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c0:	0cdb      	lsrs	r3, r3, #19
 80065c2:	04db      	lsls	r3, r3, #19
 80065c4:	6113      	str	r3, [r2, #16]
 80065c6:	e04e      	b.n	8006666 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e2:	0cdb      	lsrs	r3, r3, #19
 80065e4:	04db      	lsls	r3, r3, #19
 80065e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800660a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800663e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006656:	6939      	ldr	r1, [r7, #16]
 8006658:	0148      	lsls	r0, r1, #5
 800665a:	6979      	ldr	r1, [r7, #20]
 800665c:	4401      	add	r1, r0
 800665e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006662:	4313      	orrs	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d11e      	bne.n	80066aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006680:	461a      	mov	r2, r3
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e097      	b.n	80067da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8083 	beq.w	80067da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	6979      	ldr	r1, [r7, #20]
 80066ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f0:	4313      	orrs	r3, r2
 80066f2:	634b      	str	r3, [r1, #52]	; 0x34
 80066f4:	e071      	b.n	80067da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006710:	0cdb      	lsrs	r3, r3, #19
 8006712:	04db      	lsls	r3, r3, #19
 8006714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006730:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006734:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006738:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006788:	6939      	ldr	r1, [r7, #16]
 800678a:	0148      	lsls	r0, r1, #5
 800678c:	6979      	ldr	r1, [r7, #20]
 800678e:	4401      	add	r1, r0
 8006790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006794:	4313      	orrs	r3, r2
 8006796:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10d      	bne.n	80067ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6919      	ldr	r1, [r3, #16]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	460a      	mov	r2, r1
 80067b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d14a      	bne.n	800689c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800681a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800681e:	f040 8086 	bne.w	800692e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006844:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f242 7210 	movw	r2, #10000	; 0x2710
 8006876:	4293      	cmp	r3, r2
 8006878:	d902      	bls.n	8006880 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
          break;
 800687e:	e056      	b.n	800692e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006898:	d0e7      	beq.n	800686a <USB_EPStopXfer+0x82>
 800689a:	e048      	b.n	800692e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b4:	d13b      	bne.n	800692e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	7812      	ldrb	r2, [r2, #0]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f242 7210 	movw	r2, #10000	; 0x2710
 800690a:	4293      	cmp	r3, r2
 800690c:	d902      	bls.n	8006914 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	75fb      	strb	r3, [r7, #23]
          break;
 8006912:	e00c      	b.n	800692e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692c:	d0e7      	beq.n	80068fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	; 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	460b      	mov	r3, r1
 800694c:	71fb      	strb	r3, [r7, #7]
 800694e:	4613      	mov	r3, r2
 8006950:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800695a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d123      	bne.n	80069aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006962:	88bb      	ldrh	r3, [r7, #4]
 8006964:	3303      	adds	r3, #3
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800696a:	2300      	movs	r3, #0
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e018      	b.n	80069a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	031a      	lsls	r2, r3, #12
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	4413      	add	r3, r2
 8006978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697c:	461a      	mov	r2, r3
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	3301      	adds	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3301      	adds	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	3301      	adds	r3, #1
 800699a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	3301      	adds	r3, #1
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3e2      	bcc.n	8006970 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3724      	adds	r7, #36	; 0x24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b08b      	sub	sp, #44	; 0x2c
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	089b      	lsrs	r3, r3, #2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	e014      	b.n	8006a0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	3301      	adds	r3, #1
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	3301      	adds	r3, #1
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	3301      	adds	r3, #1
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	3301      	adds	r3, #1
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	6a3a      	ldr	r2, [r7, #32]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d3e6      	bcc.n	80069e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a16:	8bfb      	ldrh	r3, [r7, #30]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01e      	beq.n	8006a5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a26:	461a      	mov	r2, r3
 8006a28:	f107 0310 	add.w	r3, r7, #16
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	701a      	strb	r2, [r3, #0]
      i++;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3301      	adds	r3, #1
 8006a46:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a4e:	8bfb      	ldrh	r3, [r7, #30]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a54:	8bfb      	ldrh	r3, [r7, #30]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1ea      	bne.n	8006a30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	372c      	adds	r7, #44	; 0x2c
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d12c      	bne.n	8006ade <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	db12      	blt.n	8006abc <USB_EPSetStall+0x54>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00f      	beq.n	8006abc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e02b      	b.n	8006b36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	db12      	blt.n	8006b16 <USB_EPSetStall+0xae>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d128      	bne.n	8006bb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d003      	beq.n	8006b90 <USB_EPClearStall+0x4c>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	791b      	ldrb	r3, [r3, #4]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d138      	bne.n	8006c02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	e027      	b.n	8006c02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d003      	beq.n	8006be2 <USB_EPClearStall+0x9e>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	791b      	ldrb	r3, [r3, #4]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d10f      	bne.n	8006c02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8a:	f023 0302 	bic.w	r3, r3, #2
 8006c8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cb8:	f023 0303 	bic.w	r3, r3, #3
 8006cbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ccc:	f043 0302 	orr.w	r3, r3, #2
 8006cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	0c1b      	lsrs	r3, r3, #16
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	b29b      	uxth	r3, r3
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	01db      	lsls	r3, r3, #7
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4013      	ands	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006df8:	68bb      	ldr	r3, [r7, #8]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f003 0301 	and.w	r3, r3, #1
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e40:	f023 0307 	bic.w	r3, r3, #7
 8006e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	460b      	mov	r3, r1
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	333c      	adds	r3, #60	; 0x3c
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4a26      	ldr	r2, [pc, #152]	; (8006f20 <USB_EP0_OutStart+0xb8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d90a      	bls.n	8006ea2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9c:	d101      	bne.n	8006ea2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e037      	b.n	8006f12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed0:	f043 0318 	orr.w	r3, r3, #24
 8006ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ee8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10f      	bne.n	8006f10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	4f54300a 	.word	0x4f54300a

08006f24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a13      	ldr	r2, [pc, #76]	; (8006f88 <USB_CoreReset+0x64>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e01b      	b.n	8006f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	daf2      	bge.n	8006f30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f043 0201 	orr.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <USB_CoreReset+0x64>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e006      	b.n	8006f7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d0f0      	beq.n	8006f5a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	00030d40 	.word	0x00030d40

08006f8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f9c:	f005 fa50 	bl	800c440 <USBD_static_malloc>
 8006fa0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32b0      	adds	r2, #176	; 0xb0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e0d4      	b.n	8007166 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fbc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f005 fff0 	bl	800cfa8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32b0      	adds	r2, #176	; 0xb0
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	32b0      	adds	r2, #176	; 0xb0
 8006fe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	7c1b      	ldrb	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d138      	bne.n	8007066 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ff4:	4b5e      	ldr	r3, [pc, #376]	; (8007170 <USBD_CDC_Init+0x1e4>)
 8006ff6:	7819      	ldrb	r1, [r3, #0]
 8006ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f005 f8fb 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007004:	4b5a      	ldr	r3, [pc, #360]	; (8007170 <USBD_CDC_Init+0x1e4>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f003 020f 	and.w	r2, r3, #15
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	3324      	adds	r3, #36	; 0x24
 800701a:	2201      	movs	r2, #1
 800701c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800701e:	4b55      	ldr	r3, [pc, #340]	; (8007174 <USBD_CDC_Init+0x1e8>)
 8007020:	7819      	ldrb	r1, [r3, #0]
 8007022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007026:	2202      	movs	r2, #2
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f005 f8e6 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800702e:	4b51      	ldr	r3, [pc, #324]	; (8007174 <USBD_CDC_Init+0x1e8>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 020f 	and.w	r2, r3, #15
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007046:	2201      	movs	r2, #1
 8007048:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800704a:	4b4b      	ldr	r3, [pc, #300]	; (8007178 <USBD_CDC_Init+0x1ec>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	f003 020f 	and.w	r2, r3, #15
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	440b      	add	r3, r1
 800705e:	3326      	adds	r3, #38	; 0x26
 8007060:	2210      	movs	r2, #16
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e035      	b.n	80070d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007066:	4b42      	ldr	r3, [pc, #264]	; (8007170 <USBD_CDC_Init+0x1e4>)
 8007068:	7819      	ldrb	r1, [r3, #0]
 800706a:	2340      	movs	r3, #64	; 0x40
 800706c:	2202      	movs	r2, #2
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f005 f8c3 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007074:	4b3e      	ldr	r3, [pc, #248]	; (8007170 <USBD_CDC_Init+0x1e4>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f003 020f 	and.w	r2, r3, #15
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	3324      	adds	r3, #36	; 0x24
 800708a:	2201      	movs	r2, #1
 800708c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800708e:	4b39      	ldr	r3, [pc, #228]	; (8007174 <USBD_CDC_Init+0x1e8>)
 8007090:	7819      	ldrb	r1, [r3, #0]
 8007092:	2340      	movs	r3, #64	; 0x40
 8007094:	2202      	movs	r2, #2
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f005 f8af 	bl	800c1fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800709c:	4b35      	ldr	r3, [pc, #212]	; (8007174 <USBD_CDC_Init+0x1e8>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	f003 020f 	and.w	r2, r3, #15
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070b4:	2201      	movs	r2, #1
 80070b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070b8:	4b2f      	ldr	r3, [pc, #188]	; (8007178 <USBD_CDC_Init+0x1ec>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	f003 020f 	and.w	r2, r3, #15
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	3326      	adds	r3, #38	; 0x26
 80070ce:	2210      	movs	r2, #16
 80070d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070d2:	4b29      	ldr	r3, [pc, #164]	; (8007178 <USBD_CDC_Init+0x1ec>)
 80070d4:	7819      	ldrb	r1, [r3, #0]
 80070d6:	2308      	movs	r3, #8
 80070d8:	2203      	movs	r2, #3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f005 f88d 	bl	800c1fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <USBD_CDC_Init+0x1ec>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	f003 020f 	and.w	r2, r3, #15
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	3324      	adds	r3, #36	; 0x24
 80070f6:	2201      	movs	r2, #1
 80070f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	33b0      	adds	r3, #176	; 0xb0
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007130:	2302      	movs	r3, #2
 8007132:	e018      	b.n	8007166 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	7c1b      	ldrb	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800713c:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <USBD_CDC_Init+0x1e8>)
 800713e:	7819      	ldrb	r1, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f005 f944 	bl	800c3d8 <USBD_LL_PrepareReceive>
 8007150:	e008      	b.n	8007164 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007152:	4b08      	ldr	r3, [pc, #32]	; (8007174 <USBD_CDC_Init+0x1e8>)
 8007154:	7819      	ldrb	r1, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f005 f93a 	bl	800c3d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000093 	.word	0x20000093
 8007174:	20000094 	.word	0x20000094
 8007178:	20000095 	.word	0x20000095

0800717c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <USBD_CDC_DeInit+0xf8>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f005 f859 	bl	800c246 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007194:	4b37      	ldr	r3, [pc, #220]	; (8007274 <USBD_CDC_DeInit+0xf8>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	f003 020f 	and.w	r2, r3, #15
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	3324      	adds	r3, #36	; 0x24
 80071aa:	2200      	movs	r2, #0
 80071ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80071ae:	4b32      	ldr	r3, [pc, #200]	; (8007278 <USBD_CDC_DeInit+0xfc>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f005 f846 	bl	800c246 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071ba:	4b2f      	ldr	r3, [pc, #188]	; (8007278 <USBD_CDC_DeInit+0xfc>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 020f 	and.w	r2, r3, #15
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071d2:	2200      	movs	r2, #0
 80071d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071d6:	4b29      	ldr	r3, [pc, #164]	; (800727c <USBD_CDC_DeInit+0x100>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f005 f832 	bl	800c246 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80071e2:	4b26      	ldr	r3, [pc, #152]	; (800727c <USBD_CDC_DeInit+0x100>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 020f 	and.w	r2, r3, #15
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	3324      	adds	r3, #36	; 0x24
 80071f8:	2200      	movs	r2, #0
 80071fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80071fc:	4b1f      	ldr	r3, [pc, #124]	; (800727c <USBD_CDC_DeInit+0x100>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f003 020f 	and.w	r2, r3, #15
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	3326      	adds	r3, #38	; 0x26
 8007212:	2200      	movs	r2, #0
 8007214:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	32b0      	adds	r2, #176	; 0xb0
 8007220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01f      	beq.n	8007268 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	33b0      	adds	r3, #176	; 0xb0
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32b0      	adds	r2, #176	; 0xb0
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	4618      	mov	r0, r3
 800724c:	f005 f906 	bl	800c45c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	32b0      	adds	r2, #176	; 0xb0
 800725a:	2100      	movs	r1, #0
 800725c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000093 	.word	0x20000093
 8007278:	20000094 	.word	0x20000094
 800727c:	20000095 	.word	0x20000095

08007280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	32b0      	adds	r2, #176	; 0xb0
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e0bf      	b.n	8007430 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d050      	beq.n	800735e <USBD_CDC_Setup+0xde>
 80072bc:	2b20      	cmp	r3, #32
 80072be:	f040 80af 	bne.w	8007420 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	88db      	ldrh	r3, [r3, #6]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d03a      	beq.n	8007340 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b25b      	sxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	da1b      	bge.n	800730c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	33b0      	adds	r3, #176	; 0xb0
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80072ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	88d2      	ldrh	r2, [r2, #6]
 80072f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	88db      	ldrh	r3, [r3, #6]
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	bf28      	it	cs
 80072fa:	2307      	movcs	r3, #7
 80072fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	89fa      	ldrh	r2, [r7, #14]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fd89 	bl	8008e1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800730a:	e090      	b.n	800742e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	785a      	ldrb	r2, [r3, #1]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	88db      	ldrh	r3, [r3, #6]
 800731a:	2b3f      	cmp	r3, #63	; 0x3f
 800731c:	d803      	bhi.n	8007326 <USBD_CDC_Setup+0xa6>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	88db      	ldrh	r3, [r3, #6]
 8007322:	b2da      	uxtb	r2, r3
 8007324:	e000      	b.n	8007328 <USBD_CDC_Setup+0xa8>
 8007326:	2240      	movs	r2, #64	; 0x40
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800732e:	6939      	ldr	r1, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007336:	461a      	mov	r2, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fd9b 	bl	8008e74 <USBD_CtlPrepareRx>
      break;
 800733e:	e076      	b.n	800742e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	33b0      	adds	r3, #176	; 0xb0
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	7850      	ldrb	r0, [r2, #1]
 8007356:	2200      	movs	r2, #0
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	4798      	blx	r3
      break;
 800735c:	e067      	b.n	800742e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	2b0b      	cmp	r3, #11
 8007364:	d851      	bhi.n	800740a <USBD_CDC_Setup+0x18a>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBD_CDC_Setup+0xec>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800739d 	.word	0x0800739d
 8007370:	08007419 	.word	0x08007419
 8007374:	0800740b 	.word	0x0800740b
 8007378:	0800740b 	.word	0x0800740b
 800737c:	0800740b 	.word	0x0800740b
 8007380:	0800740b 	.word	0x0800740b
 8007384:	0800740b 	.word	0x0800740b
 8007388:	0800740b 	.word	0x0800740b
 800738c:	0800740b 	.word	0x0800740b
 8007390:	0800740b 	.word	0x0800740b
 8007394:	080073c7 	.word	0x080073c7
 8007398:	080073f1 	.word	0x080073f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d107      	bne.n	80073b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073a8:	f107 030a 	add.w	r3, r7, #10
 80073ac:	2202      	movs	r2, #2
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 fd33 	bl	8008e1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073b6:	e032      	b.n	800741e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fcbd 	bl	8008d3a <USBD_CtlError>
            ret = USBD_FAIL;
 80073c0:	2303      	movs	r3, #3
 80073c2:	75fb      	strb	r3, [r7, #23]
          break;
 80073c4:	e02b      	b.n	800741e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d107      	bne.n	80073e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073d2:	f107 030d 	add.w	r3, r7, #13
 80073d6:	2201      	movs	r2, #1
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fd1e 	bl	8008e1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073e0:	e01d      	b.n	800741e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fca8 	bl	8008d3a <USBD_CtlError>
            ret = USBD_FAIL;
 80073ea:	2303      	movs	r3, #3
 80073ec:	75fb      	strb	r3, [r7, #23]
          break;
 80073ee:	e016      	b.n	800741e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d00f      	beq.n	800741c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fc9b 	bl	8008d3a <USBD_CtlError>
            ret = USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007408:	e008      	b.n	800741c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 fc94 	bl	8008d3a <USBD_CtlError>
          ret = USBD_FAIL;
 8007412:	2303      	movs	r3, #3
 8007414:	75fb      	strb	r3, [r7, #23]
          break;
 8007416:	e002      	b.n	800741e <USBD_CDC_Setup+0x19e>
          break;
 8007418:	bf00      	nop
 800741a:	e008      	b.n	800742e <USBD_CDC_Setup+0x1ae>
          break;
 800741c:	bf00      	nop
      }
      break;
 800741e:	e006      	b.n	800742e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fc89 	bl	8008d3a <USBD_CtlError>
      ret = USBD_FAIL;
 8007428:	2303      	movs	r3, #3
 800742a:	75fb      	strb	r3, [r7, #23]
      break;
 800742c:	bf00      	nop
  }

  return (uint8_t)ret;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800744a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32b0      	adds	r2, #176	; 0xb0
 8007456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800745e:	2303      	movs	r3, #3
 8007460:	e065      	b.n	800752e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	32b0      	adds	r2, #176	; 0xb0
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	3318      	adds	r3, #24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02f      	beq.n	80074ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	f003 020f 	and.w	r2, r3, #15
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	3318      	adds	r3, #24
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	f003 010f 	and.w	r1, r3, #15
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	460b      	mov	r3, r1
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	440b      	add	r3, r1
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4403      	add	r3, r0
 80074b4:	3348      	adds	r3, #72	; 0x48
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d112      	bne.n	80074ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	3318      	adds	r3, #24
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074de:	78f9      	ldrb	r1, [r7, #3]
 80074e0:	2300      	movs	r3, #0
 80074e2:	2200      	movs	r2, #0
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f004 ff56 	bl	800c396 <USBD_LL_Transmit>
 80074ea:	e01f      	b.n	800752c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	33b0      	adds	r3, #176	; 0xb0
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d010      	beq.n	800752c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	33b0      	adds	r3, #176	; 0xb0
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	32b0      	adds	r2, #176	; 0xb0
 800754c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007550:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	32b0      	adds	r2, #176	; 0xb0
 800755c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007564:	2303      	movs	r3, #3
 8007566:	e01a      	b.n	800759e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f004 ff54 	bl	800c41a <USBD_LL_GetRxDataSize>
 8007572:	4602      	mov	r2, r0
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	33b0      	adds	r3, #176	; 0xb0
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007598:	4611      	mov	r1, r2
 800759a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	32b0      	adds	r2, #176	; 0xb0
 80075b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e025      	b.n	8007614 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	33b0      	adds	r3, #176	; 0xb0
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01a      	beq.n	8007612 <USBD_CDC_EP0_RxReady+0x6c>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80075e2:	2bff      	cmp	r3, #255	; 0xff
 80075e4:	d015      	beq.n	8007612 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	33b0      	adds	r3, #176	; 0xb0
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80075fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007606:	b292      	uxth	r2, r2
 8007608:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	22ff      	movs	r2, #255	; 0xff
 800760e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007624:	2182      	movs	r1, #130	; 0x82
 8007626:	4818      	ldr	r0, [pc, #96]	; (8007688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007628:	f000 fd4f 	bl	80080ca <USBD_GetEpDesc>
 800762c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800762e:	2101      	movs	r1, #1
 8007630:	4815      	ldr	r0, [pc, #84]	; (8007688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007632:	f000 fd4a 	bl	80080ca <USBD_GetEpDesc>
 8007636:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007638:	2181      	movs	r1, #129	; 0x81
 800763a:	4813      	ldr	r0, [pc, #76]	; (8007688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800763c:	f000 fd45 	bl	80080ca <USBD_GetEpDesc>
 8007640:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2210      	movs	r2, #16
 800764c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d006      	beq.n	8007662 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2200      	movs	r2, #0
 8007658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765c:	711a      	strb	r2, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d006      	beq.n	8007676 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007670:	711a      	strb	r2, [r3, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2243      	movs	r2, #67	; 0x43
 800767a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800767c:	4b02      	ldr	r3, [pc, #8]	; (8007688 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000050 	.word	0x20000050

0800768c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007694:	2182      	movs	r1, #130	; 0x82
 8007696:	4818      	ldr	r0, [pc, #96]	; (80076f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007698:	f000 fd17 	bl	80080ca <USBD_GetEpDesc>
 800769c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800769e:	2101      	movs	r1, #1
 80076a0:	4815      	ldr	r0, [pc, #84]	; (80076f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076a2:	f000 fd12 	bl	80080ca <USBD_GetEpDesc>
 80076a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076a8:	2181      	movs	r1, #129	; 0x81
 80076aa:	4813      	ldr	r0, [pc, #76]	; (80076f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076ac:	f000 fd0d 	bl	80080ca <USBD_GetEpDesc>
 80076b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2210      	movs	r2, #16
 80076bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d006      	beq.n	80076d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2200      	movs	r2, #0
 80076c8:	711a      	strb	r2, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f042 0202 	orr.w	r2, r2, #2
 80076d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d006      	beq.n	80076e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	711a      	strb	r2, [r3, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f042 0202 	orr.w	r2, r2, #2
 80076e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2243      	movs	r2, #67	; 0x43
 80076ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076ec:	4b02      	ldr	r3, [pc, #8]	; (80076f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000050 	.word	0x20000050

080076fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007704:	2182      	movs	r1, #130	; 0x82
 8007706:	4818      	ldr	r0, [pc, #96]	; (8007768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007708:	f000 fcdf 	bl	80080ca <USBD_GetEpDesc>
 800770c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800770e:	2101      	movs	r1, #1
 8007710:	4815      	ldr	r0, [pc, #84]	; (8007768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007712:	f000 fcda 	bl	80080ca <USBD_GetEpDesc>
 8007716:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007718:	2181      	movs	r1, #129	; 0x81
 800771a:	4813      	ldr	r0, [pc, #76]	; (8007768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800771c:	f000 fcd5 	bl	80080ca <USBD_GetEpDesc>
 8007720:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2210      	movs	r2, #16
 800772c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d006      	beq.n	8007742 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2200      	movs	r2, #0
 8007738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800773c:	711a      	strb	r2, [r3, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d006      	beq.n	8007756 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007750:	711a      	strb	r2, [r3, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2243      	movs	r2, #67	; 0x43
 800775a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000050 	.word	0x20000050

0800776c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	220a      	movs	r2, #10
 8007778:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800777a:	4b03      	ldr	r3, [pc, #12]	; (8007788 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	2000000c 	.word	0x2000000c

0800778c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	e009      	b.n	80077b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	33b0      	adds	r3, #176	; 0xb0
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	32b0      	adds	r2, #176	; 0xb0
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e008      	b.n	80077f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	32b0      	adds	r2, #176	; 0xb0
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	e004      	b.n	8007832 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
	...

08007840 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	32b0      	adds	r2, #176	; 0xb0
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	32b0      	adds	r2, #176	; 0xb0
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	e025      	b.n	80078be <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11f      	bne.n	80078bc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2201      	movs	r2, #1
 8007880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <USBD_CDC_TransmitPacket+0x88>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	f003 020f 	and.w	r2, r3, #15
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4403      	add	r3, r0
 800789e:	3318      	adds	r3, #24
 80078a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80078a2:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <USBD_CDC_TransmitPacket+0x88>)
 80078a4:	7819      	ldrb	r1, [r3, #0]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f004 fd6f 	bl	800c396 <USBD_LL_Transmit>

    ret = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000093 	.word	0x20000093

080078cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32b0      	adds	r2, #176	; 0xb0
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	32b0      	adds	r2, #176	; 0xb0
 80078ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e018      	b.n	800792c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	7c1b      	ldrb	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007902:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <USBD_CDC_ReceivePacket+0x68>)
 8007904:	7819      	ldrb	r1, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800790c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f004 fd61 	bl	800c3d8 <USBD_LL_PrepareReceive>
 8007916:	e008      	b.n	800792a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <USBD_CDC_ReceivePacket+0x68>)
 800791a:	7819      	ldrb	r1, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007922:	2340      	movs	r3, #64	; 0x40
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f004 fd57 	bl	800c3d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000094 	.word	0x20000094

08007938 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	e01f      	b.n	8007990 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	79fa      	ldrb	r2, [r7, #7]
 8007982:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f004 fbd1 	bl	800c12c <USBD_LL_Init>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800798e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e025      	b.n	80079fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	32ae      	adds	r2, #174	; 0xae
 80079c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00f      	beq.n	80079ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	32ae      	adds	r2, #174	; 0xae
 80079d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	f107 020e 	add.w	r2, r7, #14
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
 80079e4:	4602      	mov	r2, r0
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f004 fbd9 	bl	800c1c4 <USBD_LL_Start>
 8007a12:	4603      	mov	r3, r0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d009      	beq.n	8007a60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	4611      	mov	r1, r2
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	4611      	mov	r1, r2
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 f908 	bl	8008cc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ad2:	f003 031f 	and.w	r3, r3, #31
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d01a      	beq.n	8007b10 <USBD_LL_SetupStage+0x72>
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d822      	bhi.n	8007b24 <USBD_LL_SetupStage+0x86>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <USBD_LL_SetupStage+0x4a>
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d00a      	beq.n	8007afc <USBD_LL_SetupStage+0x5e>
 8007ae6:	e01d      	b.n	8007b24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fb5f 	bl	80081b4 <USBD_StdDevReq>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	e020      	b.n	8007b3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbc7 	bl	8008298 <USBD_StdItfReq>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0e:	e016      	b.n	8007b3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fc29 	bl	8008370 <USBD_StdEPReq>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
      break;
 8007b22:	e00c      	b.n	8007b3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f004 fba6 	bl	800c284 <USBD_LL_StallEP>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3c:	bf00      	nop
  }

  return ret;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	460b      	mov	r3, r1
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b5a:	7afb      	ldrb	r3, [r7, #11]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d16e      	bne.n	8007c3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	f040 8098 	bne.w	8007ca4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d913      	bls.n	8007ba8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	bf28      	it	cs
 8007b9a:	4613      	movcs	r3, r2
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f001 f984 	bl	8008eae <USBD_CtlContinueRx>
 8007ba6:	e07d      	b.n	8007ca4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d014      	beq.n	8007be0 <USBD_LL_DataOutStage+0x98>
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d81d      	bhi.n	8007bf6 <USBD_LL_DataOutStage+0xae>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <USBD_LL_DataOutStage+0x7c>
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d003      	beq.n	8007bca <USBD_LL_DataOutStage+0x82>
 8007bc2:	e018      	b.n	8007bf6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75bb      	strb	r3, [r7, #22]
            break;
 8007bc8:	e018      	b.n	8007bfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fa5e 	bl	8008096 <USBD_CoreFindIF>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75bb      	strb	r3, [r7, #22]
            break;
 8007bde:	e00d      	b.n	8007bfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	4619      	mov	r1, r3
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fa60 	bl	80080b0 <USBD_CoreFindEP>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75bb      	strb	r3, [r7, #22]
            break;
 8007bf4:	e002      	b.n	8007bfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75bb      	strb	r3, [r7, #22]
            break;
 8007bfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007bfc:	7dbb      	ldrb	r3, [r7, #22]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d119      	bne.n	8007c36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d113      	bne.n	8007c36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c0e:	7dba      	ldrb	r2, [r7, #22]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	32ae      	adds	r2, #174	; 0xae
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c1e:	7dba      	ldrb	r2, [r7, #22]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c26:	7dba      	ldrb	r2, [r7, #22]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	32ae      	adds	r2, #174	; 0xae
 8007c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f001 f94a 	bl	8008ed0 <USBD_CtlSendStatus>
 8007c3c:	e032      	b.n	8007ca4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fa31 	bl	80080b0 <USBD_CoreFindEP>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c52:	7dbb      	ldrb	r3, [r7, #22]
 8007c54:	2bff      	cmp	r3, #255	; 0xff
 8007c56:	d025      	beq.n	8007ca4 <USBD_LL_DataOutStage+0x15c>
 8007c58:	7dbb      	ldrb	r3, [r7, #22]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d122      	bne.n	8007ca4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d117      	bne.n	8007c9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c6a:	7dba      	ldrb	r2, [r7, #22]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	32ae      	adds	r2, #174	; 0xae
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00f      	beq.n	8007c9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c7a:	7dba      	ldrb	r2, [r7, #22]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c82:	7dba      	ldrb	r2, [r7, #22]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	32ae      	adds	r2, #174	; 0xae
 8007c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	7afa      	ldrb	r2, [r7, #11]
 8007c90:	4611      	mov	r1, r2
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	e000      	b.n	8007ca6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d16f      	bne.n	8007da2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d15a      	bne.n	8007d88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d914      	bls.n	8007d08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	689a      	ldr	r2, [r3, #8]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	1ad2      	subs	r2, r2, r3
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f001 f8ac 	bl	8008e52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f004 fb69 	bl	800c3d8 <USBD_LL_PrepareReceive>
 8007d06:	e03f      	b.n	8007d88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d11c      	bne.n	8007d4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d316      	bcc.n	8007d4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d20f      	bcs.n	8007d4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f001 f88d 	bl	8008e52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d40:	2300      	movs	r3, #0
 8007d42:	2200      	movs	r2, #0
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f004 fb46 	bl	800c3d8 <USBD_LL_PrepareReceive>
 8007d4c:	e01c      	b.n	8007d88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d10f      	bne.n	8007d7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d7a:	2180      	movs	r1, #128	; 0x80
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f004 fa81 	bl	800c284 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f001 f8b7 	bl	8008ef6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d03a      	beq.n	8007e08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fe42 	bl	8007a1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007da0:	e032      	b.n	8007e08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f97f 	bl	80080b0 <USBD_CoreFindEP>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	2bff      	cmp	r3, #255	; 0xff
 8007dba:	d025      	beq.n	8007e08 <USBD_LL_DataInStage+0x15a>
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d122      	bne.n	8007e08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d11c      	bne.n	8007e08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007dce:	7dfa      	ldrb	r2, [r7, #23]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	32ae      	adds	r2, #174	; 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d014      	beq.n	8007e08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007dde:	7dfa      	ldrb	r2, [r7, #23]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007de6:	7dfa      	ldrb	r2, [r7, #23]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	32ae      	adds	r2, #174	; 0xae
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	7afa      	ldrb	r2, [r7, #11]
 8007df4:	4611      	mov	r1, r2
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	4798      	blx	r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007dfe:	7dbb      	ldrb	r3, [r7, #22]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e04:	7dbb      	ldrb	r3, [r7, #22]
 8007e06:	e000      	b.n	8007e0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d014      	beq.n	8007e78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00e      	beq.n	8007e78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6852      	ldr	r2, [r2, #4]
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	4611      	mov	r1, r2
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e78:	2340      	movs	r3, #64	; 0x40
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f004 f9bb 	bl	800c1fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2240      	movs	r2, #64	; 0x40
 8007e90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	2200      	movs	r2, #0
 8007e98:	2180      	movs	r1, #128	; 0x80
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f004 f9ad 	bl	800c1fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2240      	movs	r2, #64	; 0x40
 8007eaa:	621a      	str	r2, [r3, #32]

  return ret;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	78fa      	ldrb	r2, [r7, #3]
 8007ec6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2204      	movs	r2, #4
 8007ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	d106      	bne.n	8007f24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d110      	bne.n	8007f68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	32ae      	adds	r2, #174	; 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e01c      	b.n	8007fce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d115      	bne.n	8007fcc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32ae      	adds	r2, #174	; 0xae
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	32ae      	adds	r2, #174	; 0xae
 8007fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	32ae      	adds	r2, #174	; 0xae
 8007fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e01c      	b.n	8008032 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b03      	cmp	r3, #3
 8008002:	d115      	bne.n	8008030 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	32ae      	adds	r2, #174	; 0xae
 800800e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	32ae      	adds	r2, #174	; 0xae
 8008022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	4611      	mov	r1, r2
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00e      	beq.n	800808c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6852      	ldr	r2, [r2, #4]
 800807a:	b2d2      	uxtb	r2, r2
 800807c:	4611      	mov	r1, r2
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008088:	2303      	movs	r3, #3
 800808a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b086      	sub	sp, #24
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d920      	bls.n	8008134 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80080fa:	e013      	b.n	8008124 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80080fc:	f107 030a 	add.w	r3, r7, #10
 8008100:	4619      	mov	r1, r3
 8008102:	6978      	ldr	r0, [r7, #20]
 8008104:	f000 f81b 	bl	800813e <USBD_GetNextDesc>
 8008108:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	2b05      	cmp	r3, #5
 8008110:	d108      	bne.n	8008124 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	789b      	ldrb	r3, [r3, #2]
 800811a:	78fa      	ldrb	r2, [r7, #3]
 800811c:	429a      	cmp	r2, r3
 800811e:	d008      	beq.n	8008132 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008120:	2300      	movs	r3, #0
 8008122:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	885b      	ldrh	r3, [r3, #2]
 8008128:	b29a      	uxth	r2, r3
 800812a:	897b      	ldrh	r3, [r7, #10]
 800812c:	429a      	cmp	r2, r3
 800812e:	d8e5      	bhi.n	80080fc <USBD_GetEpDesc+0x32>
 8008130:	e000      	b.n	8008134 <USBD_GetEpDesc+0x6a>
          break;
 8008132:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008134:	693b      	ldr	r3, [r7, #16]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	881a      	ldrh	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b29b      	uxth	r3, r3
 8008156:	4413      	add	r3, r2
 8008158:	b29a      	uxth	r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4413      	add	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800816a:	68fb      	ldr	r3, [r7, #12]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3301      	adds	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008196:	8a3b      	ldrh	r3, [r7, #16]
 8008198:	021b      	lsls	r3, r3, #8
 800819a:	b21a      	sxth	r2, r3
 800819c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	b21b      	sxth	r3, r3
 80081a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081a6:	89fb      	ldrh	r3, [r7, #14]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d005      	beq.n	80081da <USBD_StdDevReq+0x26>
 80081ce:	2b40      	cmp	r3, #64	; 0x40
 80081d0:	d857      	bhi.n	8008282 <USBD_StdDevReq+0xce>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00f      	beq.n	80081f6 <USBD_StdDevReq+0x42>
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	d153      	bne.n	8008282 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	32ae      	adds	r2, #174	; 0xae
 80081e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]
      break;
 80081f4:	e04a      	b.n	800828c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d83b      	bhi.n	8008276 <USBD_StdDevReq+0xc2>
 80081fe:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <USBD_StdDevReq+0x50>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	08008259 	.word	0x08008259
 8008208:	0800826d 	.word	0x0800826d
 800820c:	08008277 	.word	0x08008277
 8008210:	08008263 	.word	0x08008263
 8008214:	08008277 	.word	0x08008277
 8008218:	08008237 	.word	0x08008237
 800821c:	0800822d 	.word	0x0800822d
 8008220:	08008277 	.word	0x08008277
 8008224:	0800824f 	.word	0x0800824f
 8008228:	08008241 	.word	0x08008241
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa3c 	bl	80086ac <USBD_GetDescriptor>
          break;
 8008234:	e024      	b.n	8008280 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fba1 	bl	8008980 <USBD_SetAddress>
          break;
 800823e:	e01f      	b.n	8008280 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fbe0 	bl	8008a08 <USBD_SetConfig>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]
          break;
 800824c:	e018      	b.n	8008280 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fc83 	bl	8008b5c <USBD_GetConfig>
          break;
 8008256:	e013      	b.n	8008280 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fcb4 	bl	8008bc8 <USBD_GetStatus>
          break;
 8008260:	e00e      	b.n	8008280 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fce3 	bl	8008c30 <USBD_SetFeature>
          break;
 800826a:	e009      	b.n	8008280 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fd07 	bl	8008c82 <USBD_ClrFeature>
          break;
 8008274:	e004      	b.n	8008280 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fd5e 	bl	8008d3a <USBD_CtlError>
          break;
 800827e:	bf00      	nop
      }
      break;
 8008280:	e004      	b.n	800828c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fd58 	bl	8008d3a <USBD_CtlError>
      break;
 800828a:	bf00      	nop
  }

  return ret;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop

08008298 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	d005      	beq.n	80082be <USBD_StdItfReq+0x26>
 80082b2:	2b40      	cmp	r3, #64	; 0x40
 80082b4:	d852      	bhi.n	800835c <USBD_StdItfReq+0xc4>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <USBD_StdItfReq+0x26>
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d14e      	bne.n	800835c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d840      	bhi.n	800834e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	889b      	ldrh	r3, [r3, #4]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d836      	bhi.n	8008344 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	889b      	ldrh	r3, [r3, #4]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff fed9 	bl	8008096 <USBD_CoreFindIF>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	2bff      	cmp	r3, #255	; 0xff
 80082ec:	d01d      	beq.n	800832a <USBD_StdItfReq+0x92>
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11a      	bne.n	800832a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80082f4:	7bba      	ldrb	r2, [r7, #14]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	32ae      	adds	r2, #174	; 0xae
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00f      	beq.n	8008324 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008304:	7bba      	ldrb	r2, [r7, #14]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800830c:	7bba      	ldrb	r2, [r7, #14]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32ae      	adds	r2, #174	; 0xae
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008322:	e004      	b.n	800832e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008328:	e001      	b.n	800832e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800832a:	2303      	movs	r3, #3
 800832c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	88db      	ldrh	r3, [r3, #6]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d110      	bne.n	8008358 <USBD_StdItfReq+0xc0>
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10d      	bne.n	8008358 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fdc7 	bl	8008ed0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008342:	e009      	b.n	8008358 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fcf7 	bl	8008d3a <USBD_CtlError>
          break;
 800834c:	e004      	b.n	8008358 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fcf2 	bl	8008d3a <USBD_CtlError>
          break;
 8008356:	e000      	b.n	800835a <USBD_StdItfReq+0xc2>
          break;
 8008358:	bf00      	nop
      }
      break;
 800835a:	e004      	b.n	8008366 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fceb 	bl	8008d3a <USBD_CtlError>
      break;
 8008364:	bf00      	nop
  }

  return ret;
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	889b      	ldrh	r3, [r3, #4]
 8008382:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d007      	beq.n	80083a0 <USBD_StdEPReq+0x30>
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	f200 817f 	bhi.w	8008694 <USBD_StdEPReq+0x324>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d02a      	beq.n	80083f0 <USBD_StdEPReq+0x80>
 800839a:	2b20      	cmp	r3, #32
 800839c:	f040 817a 	bne.w	8008694 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff fe83 	bl	80080b0 <USBD_CoreFindEP>
 80083aa:	4603      	mov	r3, r0
 80083ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083ae:	7b7b      	ldrb	r3, [r7, #13]
 80083b0:	2bff      	cmp	r3, #255	; 0xff
 80083b2:	f000 8174 	beq.w	800869e <USBD_StdEPReq+0x32e>
 80083b6:	7b7b      	ldrb	r3, [r7, #13]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f040 8170 	bne.w	800869e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80083be:	7b7a      	ldrb	r2, [r7, #13]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083c6:	7b7a      	ldrb	r2, [r7, #13]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	32ae      	adds	r2, #174	; 0xae
 80083cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8163 	beq.w	800869e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083d8:	7b7a      	ldrb	r2, [r7, #13]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32ae      	adds	r2, #174	; 0xae
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083ee:	e156      	b.n	800869e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d008      	beq.n	800840a <USBD_StdEPReq+0x9a>
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	f300 8145 	bgt.w	8008688 <USBD_StdEPReq+0x318>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 809b 	beq.w	800853a <USBD_StdEPReq+0x1ca>
 8008404:	2b01      	cmp	r3, #1
 8008406:	d03c      	beq.n	8008482 <USBD_StdEPReq+0x112>
 8008408:	e13e      	b.n	8008688 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d002      	beq.n	800841c <USBD_StdEPReq+0xac>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d016      	beq.n	8008448 <USBD_StdEPReq+0xd8>
 800841a:	e02c      	b.n	8008476 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <USBD_StdEPReq+0xce>
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d00a      	beq.n	800843e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f003 ff29 	bl	800c284 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008432:	2180      	movs	r1, #128	; 0x80
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f003 ff25 	bl	800c284 <USBD_LL_StallEP>
 800843a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800843c:	e020      	b.n	8008480 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fc7a 	bl	8008d3a <USBD_CtlError>
              break;
 8008446:	e01b      	b.n	8008480 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	885b      	ldrh	r3, [r3, #2]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10e      	bne.n	800846e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <USBD_StdEPReq+0xfe>
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	d008      	beq.n	800846e <USBD_StdEPReq+0xfe>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	88db      	ldrh	r3, [r3, #6]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d104      	bne.n	800846e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f003 ff0b 	bl	800c284 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fd2e 	bl	8008ed0 <USBD_CtlSendStatus>

              break;
 8008474:	e004      	b.n	8008480 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc5e 	bl	8008d3a <USBD_CtlError>
              break;
 800847e:	bf00      	nop
          }
          break;
 8008480:	e107      	b.n	8008692 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d002      	beq.n	8008494 <USBD_StdEPReq+0x124>
 800848e:	2b03      	cmp	r3, #3
 8008490:	d016      	beq.n	80084c0 <USBD_StdEPReq+0x150>
 8008492:	e04b      	b.n	800852c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <USBD_StdEPReq+0x146>
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b80      	cmp	r3, #128	; 0x80
 800849e:	d00a      	beq.n	80084b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f003 feed 	bl	800c284 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084aa:	2180      	movs	r1, #128	; 0x80
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f003 fee9 	bl	800c284 <USBD_LL_StallEP>
 80084b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084b4:	e040      	b.n	8008538 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fc3e 	bl	8008d3a <USBD_CtlError>
              break;
 80084be:	e03b      	b.n	8008538 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	885b      	ldrh	r3, [r3, #2]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d136      	bne.n	8008536 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f003 fef3 	bl	800c2c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fcf7 	bl	8008ed0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff fde2 	bl	80080b0 <USBD_CoreFindEP>
 80084ec:	4603      	mov	r3, r0
 80084ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084f0:	7b7b      	ldrb	r3, [r7, #13]
 80084f2:	2bff      	cmp	r3, #255	; 0xff
 80084f4:	d01f      	beq.n	8008536 <USBD_StdEPReq+0x1c6>
 80084f6:	7b7b      	ldrb	r3, [r7, #13]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d11c      	bne.n	8008536 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084fc:	7b7a      	ldrb	r2, [r7, #13]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008504:	7b7a      	ldrb	r2, [r7, #13]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	32ae      	adds	r2, #174	; 0xae
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d010      	beq.n	8008536 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008514:	7b7a      	ldrb	r2, [r7, #13]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	32ae      	adds	r2, #174	; 0xae
 800851a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800852a:	e004      	b.n	8008536 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fc03 	bl	8008d3a <USBD_CtlError>
              break;
 8008534:	e000      	b.n	8008538 <USBD_StdEPReq+0x1c8>
              break;
 8008536:	bf00      	nop
          }
          break;
 8008538:	e0ab      	b.n	8008692 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d002      	beq.n	800854c <USBD_StdEPReq+0x1dc>
 8008546:	2b03      	cmp	r3, #3
 8008548:	d032      	beq.n	80085b0 <USBD_StdEPReq+0x240>
 800854a:	e097      	b.n	800867c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <USBD_StdEPReq+0x1f2>
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b80      	cmp	r3, #128	; 0x80
 8008556:	d004      	beq.n	8008562 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fbed 	bl	8008d3a <USBD_CtlError>
                break;
 8008560:	e091      	b.n	8008686 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008566:	2b00      	cmp	r3, #0
 8008568:	da0b      	bge.n	8008582 <USBD_StdEPReq+0x212>
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	3310      	adds	r3, #16
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	3304      	adds	r3, #4
 8008580:	e00b      	b.n	800859a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4413      	add	r3, r2
 8008598:	3304      	adds	r3, #4
 800859a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2202      	movs	r2, #2
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fc37 	bl	8008e1c <USBD_CtlSendData>
              break;
 80085ae:	e06a      	b.n	8008686 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	da11      	bge.n	80085dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	f003 020f 	and.w	r2, r3, #15
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	440b      	add	r3, r1
 80085ca:	3324      	adds	r3, #36	; 0x24
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d117      	bne.n	8008602 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fbb0 	bl	8008d3a <USBD_CtlError>
                  break;
 80085da:	e054      	b.n	8008686 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	f003 020f 	and.w	r2, r3, #15
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d104      	bne.n	8008602 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fb9d 	bl	8008d3a <USBD_CtlError>
                  break;
 8008600:	e041      	b.n	8008686 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	da0b      	bge.n	8008622 <USBD_StdEPReq+0x2b2>
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	3310      	adds	r3, #16
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	3304      	adds	r3, #4
 8008620:	e00b      	b.n	800863a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	4413      	add	r3, r2
 8008638:	3304      	adds	r3, #4
 800863a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <USBD_StdEPReq+0x2d8>
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b80      	cmp	r3, #128	; 0x80
 8008646:	d103      	bne.n	8008650 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e00e      	b.n	800866e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f003 fe53 	bl	800c300 <USBD_LL_IsStallEP>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2201      	movs	r2, #1
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	e002      	b.n	800866e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2202      	movs	r2, #2
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fbd1 	bl	8008e1c <USBD_CtlSendData>
              break;
 800867a:	e004      	b.n	8008686 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fb5b 	bl	8008d3a <USBD_CtlError>
              break;
 8008684:	bf00      	nop
          }
          break;
 8008686:	e004      	b.n	8008692 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb55 	bl	8008d3a <USBD_CtlError>
          break;
 8008690:	bf00      	nop
      }
      break;
 8008692:	e005      	b.n	80086a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb4f 	bl	8008d3a <USBD_CtlError>
      break;
 800869c:	e000      	b.n	80086a0 <USBD_StdEPReq+0x330>
      break;
 800869e:	bf00      	nop
  }

  return ret;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	885b      	ldrh	r3, [r3, #2]
 80086c6:	0a1b      	lsrs	r3, r3, #8
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	2b06      	cmp	r3, #6
 80086ce:	f200 8128 	bhi.w	8008922 <USBD_GetDescriptor+0x276>
 80086d2:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <USBD_GetDescriptor+0x2c>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	080086f5 	.word	0x080086f5
 80086dc:	0800870d 	.word	0x0800870d
 80086e0:	0800874d 	.word	0x0800874d
 80086e4:	08008923 	.word	0x08008923
 80086e8:	08008923 	.word	0x08008923
 80086ec:	080088c3 	.word	0x080088c3
 80086f0:	080088ef 	.word	0x080088ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	7c12      	ldrb	r2, [r2, #16]
 8008700:	f107 0108 	add.w	r1, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
      break;
 800870a:	e112      	b.n	8008932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7c1b      	ldrb	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10d      	bne.n	8008730 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	f107 0208 	add.w	r2, r7, #8
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3301      	adds	r3, #1
 800872a:	2202      	movs	r2, #2
 800872c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800872e:	e100      	b.n	8008932 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	f107 0208 	add.w	r2, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	2202      	movs	r2, #2
 8008748:	701a      	strb	r2, [r3, #0]
      break;
 800874a:	e0f2      	b.n	8008932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	885b      	ldrh	r3, [r3, #2]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b05      	cmp	r3, #5
 8008754:	f200 80ac 	bhi.w	80088b0 <USBD_GetDescriptor+0x204>
 8008758:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <USBD_GetDescriptor+0xb4>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	08008779 	.word	0x08008779
 8008764:	080087ad 	.word	0x080087ad
 8008768:	080087e1 	.word	0x080087e1
 800876c:	08008815 	.word	0x08008815
 8008770:	08008849 	.word	0x08008849
 8008774:	0800887d 	.word	0x0800887d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	7c12      	ldrb	r2, [r2, #16]
 8008790:	f107 0108 	add.w	r1, r7, #8
 8008794:	4610      	mov	r0, r2
 8008796:	4798      	blx	r3
 8008798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800879a:	e091      	b.n	80088c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 facb 	bl	8008d3a <USBD_CtlError>
            err++;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	3301      	adds	r3, #1
 80087a8:	72fb      	strb	r3, [r7, #11]
          break;
 80087aa:	e089      	b.n	80088c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	7c12      	ldrb	r2, [r2, #16]
 80087c4:	f107 0108 	add.w	r1, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ce:	e077      	b.n	80088c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fab1 	bl	8008d3a <USBD_CtlError>
            err++;
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	3301      	adds	r3, #1
 80087dc:	72fb      	strb	r3, [r7, #11]
          break;
 80087de:	e06f      	b.n	80088c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7c12      	ldrb	r2, [r2, #16]
 80087f8:	f107 0108 	add.w	r1, r7, #8
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008802:	e05d      	b.n	80088c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa97 	bl	8008d3a <USBD_CtlError>
            err++;
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	3301      	adds	r3, #1
 8008810:	72fb      	strb	r3, [r7, #11]
          break;
 8008812:	e055      	b.n	80088c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	7c12      	ldrb	r2, [r2, #16]
 800882c:	f107 0108 	add.w	r1, r7, #8
 8008830:	4610      	mov	r0, r2
 8008832:	4798      	blx	r3
 8008834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008836:	e043      	b.n	80088c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fa7d 	bl	8008d3a <USBD_CtlError>
            err++;
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	3301      	adds	r3, #1
 8008844:	72fb      	strb	r3, [r7, #11]
          break;
 8008846:	e03b      	b.n	80088c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	7c12      	ldrb	r2, [r2, #16]
 8008860:	f107 0108 	add.w	r1, r7, #8
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800886a:	e029      	b.n	80088c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa63 	bl	8008d3a <USBD_CtlError>
            err++;
 8008874:	7afb      	ldrb	r3, [r7, #11]
 8008876:	3301      	adds	r3, #1
 8008878:	72fb      	strb	r3, [r7, #11]
          break;
 800887a:	e021      	b.n	80088c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	7c12      	ldrb	r2, [r2, #16]
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800889e:	e00f      	b.n	80088c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa49 	bl	8008d3a <USBD_CtlError>
            err++;
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	3301      	adds	r3, #1
 80088ac:	72fb      	strb	r3, [r7, #11]
          break;
 80088ae:	e007      	b.n	80088c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa41 	bl	8008d3a <USBD_CtlError>
          err++;
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	3301      	adds	r3, #1
 80088bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088be:	bf00      	nop
      }
      break;
 80088c0:	e037      	b.n	8008932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7c1b      	ldrb	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d109      	bne.n	80088de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	f107 0208 	add.w	r2, r7, #8
 80088d6:	4610      	mov	r0, r2
 80088d8:	4798      	blx	r3
 80088da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088dc:	e029      	b.n	8008932 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fa2a 	bl	8008d3a <USBD_CtlError>
        err++;
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	3301      	adds	r3, #1
 80088ea:	72fb      	strb	r3, [r7, #11]
      break;
 80088ec:	e021      	b.n	8008932 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7c1b      	ldrb	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10d      	bne.n	8008912 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	f107 0208 	add.w	r2, r7, #8
 8008902:	4610      	mov	r0, r2
 8008904:	4798      	blx	r3
 8008906:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	3301      	adds	r3, #1
 800890c:	2207      	movs	r2, #7
 800890e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008910:	e00f      	b.n	8008932 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fa10 	bl	8008d3a <USBD_CtlError>
        err++;
 800891a:	7afb      	ldrb	r3, [r7, #11]
 800891c:	3301      	adds	r3, #1
 800891e:	72fb      	strb	r3, [r7, #11]
      break;
 8008920:	e007      	b.n	8008932 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fa08 	bl	8008d3a <USBD_CtlError>
      err++;
 800892a:	7afb      	ldrb	r3, [r7, #11]
 800892c:	3301      	adds	r3, #1
 800892e:	72fb      	strb	r3, [r7, #11]
      break;
 8008930:	bf00      	nop
  }

  if (err != 0U)
 8008932:	7afb      	ldrb	r3, [r7, #11]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d11e      	bne.n	8008976 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	88db      	ldrh	r3, [r3, #6]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d016      	beq.n	800896e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008940:	893b      	ldrh	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00e      	beq.n	8008964 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	88da      	ldrh	r2, [r3, #6]
 800894a:	893b      	ldrh	r3, [r7, #8]
 800894c:	4293      	cmp	r3, r2
 800894e:	bf28      	it	cs
 8008950:	4613      	movcs	r3, r2
 8008952:	b29b      	uxth	r3, r3
 8008954:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008956:	893b      	ldrh	r3, [r7, #8]
 8008958:	461a      	mov	r2, r3
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fa5d 	bl	8008e1c <USBD_CtlSendData>
 8008962:	e009      	b.n	8008978 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f9e7 	bl	8008d3a <USBD_CtlError>
 800896c:	e004      	b.n	8008978 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 faae 	bl	8008ed0 <USBD_CtlSendStatus>
 8008974:	e000      	b.n	8008978 <USBD_GetDescriptor+0x2cc>
    return;
 8008976:	bf00      	nop
  }
}
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop

08008980 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	889b      	ldrh	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d131      	bne.n	80089f6 <USBD_SetAddress+0x76>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	88db      	ldrh	r3, [r3, #6]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d12d      	bne.n	80089f6 <USBD_SetAddress+0x76>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	885b      	ldrh	r3, [r3, #2]
 800899e:	2b7f      	cmp	r3, #127	; 0x7f
 80089a0:	d829      	bhi.n	80089f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	885b      	ldrh	r3, [r3, #2]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d104      	bne.n	80089c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f9bc 	bl	8008d3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c2:	e01d      	b.n	8008a00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	7bfa      	ldrb	r2, [r7, #15]
 80089c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f003 fcc1 	bl	800c358 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa7a 	bl	8008ed0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ea:	e009      	b.n	8008a00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f4:	e004      	b.n	8008a00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f99e 	bl	8008d3a <USBD_CtlError>
  }
}
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	4b4e      	ldr	r3, [pc, #312]	; (8008b58 <USBD_SetConfig+0x150>)
 8008a1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a20:	4b4d      	ldr	r3, [pc, #308]	; (8008b58 <USBD_SetConfig+0x150>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d905      	bls.n	8008a34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f985 	bl	8008d3a <USBD_CtlError>
    return USBD_FAIL;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e08c      	b.n	8008b4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d002      	beq.n	8008a46 <USBD_SetConfig+0x3e>
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d029      	beq.n	8008a98 <USBD_SetConfig+0x90>
 8008a44:	e075      	b.n	8008b32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a46:	4b44      	ldr	r3, [pc, #272]	; (8008b58 <USBD_SetConfig+0x150>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d020      	beq.n	8008a90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a4e:	4b42      	ldr	r3, [pc, #264]	; (8008b58 <USBD_SetConfig+0x150>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a58:	4b3f      	ldr	r3, [pc, #252]	; (8008b58 <USBD_SetConfig+0x150>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fe ffe7 	bl	8007a32 <USBD_SetClassConfig>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d008      	beq.n	8008a80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f962 	bl	8008d3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a7e:	e065      	b.n	8008b4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fa25 	bl	8008ed0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a8e:	e05d      	b.n	8008b4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fa1d 	bl	8008ed0 <USBD_CtlSendStatus>
      break;
 8008a96:	e059      	b.n	8008b4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a98:	4b2f      	ldr	r3, [pc, #188]	; (8008b58 <USBD_SetConfig+0x150>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d112      	bne.n	8008ac6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008aa8:	4b2b      	ldr	r3, [pc, #172]	; (8008b58 <USBD_SetConfig+0x150>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ab2:	4b29      	ldr	r3, [pc, #164]	; (8008b58 <USBD_SetConfig+0x150>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7fe ffd6 	bl	8007a6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa06 	bl	8008ed0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ac4:	e042      	b.n	8008b4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ac6:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <USBD_SetConfig+0x150>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d02a      	beq.n	8008b2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fe ffc4 	bl	8007a6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ae2:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <USBD_SetConfig+0x150>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <USBD_SetConfig+0x150>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fe ff9d 	bl	8007a32 <USBD_SetClassConfig>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00f      	beq.n	8008b22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f918 	bl	8008d3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7fe ffa9 	bl	8007a6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b20:	e014      	b.n	8008b4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9d4 	bl	8008ed0 <USBD_CtlSendStatus>
      break;
 8008b28:	e010      	b.n	8008b4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f9d0 	bl	8008ed0 <USBD_CtlSendStatus>
      break;
 8008b30:	e00c      	b.n	8008b4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f900 	bl	8008d3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b3a:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <USBD_SetConfig+0x150>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7fe ff92 	bl	8007a6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b46:	2303      	movs	r3, #3
 8008b48:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4a:	bf00      	nop
  }

  return ret;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200002c8 	.word	0x200002c8

08008b5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	88db      	ldrh	r3, [r3, #6]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d004      	beq.n	8008b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f8e2 	bl	8008d3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b76:	e023      	b.n	8008bc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	dc02      	bgt.n	8008b8a <USBD_GetConfig+0x2e>
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dc03      	bgt.n	8008b90 <USBD_GetConfig+0x34>
 8008b88:	e015      	b.n	8008bb6 <USBD_GetConfig+0x5a>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d00b      	beq.n	8008ba6 <USBD_GetConfig+0x4a>
 8008b8e:	e012      	b.n	8008bb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f93c 	bl	8008e1c <USBD_CtlSendData>
        break;
 8008ba4:	e00c      	b.n	8008bc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	2201      	movs	r2, #1
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f934 	bl	8008e1c <USBD_CtlSendData>
        break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f8be 	bl	8008d3a <USBD_CtlError>
        break;
 8008bbe:	bf00      	nop
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d81e      	bhi.n	8008c1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	88db      	ldrh	r3, [r3, #6]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d004      	beq.n	8008bf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f8a5 	bl	8008d3a <USBD_CtlError>
        break;
 8008bf0:	e01a      	b.n	8008c28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d005      	beq.n	8008c0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f043 0202 	orr.w	r2, r3, #2
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	330c      	adds	r3, #12
 8008c12:	2202      	movs	r2, #2
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f900 	bl	8008e1c <USBD_CtlSendData>
      break;
 8008c1c:	e004      	b.n	8008c28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f88a 	bl	8008d3a <USBD_CtlError>
      break;
 8008c26:	bf00      	nop
  }
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d107      	bne.n	8008c52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f940 	bl	8008ed0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c50:	e013      	b.n	8008c7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	885b      	ldrh	r3, [r3, #2]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d10b      	bne.n	8008c72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	889b      	ldrh	r3, [r3, #4]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f930 	bl	8008ed0 <USBD_CtlSendStatus>
}
 8008c70:	e003      	b.n	8008c7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f860 	bl	8008d3a <USBD_CtlError>
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d80b      	bhi.n	8008cb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	885b      	ldrh	r3, [r3, #2]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d10c      	bne.n	8008cbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f910 	bl	8008ed0 <USBD_CtlSendStatus>
      }
      break;
 8008cb0:	e004      	b.n	8008cbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f840 	bl	8008d3a <USBD_CtlError>
      break;
 8008cba:	e000      	b.n	8008cbe <USBD_ClrFeature+0x3c>
      break;
 8008cbc:	bf00      	nop
  }
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	781a      	ldrb	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff fa41 	bl	8008178 <SWAPBYTE>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3301      	adds	r3, #1
 8008d02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff fa34 	bl	8008178 <SWAPBYTE>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fa27 	bl	8008178 <SWAPBYTE>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	80da      	strh	r2, [r3, #6]
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f003 fa9c 	bl	800c284 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 fa98 	bl	800c284 <USBD_LL_StallEP>
}
 8008d54:	bf00      	nop
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d036      	beq.n	8008de0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d76:	6938      	ldr	r0, [r7, #16]
 8008d78:	f000 f836 	bl	8008de8 <USBD_GetLen>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	4413      	add	r3, r2
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	7812      	ldrb	r2, [r2, #0]
 8008d94:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	2203      	movs	r2, #3
 8008da4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	3301      	adds	r3, #1
 8008daa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008dac:	e013      	b.n	8008dd6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	4413      	add	r3, r2
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	613b      	str	r3, [r7, #16]
    idx++;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	4413      	add	r3, r2
 8008dcc:	2200      	movs	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
    idx++;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e7      	bne.n	8008dae <USBD_GetString+0x52>
 8008dde:	e000      	b.n	8008de2 <USBD_GetString+0x86>
    return;
 8008de0:	bf00      	nop
  }
}
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008df8:	e005      	b.n	8008e06 <USBD_GetLen+0x1e>
  {
    len++;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	3301      	adds	r3, #1
 8008e04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f5      	bne.n	8008dfa <USBD_GetLen+0x12>
  }

  return len;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	2100      	movs	r1, #0
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f003 faa7 	bl	800c396 <USBD_LL_Transmit>

  return USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	2100      	movs	r1, #0
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f003 fa96 	bl	800c396 <USBD_LL_Transmit>

  return USBD_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2203      	movs	r2, #3
 8008e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f003 fa9a 	bl	800c3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f003 fa89 	bl	800c3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2204      	movs	r2, #4
 8008edc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f003 fa55 	bl	800c396 <USBD_LL_Transmit>

  return USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2205      	movs	r2, #5
 8008f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f06:	2300      	movs	r3, #0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f003 fa63 	bl	800c3d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <__NVIC_SetPriority>:
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	6039      	str	r1, [r7, #0]
 8008f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	db0a      	blt.n	8008f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	490c      	ldr	r1, [pc, #48]	; (8008f68 <__NVIC_SetPriority+0x4c>)
 8008f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f3a:	0112      	lsls	r2, r2, #4
 8008f3c:	b2d2      	uxtb	r2, r2
 8008f3e:	440b      	add	r3, r1
 8008f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f44:	e00a      	b.n	8008f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	4908      	ldr	r1, [pc, #32]	; (8008f6c <__NVIC_SetPriority+0x50>)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	3b04      	subs	r3, #4
 8008f54:	0112      	lsls	r2, r2, #4
 8008f56:	b2d2      	uxtb	r2, r2
 8008f58:	440b      	add	r3, r1
 8008f5a:	761a      	strb	r2, [r3, #24]
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	e000e100 	.word	0xe000e100
 8008f6c:	e000ed00 	.word	0xe000ed00

08008f70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f74:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <SysTick_Handler+0x1c>)
 8008f76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f78:	f001 fd28 	bl	800a9cc <xTaskGetSchedulerState>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d001      	beq.n	8008f86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f82:	f002 fb11 	bl	800b5a8 <xPortSysTickHandler>
  }
}
 8008f86:	bf00      	nop
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	e000e010 	.word	0xe000e010

08008f90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f94:	2100      	movs	r1, #0
 8008f96:	f06f 0004 	mvn.w	r0, #4
 8008f9a:	f7ff ffbf 	bl	8008f1c <__NVIC_SetPriority>
#endif
}
 8008f9e:	bf00      	nop
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008faa:	f3ef 8305 	mrs	r3, IPSR
 8008fae:	603b      	str	r3, [r7, #0]
  return(result);
 8008fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008fb6:	f06f 0305 	mvn.w	r3, #5
 8008fba:	607b      	str	r3, [r7, #4]
 8008fbc:	e00c      	b.n	8008fd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fbe:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <osKernelInitialize+0x44>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d105      	bne.n	8008fd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fc6:	4b08      	ldr	r3, [pc, #32]	; (8008fe8 <osKernelInitialize+0x44>)
 8008fc8:	2201      	movs	r2, #1
 8008fca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	607b      	str	r3, [r7, #4]
 8008fd0:	e002      	b.n	8008fd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fd8:	687b      	ldr	r3, [r7, #4]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	200002cc 	.word	0x200002cc

08008fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ff2:	f3ef 8305 	mrs	r3, IPSR
 8008ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008ffe:	f06f 0305 	mvn.w	r3, #5
 8009002:	607b      	str	r3, [r7, #4]
 8009004:	e010      	b.n	8009028 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <osKernelStart+0x48>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d109      	bne.n	8009022 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800900e:	f7ff ffbf 	bl	8008f90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009012:	4b08      	ldr	r3, [pc, #32]	; (8009034 <osKernelStart+0x48>)
 8009014:	2202      	movs	r2, #2
 8009016:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009018:	f001 f87c 	bl	800a114 <vTaskStartScheduler>
      stat = osOK;
 800901c:	2300      	movs	r3, #0
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	e002      	b.n	8009028 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009022:	f04f 33ff 	mov.w	r3, #4294967295
 8009026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009028:	687b      	ldr	r3, [r7, #4]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	200002cc 	.word	0x200002cc

08009038 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009038:	b580      	push	{r7, lr}
 800903a:	b08e      	sub	sp, #56	; 0x38
 800903c:	af04      	add	r7, sp, #16
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009048:	f3ef 8305 	mrs	r3, IPSR
 800904c:	617b      	str	r3, [r7, #20]
  return(result);
 800904e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009050:	2b00      	cmp	r3, #0
 8009052:	d17e      	bne.n	8009152 <osThreadNew+0x11a>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d07b      	beq.n	8009152 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800905a:	2380      	movs	r3, #128	; 0x80
 800905c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800905e:	2318      	movs	r3, #24
 8009060:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009066:	f04f 33ff 	mov.w	r3, #4294967295
 800906a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d045      	beq.n	80090fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <osThreadNew+0x48>
        name = attr->name;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <osThreadNew+0x6e>
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	2b38      	cmp	r3, #56	; 0x38
 8009098:	d805      	bhi.n	80090a6 <osThreadNew+0x6e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <osThreadNew+0x72>
        return (NULL);
 80090a6:	2300      	movs	r3, #0
 80090a8:	e054      	b.n	8009154 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	089b      	lsrs	r3, r3, #2
 80090b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <osThreadNew+0xa8>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	2bbb      	cmp	r3, #187	; 0xbb
 80090c8:	d90a      	bls.n	80090e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d006      	beq.n	80090e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <osThreadNew+0xa8>
        mem = 1;
 80090da:	2301      	movs	r3, #1
 80090dc:	61bb      	str	r3, [r7, #24]
 80090de:	e010      	b.n	8009102 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10c      	bne.n	8009102 <osThreadNew+0xca>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d108      	bne.n	8009102 <osThreadNew+0xca>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d104      	bne.n	8009102 <osThreadNew+0xca>
          mem = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61bb      	str	r3, [r7, #24]
 80090fc:	e001      	b.n	8009102 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d110      	bne.n	800912a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009110:	9202      	str	r2, [sp, #8]
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6a3a      	ldr	r2, [r7, #32]
 800911c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fe0c 	bl	8009d3c <xTaskCreateStatic>
 8009124:	4603      	mov	r3, r0
 8009126:	613b      	str	r3, [r7, #16]
 8009128:	e013      	b.n	8009152 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d110      	bne.n	8009152 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	b29a      	uxth	r2, r3
 8009134:	f107 0310 	add.w	r3, r7, #16
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fe57 	bl	8009df6 <xTaskCreate>
 8009148:	4603      	mov	r3, r0
 800914a:	2b01      	cmp	r3, #1
 800914c:	d001      	beq.n	8009152 <osThreadNew+0x11a>
            hTask = NULL;
 800914e:	2300      	movs	r3, #0
 8009150:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009152:	693b      	ldr	r3, [r7, #16]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3728      	adds	r7, #40	; 0x28
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009164:	f3ef 8305 	mrs	r3, IPSR
 8009168:	60bb      	str	r3, [r7, #8]
  return(result);
 800916a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <osDelay+0x1c>
    stat = osErrorISR;
 8009170:	f06f 0305 	mvn.w	r3, #5
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e007      	b.n	8009188 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 ff92 	bl	800a0ac <vTaskDelay>
    }
  }

  return (stat);
 8009188:	68fb      	ldr	r3, [r7, #12]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4a07      	ldr	r2, [pc, #28]	; (80091c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80091a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	4a06      	ldr	r2, [pc, #24]	; (80091c4 <vApplicationGetIdleTaskMemory+0x30>)
 80091aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2280      	movs	r2, #128	; 0x80
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	200002d0 	.word	0x200002d0
 80091c4:	2000038c 	.word	0x2000038c

080091c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4a07      	ldr	r2, [pc, #28]	; (80091f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80091d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	4a06      	ldr	r2, [pc, #24]	; (80091f8 <vApplicationGetTimerTaskMemory+0x30>)
 80091de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091e6:	601a      	str	r2, [r3, #0]
}
 80091e8:	bf00      	nop
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	2000058c 	.word	0x2000058c
 80091f8:	20000648 	.word	0x20000648

080091fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f103 0208 	add.w	r2, r3, #8
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f103 0208 	add.w	r2, r3, #8
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f103 0208 	add.w	r2, r3, #8
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800924a:	bf00      	nop
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	601a      	str	r2, [r3, #0]
}
 8009292:	bf00      	nop
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800929e:	b480      	push	{r7}
 80092a0:	b085      	sub	sp, #20
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b4:	d103      	bne.n	80092be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	e00c      	b.n	80092d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3308      	adds	r3, #8
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e002      	b.n	80092cc <vListInsert+0x2e>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d2f6      	bcs.n	80092c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	601a      	str	r2, [r3, #0]
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6892      	ldr	r2, [r2, #8]
 8009326:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6852      	ldr	r2, [r2, #4]
 8009330:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d103      	bne.n	8009344 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	1e5a      	subs	r2, r3, #1
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800938e:	f002 f879 	bl	800b484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	68f9      	ldr	r1, [r7, #12]
 800939c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800939e:	fb01 f303 	mul.w	r3, r1, r3
 80093a2:	441a      	add	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093be:	3b01      	subs	r3, #1
 80093c0:	68f9      	ldr	r1, [r7, #12]
 80093c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093c4:	fb01 f303 	mul.w	r3, r1, r3
 80093c8:	441a      	add	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	22ff      	movs	r2, #255	; 0xff
 80093d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	22ff      	movs	r2, #255	; 0xff
 80093da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d114      	bne.n	800940e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d01a      	beq.n	8009422 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3310      	adds	r3, #16
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 f929 	bl	800a648 <xTaskRemoveFromEventList>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d012      	beq.n	8009422 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093fc:	4b0c      	ldr	r3, [pc, #48]	; (8009430 <xQueueGenericReset+0xcc>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	e009      	b.n	8009422 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3310      	adds	r3, #16
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff fef2 	bl	80091fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3324      	adds	r3, #36	; 0x24
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff feed 	bl	80091fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009422:	f002 f85f 	bl	800b4e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009426:	2301      	movs	r3, #1
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08e      	sub	sp, #56	; 0x38
 8009438:	af02      	add	r7, sp, #8
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <xQueueGenericCreateStatic+0x52>
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <xQueueGenericCreateStatic+0x56>
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <xQueueGenericCreateStatic+0x58>
 800948a:	2300      	movs	r3, #0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	623b      	str	r3, [r7, #32]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <xQueueGenericCreateStatic+0x7e>
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <xQueueGenericCreateStatic+0x82>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <xQueueGenericCreateStatic+0x84>
 80094b6:	2300      	movs	r3, #0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	61fb      	str	r3, [r7, #28]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094d2:	2350      	movs	r3, #80	; 0x50
 80094d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2b50      	cmp	r3, #80	; 0x50
 80094da:	d00a      	beq.n	80094f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	61bb      	str	r3, [r7, #24]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009506:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	4613      	mov	r3, r2
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f805 	bl	8009524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800951c:	4618      	mov	r0, r3
 800951e:	3730      	adds	r7, #48	; 0x30
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e002      	b.n	8009546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009552:	2101      	movs	r1, #1
 8009554:	69b8      	ldr	r0, [r7, #24]
 8009556:	f7ff ff05 	bl	8009364 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	78fa      	ldrb	r2, [r7, #3]
 800955e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08e      	sub	sp, #56	; 0x38
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800957a:	2300      	movs	r3, #0
 800957c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xQueueGenericSend+0x32>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <xQueueGenericSend+0x40>
 80095a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <xQueueGenericSend+0x44>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <xQueueGenericSend+0x46>
 80095b0:	2300      	movs	r3, #0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <xQueueGenericSend+0x60>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d103      	bne.n	80095da <xQueueGenericSend+0x6e>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d101      	bne.n	80095de <xQueueGenericSend+0x72>
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <xQueueGenericSend+0x74>
 80095de:	2300      	movs	r3, #0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xQueueGenericSend+0x8e>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	623b      	str	r3, [r7, #32]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095fa:	f001 f9e7 	bl	800a9cc <xTaskGetSchedulerState>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <xQueueGenericSend+0x9e>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <xQueueGenericSend+0xa2>
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <xQueueGenericSend+0xa4>
 800960e:	2300      	movs	r3, #0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <xQueueGenericSend+0xbe>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	61fb      	str	r3, [r7, #28]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800962a:	f001 ff2b 	bl	800b484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	429a      	cmp	r2, r3
 8009638:	d302      	bcc.n	8009640 <xQueueGenericSend+0xd4>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d129      	bne.n	8009694 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009646:	f000 fa0b 	bl	8009a60 <prvCopyDataToQueue>
 800964a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	2b00      	cmp	r3, #0
 8009652:	d010      	beq.n	8009676 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	3324      	adds	r3, #36	; 0x24
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fff5 	bl	800a648 <xTaskRemoveFromEventList>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d013      	beq.n	800968c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009664:	4b3f      	ldr	r3, [pc, #252]	; (8009764 <xQueueGenericSend+0x1f8>)
 8009666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	e00a      	b.n	800968c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d007      	beq.n	800968c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800967c:	4b39      	ldr	r3, [pc, #228]	; (8009764 <xQueueGenericSend+0x1f8>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800968c:	f001 ff2a 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 8009690:	2301      	movs	r3, #1
 8009692:	e063      	b.n	800975c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800969a:	f001 ff23 	bl	800b4e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	e05c      	b.n	800975c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d106      	bne.n	80096b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096a8:	f107 0314 	add.w	r3, r7, #20
 80096ac:	4618      	mov	r0, r3
 80096ae:	f001 f82f 	bl	800a710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096b2:	2301      	movs	r3, #1
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096b6:	f001 ff15 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ba:	f000 fd9b 	bl	800a1f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096be:	f001 fee1 	bl	800b484 <vPortEnterCritical>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d103      	bne.n	80096d8 <xQueueGenericSend+0x16c>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096de:	b25b      	sxtb	r3, r3
 80096e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e4:	d103      	bne.n	80096ee <xQueueGenericSend+0x182>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096ee:	f001 fef9 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096f2:	1d3a      	adds	r2, r7, #4
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 f81e 	bl	800a73c <xTaskCheckForTimeOut>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d124      	bne.n	8009750 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009708:	f000 faa2 	bl	8009c50 <prvIsQueueFull>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d018      	beq.n	8009744 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	3310      	adds	r3, #16
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f000 ff44 	bl	800a5a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009722:	f000 fa2d 	bl	8009b80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009726:	f000 fd73 	bl	800a210 <xTaskResumeAll>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	f47f af7c 	bne.w	800962a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <xQueueGenericSend+0x1f8>)
 8009734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	e772      	b.n	800962a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009746:	f000 fa1b 	bl	8009b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800974a:	f000 fd61 	bl	800a210 <xTaskResumeAll>
 800974e:	e76c      	b.n	800962a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009752:	f000 fa15 	bl	8009b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009756:	f000 fd5b 	bl	800a210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800975a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800975c:	4618      	mov	r0, r3
 800975e:	3738      	adds	r7, #56	; 0x38
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b090      	sub	sp, #64	; 0x40
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <xQueueGenericSendFromISR+0x3c>
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <xQueueGenericSendFromISR+0x40>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <xQueueGenericSendFromISR+0x42>
 80097a8:	2300      	movs	r3, #0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d103      	bne.n	80097d2 <xQueueGenericSendFromISR+0x6a>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d101      	bne.n	80097d6 <xQueueGenericSendFromISR+0x6e>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <xQueueGenericSendFromISR+0x70>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	623b      	str	r3, [r7, #32]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097f2:	f001 ff29 	bl	800b648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097f6:	f3ef 8211 	mrs	r2, BASEPRI
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	61fa      	str	r2, [r7, #28]
 800980c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800980e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009810:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981a:	429a      	cmp	r2, r3
 800981c:	d302      	bcc.n	8009824 <xQueueGenericSendFromISR+0xbc>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b02      	cmp	r3, #2
 8009822:	d12f      	bne.n	8009884 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009832:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800983a:	f000 f911 	bl	8009a60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800983e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009846:	d112      	bne.n	800986e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d016      	beq.n	800987e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	3324      	adds	r3, #36	; 0x24
 8009854:	4618      	mov	r0, r3
 8009856:	f000 fef7 	bl	800a648 <xTaskRemoveFromEventList>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00e      	beq.n	800987e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e007      	b.n	800987e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800986e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009872:	3301      	adds	r3, #1
 8009874:	b2db      	uxtb	r3, r3
 8009876:	b25a      	sxtb	r2, r3
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800987e:	2301      	movs	r3, #1
 8009880:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009882:	e001      	b.n	8009888 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009884:	2300      	movs	r3, #0
 8009886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009892:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009896:	4618      	mov	r0, r3
 8009898:	3740      	adds	r7, #64	; 0x40
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08c      	sub	sp, #48	; 0x30
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098ac:	2300      	movs	r3, #0
 80098ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <xQueueReceive+0x30>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	623b      	str	r3, [r7, #32]
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <xQueueReceive+0x3e>
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <xQueueReceive+0x42>
 80098de:	2301      	movs	r3, #1
 80098e0:	e000      	b.n	80098e4 <xQueueReceive+0x44>
 80098e2:	2300      	movs	r3, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10a      	bne.n	80098fe <xQueueReceive+0x5e>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	61fb      	str	r3, [r7, #28]
}
 80098fa:	bf00      	nop
 80098fc:	e7fe      	b.n	80098fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098fe:	f001 f865 	bl	800a9cc <xTaskGetSchedulerState>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d102      	bne.n	800990e <xQueueReceive+0x6e>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <xQueueReceive+0x72>
 800990e:	2301      	movs	r3, #1
 8009910:	e000      	b.n	8009914 <xQueueReceive+0x74>
 8009912:	2300      	movs	r3, #0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <xQueueReceive+0x8e>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	61bb      	str	r3, [r7, #24]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800992e:	f001 fda9 	bl	800b484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01f      	beq.n	800997e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009942:	f000 f8f7 	bl	8009b34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	1e5a      	subs	r2, r3, #1
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00f      	beq.n	8009976 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009958:	3310      	adds	r3, #16
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fe74 	bl	800a648 <xTaskRemoveFromEventList>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d007      	beq.n	8009976 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009966:	4b3d      	ldr	r3, [pc, #244]	; (8009a5c <xQueueReceive+0x1bc>)
 8009968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009976:	f001 fdb5 	bl	800b4e4 <vPortExitCritical>
				return pdPASS;
 800997a:	2301      	movs	r3, #1
 800997c:	e069      	b.n	8009a52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d103      	bne.n	800998c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009984:	f001 fdae 	bl	800b4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009988:	2300      	movs	r3, #0
 800998a:	e062      	b.n	8009a52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009992:	f107 0310 	add.w	r3, r7, #16
 8009996:	4618      	mov	r0, r3
 8009998:	f000 feba 	bl	800a710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800999c:	2301      	movs	r3, #1
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099a0:	f001 fda0 	bl	800b4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099a4:	f000 fc26 	bl	800a1f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099a8:	f001 fd6c 	bl	800b484 <vPortEnterCritical>
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b2:	b25b      	sxtb	r3, r3
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d103      	bne.n	80099c2 <xQueueReceive+0x122>
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099c8:	b25b      	sxtb	r3, r3
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ce:	d103      	bne.n	80099d8 <xQueueReceive+0x138>
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099d8:	f001 fd84 	bl	800b4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099dc:	1d3a      	adds	r2, r7, #4
 80099de:	f107 0310 	add.w	r3, r7, #16
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fea9 	bl	800a73c <xTaskCheckForTimeOut>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d123      	bne.n	8009a38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f2:	f000 f917 	bl	8009c24 <prvIsQueueEmpty>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d017      	beq.n	8009a2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	3324      	adds	r3, #36	; 0x24
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4611      	mov	r1, r2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fdcf 	bl	800a5a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a0c:	f000 f8b8 	bl	8009b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a10:	f000 fbfe 	bl	800a210 <xTaskResumeAll>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d189      	bne.n	800992e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a1a:	4b10      	ldr	r3, [pc, #64]	; (8009a5c <xQueueReceive+0x1bc>)
 8009a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	e780      	b.n	800992e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2e:	f000 f8a7 	bl	8009b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a32:	f000 fbed 	bl	800a210 <xTaskResumeAll>
 8009a36:	e77a      	b.n	800992e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3a:	f000 f8a1 	bl	8009b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a3e:	f000 fbe7 	bl	800a210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a44:	f000 f8ee 	bl	8009c24 <prvIsQueueEmpty>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f43f af6f 	beq.w	800992e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3730      	adds	r7, #48	; 0x30
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10d      	bne.n	8009a9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d14d      	bne.n	8009b22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 ffbc 	bl	800aa08 <xTaskPriorityDisinherit>
 8009a90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	e043      	b.n	8009b22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d119      	bne.n	8009ad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6858      	ldr	r0, [r3, #4]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	f003 fa6e 	bl	800cf8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab8:	441a      	add	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d32b      	bcc.n	8009b22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	e026      	b.n	8009b22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68d8      	ldr	r0, [r3, #12]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	461a      	mov	r2, r3
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	f003 fa54 	bl	800cf8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aec:	425b      	negs	r3, r3
 8009aee:	441a      	add	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d207      	bcs.n	8009b10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b08:	425b      	negs	r3, r3
 8009b0a:	441a      	add	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d105      	bne.n	8009b22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b2a:	697b      	ldr	r3, [r7, #20]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d018      	beq.n	8009b78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4e:	441a      	add	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d303      	bcc.n	8009b68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68d9      	ldr	r1, [r3, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	461a      	mov	r2, r3
 8009b72:	6838      	ldr	r0, [r7, #0]
 8009b74:	f003 fa0a 	bl	800cf8c <memcpy>
	}
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b88:	f001 fc7c 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b94:	e011      	b.n	8009bba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d012      	beq.n	8009bc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3324      	adds	r3, #36	; 0x24
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 fd50 	bl	800a648 <xTaskRemoveFromEventList>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bae:	f000 fe27 	bl	800a800 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dce9      	bgt.n	8009b96 <prvUnlockQueue+0x16>
 8009bc2:	e000      	b.n	8009bc6 <prvUnlockQueue+0x46>
					break;
 8009bc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	22ff      	movs	r2, #255	; 0xff
 8009bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bce:	f001 fc89 	bl	800b4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bd2:	f001 fc57 	bl	800b484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bde:	e011      	b.n	8009c04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d012      	beq.n	8009c0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3310      	adds	r3, #16
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fd2b 	bl	800a648 <xTaskRemoveFromEventList>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bf8:	f000 fe02 	bl	800a800 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dce9      	bgt.n	8009be0 <prvUnlockQueue+0x60>
 8009c0c:	e000      	b.n	8009c10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	22ff      	movs	r2, #255	; 0xff
 8009c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c18:	f001 fc64 	bl	800b4e4 <vPortExitCritical>
}
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c2c:	f001 fc2a 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d102      	bne.n	8009c3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	e001      	b.n	8009c42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c42:	f001 fc4f 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 8009c46:	68fb      	ldr	r3, [r7, #12]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c58:	f001 fc14 	bl	800b484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d102      	bne.n	8009c6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	e001      	b.n	8009c72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c72:	f001 fc37 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 8009c76:	68fb      	ldr	r3, [r7, #12]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	e014      	b.n	8009cba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c90:	4a0f      	ldr	r2, [pc, #60]	; (8009cd0 <vQueueAddToRegistry+0x50>)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10b      	bne.n	8009cb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c9c:	490c      	ldr	r1, [pc, #48]	; (8009cd0 <vQueueAddToRegistry+0x50>)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ca6:	4a0a      	ldr	r2, [pc, #40]	; (8009cd0 <vQueueAddToRegistry+0x50>)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	4413      	add	r3, r2
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cb2:	e006      	b.n	8009cc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b07      	cmp	r3, #7
 8009cbe:	d9e7      	bls.n	8009c90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	20000a48 	.word	0x20000a48

08009cd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ce4:	f001 fbce 	bl	800b484 <vPortEnterCritical>
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cee:	b25b      	sxtb	r3, r3
 8009cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf4:	d103      	bne.n	8009cfe <vQueueWaitForMessageRestricted+0x2a>
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d04:	b25b      	sxtb	r3, r3
 8009d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0a:	d103      	bne.n	8009d14 <vQueueWaitForMessageRestricted+0x40>
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d14:	f001 fbe6 	bl	800b4e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d106      	bne.n	8009d2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	3324      	adds	r3, #36	; 0x24
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fc61 	bl	800a5f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d2e:	6978      	ldr	r0, [r7, #20]
 8009d30:	f7ff ff26 	bl	8009b80 <prvUnlockQueue>
	}
 8009d34:	bf00      	nop
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08e      	sub	sp, #56	; 0x38
 8009d40:	af04      	add	r7, sp, #16
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	623b      	str	r3, [r7, #32]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10a      	bne.n	8009d82 <xTaskCreateStatic+0x46>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	61fb      	str	r3, [r7, #28]
}
 8009d7e:	bf00      	nop
 8009d80:	e7fe      	b.n	8009d80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d82:	23bc      	movs	r3, #188	; 0xbc
 8009d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2bbc      	cmp	r3, #188	; 0xbc
 8009d8a:	d00a      	beq.n	8009da2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	61bb      	str	r3, [r7, #24]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009da2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d01e      	beq.n	8009de8 <xTaskCreateStatic+0xac>
 8009daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01b      	beq.n	8009de8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009db8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	9303      	str	r3, [sp, #12]
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	9302      	str	r3, [sp, #8]
 8009dca:	f107 0314 	add.w	r3, r7, #20
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	68b9      	ldr	r1, [r7, #8]
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f850 	bl	8009e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009de2:	f000 f8f3 	bl	8009fcc <prvAddNewTaskToReadyList>
 8009de6:	e001      	b.n	8009dec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009dec:	697b      	ldr	r3, [r7, #20]
	}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3728      	adds	r7, #40	; 0x28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b08c      	sub	sp, #48	; 0x30
 8009dfa:	af04      	add	r7, sp, #16
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	603b      	str	r3, [r7, #0]
 8009e02:	4613      	mov	r3, r2
 8009e04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e06:	88fb      	ldrh	r3, [r7, #6]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 fc5c 	bl	800b6c8 <pvPortMalloc>
 8009e10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00e      	beq.n	8009e36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e18:	20bc      	movs	r0, #188	; 0xbc
 8009e1a:	f001 fc55 	bl	800b6c8 <pvPortMalloc>
 8009e1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8009e2c:	e005      	b.n	8009e3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e2e:	6978      	ldr	r0, [r7, #20]
 8009e30:	f001 fd16 	bl	800b860 <vPortFree>
 8009e34:	e001      	b.n	8009e3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d017      	beq.n	8009e70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e48:	88fa      	ldrh	r2, [r7, #6]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9303      	str	r3, [sp, #12]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	9302      	str	r3, [sp, #8]
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	68b9      	ldr	r1, [r7, #8]
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f000 f80e 	bl	8009e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e64:	69f8      	ldr	r0, [r7, #28]
 8009e66:	f000 f8b1 	bl	8009fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	61bb      	str	r3, [r7, #24]
 8009e6e:	e002      	b.n	8009e76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e70:	f04f 33ff 	mov.w	r3, #4294967295
 8009e74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e76:	69bb      	ldr	r3, [r7, #24]
	}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	461a      	mov	r2, r3
 8009e98:	21a5      	movs	r1, #165	; 0xa5
 8009e9a:	f003 f885 	bl	800cfa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f023 0307 	bic.w	r3, r3, #7
 8009eb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	f003 0307 	and.w	r3, r3, #7
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	617b      	str	r3, [r7, #20]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d01f      	beq.n	8009f1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ede:	2300      	movs	r3, #0
 8009ee0:	61fb      	str	r3, [r7, #28]
 8009ee2:	e012      	b.n	8009f0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	4413      	add	r3, r2
 8009eea:	7819      	ldrb	r1, [r3, #0]
 8009eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	3334      	adds	r3, #52	; 0x34
 8009ef4:	460a      	mov	r2, r1
 8009ef6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4413      	add	r3, r2
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d006      	beq.n	8009f12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	3301      	adds	r3, #1
 8009f08:	61fb      	str	r3, [r7, #28]
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	2b0f      	cmp	r3, #15
 8009f0e:	d9e9      	bls.n	8009ee4 <prvInitialiseNewTask+0x64>
 8009f10:	e000      	b.n	8009f14 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f1c:	e003      	b.n	8009f26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	2b37      	cmp	r3, #55	; 0x37
 8009f2a:	d901      	bls.n	8009f30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f2c:	2337      	movs	r3, #55	; 0x37
 8009f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	2200      	movs	r2, #0
 8009f40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	3304      	adds	r3, #4
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff f978 	bl	800923c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	3318      	adds	r3, #24
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff f973 	bl	800923c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	3354      	adds	r3, #84	; 0x54
 8009f80:	2260      	movs	r2, #96	; 0x60
 8009f82:	2100      	movs	r1, #0
 8009f84:	4618      	mov	r0, r3
 8009f86:	f003 f80f 	bl	800cfa8 <memset>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	4a0c      	ldr	r2, [pc, #48]	; (8009fc0 <prvInitialiseNewTask+0x140>)
 8009f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <prvInitialiseNewTask+0x144>)
 8009f94:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	4a0b      	ldr	r2, [pc, #44]	; (8009fc8 <prvInitialiseNewTask+0x148>)
 8009f9a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	68f9      	ldr	r1, [r7, #12]
 8009fa0:	69b8      	ldr	r0, [r7, #24]
 8009fa2:	f001 f941 	bl	800b228 <pxPortInitialiseStack>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb8:	bf00      	nop
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	0800d28c 	.word	0x0800d28c
 8009fc4:	0800d2ac 	.word	0x0800d2ac
 8009fc8:	0800d26c 	.word	0x0800d26c

08009fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fd4:	f001 fa56 	bl	800b484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fd8:	4b2d      	ldr	r3, [pc, #180]	; (800a090 <prvAddNewTaskToReadyList+0xc4>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	4a2c      	ldr	r2, [pc, #176]	; (800a090 <prvAddNewTaskToReadyList+0xc4>)
 8009fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fe2:	4b2c      	ldr	r3, [pc, #176]	; (800a094 <prvAddNewTaskToReadyList+0xc8>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fea:	4a2a      	ldr	r2, [pc, #168]	; (800a094 <prvAddNewTaskToReadyList+0xc8>)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ff0:	4b27      	ldr	r3, [pc, #156]	; (800a090 <prvAddNewTaskToReadyList+0xc4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d110      	bne.n	800a01a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ff8:	f000 fc26 	bl	800a848 <prvInitialiseTaskLists>
 8009ffc:	e00d      	b.n	800a01a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ffe:	4b26      	ldr	r3, [pc, #152]	; (800a098 <prvAddNewTaskToReadyList+0xcc>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d109      	bne.n	800a01a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a006:	4b23      	ldr	r3, [pc, #140]	; (800a094 <prvAddNewTaskToReadyList+0xc8>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	429a      	cmp	r2, r3
 800a012:	d802      	bhi.n	800a01a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a014:	4a1f      	ldr	r2, [pc, #124]	; (800a094 <prvAddNewTaskToReadyList+0xc8>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a01a:	4b20      	ldr	r3, [pc, #128]	; (800a09c <prvAddNewTaskToReadyList+0xd0>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3301      	adds	r3, #1
 800a020:	4a1e      	ldr	r2, [pc, #120]	; (800a09c <prvAddNewTaskToReadyList+0xd0>)
 800a022:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a024:	4b1d      	ldr	r3, [pc, #116]	; (800a09c <prvAddNewTaskToReadyList+0xd0>)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a030:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <prvAddNewTaskToReadyList+0xd4>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	429a      	cmp	r2, r3
 800a036:	d903      	bls.n	800a040 <prvAddNewTaskToReadyList+0x74>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	4a18      	ldr	r2, [pc, #96]	; (800a0a0 <prvAddNewTaskToReadyList+0xd4>)
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <prvAddNewTaskToReadyList+0xd8>)
 800a04e:	441a      	add	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3304      	adds	r3, #4
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f7ff f8fd 	bl	8009256 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a05c:	f001 fa42 	bl	800b4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a060:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <prvAddNewTaskToReadyList+0xcc>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00e      	beq.n	800a086 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <prvAddNewTaskToReadyList+0xc8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	429a      	cmp	r2, r3
 800a074:	d207      	bcs.n	800a086 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a076:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <prvAddNewTaskToReadyList+0xdc>)
 800a078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000f5c 	.word	0x20000f5c
 800a094:	20000a88 	.word	0x20000a88
 800a098:	20000f68 	.word	0x20000f68
 800a09c:	20000f78 	.word	0x20000f78
 800a0a0:	20000f64 	.word	0x20000f64
 800a0a4:	20000a8c 	.word	0x20000a8c
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d017      	beq.n	800a0ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0be:	4b13      	ldr	r3, [pc, #76]	; (800a10c <vTaskDelay+0x60>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <vTaskDelay+0x30>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	60bb      	str	r3, [r7, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a0dc:	f000 f88a 	bl	800a1f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fcfe 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a0e8:	f000 f892 	bl	800a210 <xTaskResumeAll>
 800a0ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d107      	bne.n	800a104 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a0f4:	4b06      	ldr	r3, [pc, #24]	; (800a110 <vTaskDelay+0x64>)
 800a0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000f84 	.word	0x20000f84
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08a      	sub	sp, #40	; 0x28
 800a118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a122:	463a      	mov	r2, r7
 800a124:	1d39      	adds	r1, r7, #4
 800a126:	f107 0308 	add.w	r3, r7, #8
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7ff f832 	bl	8009194 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	9202      	str	r2, [sp, #8]
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	2300      	movs	r3, #0
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	2300      	movs	r3, #0
 800a140:	460a      	mov	r2, r1
 800a142:	4924      	ldr	r1, [pc, #144]	; (800a1d4 <vTaskStartScheduler+0xc0>)
 800a144:	4824      	ldr	r0, [pc, #144]	; (800a1d8 <vTaskStartScheduler+0xc4>)
 800a146:	f7ff fdf9 	bl	8009d3c <xTaskCreateStatic>
 800a14a:	4603      	mov	r3, r0
 800a14c:	4a23      	ldr	r2, [pc, #140]	; (800a1dc <vTaskStartScheduler+0xc8>)
 800a14e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a150:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <vTaskStartScheduler+0xc8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a158:	2301      	movs	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e001      	b.n	800a162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d102      	bne.n	800a16e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a168:	f000 fd10 	bl	800ab8c <xTimerCreateTimerTask>
 800a16c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d11b      	bne.n	800a1ac <vTaskStartScheduler+0x98>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	613b      	str	r3, [r7, #16]
}
 800a186:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a188:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <vTaskStartScheduler+0xcc>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3354      	adds	r3, #84	; 0x54
 800a18e:	4a15      	ldr	r2, [pc, #84]	; (800a1e4 <vTaskStartScheduler+0xd0>)
 800a190:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a192:	4b15      	ldr	r3, [pc, #84]	; (800a1e8 <vTaskStartScheduler+0xd4>)
 800a194:	f04f 32ff 	mov.w	r2, #4294967295
 800a198:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a19a:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <vTaskStartScheduler+0xd8>)
 800a19c:	2201      	movs	r2, #1
 800a19e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1a0:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <vTaskStartScheduler+0xdc>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1a6:	f001 f8cb 	bl	800b340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1aa:	e00e      	b.n	800a1ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b2:	d10a      	bne.n	800a1ca <vTaskStartScheduler+0xb6>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	60fb      	str	r3, [r7, #12]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <vTaskStartScheduler+0xb4>
}
 800a1ca:	bf00      	nop
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800d180 	.word	0x0800d180
 800a1d8:	0800a819 	.word	0x0800a819
 800a1dc:	20000f80 	.word	0x20000f80
 800a1e0:	20000a88 	.word	0x20000a88
 800a1e4:	20000100 	.word	0x20000100
 800a1e8:	20000f7c 	.word	0x20000f7c
 800a1ec:	20000f68 	.word	0x20000f68
 800a1f0:	20000f60 	.word	0x20000f60

0800a1f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1f8:	4b04      	ldr	r3, [pc, #16]	; (800a20c <vTaskSuspendAll+0x18>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	4a03      	ldr	r2, [pc, #12]	; (800a20c <vTaskSuspendAll+0x18>)
 800a200:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a202:	bf00      	nop
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000f84 	.word	0x20000f84

0800a210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a216:	2300      	movs	r3, #0
 800a218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a21e:	4b42      	ldr	r3, [pc, #264]	; (800a328 <xTaskResumeAll+0x118>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <xTaskResumeAll+0x2c>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	603b      	str	r3, [r7, #0]
}
 800a238:	bf00      	nop
 800a23a:	e7fe      	b.n	800a23a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a23c:	f001 f922 	bl	800b484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a240:	4b39      	ldr	r3, [pc, #228]	; (800a328 <xTaskResumeAll+0x118>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3b01      	subs	r3, #1
 800a246:	4a38      	ldr	r2, [pc, #224]	; (800a328 <xTaskResumeAll+0x118>)
 800a248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a24a:	4b37      	ldr	r3, [pc, #220]	; (800a328 <xTaskResumeAll+0x118>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d162      	bne.n	800a318 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a252:	4b36      	ldr	r3, [pc, #216]	; (800a32c <xTaskResumeAll+0x11c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d05e      	beq.n	800a318 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a25a:	e02f      	b.n	800a2bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25c:	4b34      	ldr	r3, [pc, #208]	; (800a330 <xTaskResumeAll+0x120>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3318      	adds	r3, #24
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff f851 	bl	8009310 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3304      	adds	r3, #4
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff f84c 	bl	8009310 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27c:	4b2d      	ldr	r3, [pc, #180]	; (800a334 <xTaskResumeAll+0x124>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d903      	bls.n	800a28c <xTaskResumeAll+0x7c>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	4a2a      	ldr	r2, [pc, #168]	; (800a334 <xTaskResumeAll+0x124>)
 800a28a:	6013      	str	r3, [r2, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a290:	4613      	mov	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4a27      	ldr	r2, [pc, #156]	; (800a338 <xTaskResumeAll+0x128>)
 800a29a:	441a      	add	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	f7fe ffd7 	bl	8009256 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ac:	4b23      	ldr	r3, [pc, #140]	; (800a33c <xTaskResumeAll+0x12c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d302      	bcc.n	800a2bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a2b6:	4b22      	ldr	r3, [pc, #136]	; (800a340 <xTaskResumeAll+0x130>)
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2bc:	4b1c      	ldr	r3, [pc, #112]	; (800a330 <xTaskResumeAll+0x120>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1cb      	bne.n	800a25c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2ca:	f000 fb5f 	bl	800a98c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2ce:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <xTaskResumeAll+0x134>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d010      	beq.n	800a2fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2da:	f000 f847 	bl	800a36c <xTaskIncrementTick>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a2e4:	4b16      	ldr	r3, [pc, #88]	; (800a340 <xTaskResumeAll+0x130>)
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f1      	bne.n	800a2da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a2f6:	4b13      	ldr	r3, [pc, #76]	; (800a344 <xTaskResumeAll+0x134>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2fc:	4b10      	ldr	r3, [pc, #64]	; (800a340 <xTaskResumeAll+0x130>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d009      	beq.n	800a318 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a308:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <xTaskResumeAll+0x138>)
 800a30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a318:	f001 f8e4 	bl	800b4e4 <vPortExitCritical>

	return xAlreadyYielded;
 800a31c:	68bb      	ldr	r3, [r7, #8]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20000f84 	.word	0x20000f84
 800a32c:	20000f5c 	.word	0x20000f5c
 800a330:	20000f1c 	.word	0x20000f1c
 800a334:	20000f64 	.word	0x20000f64
 800a338:	20000a8c 	.word	0x20000a8c
 800a33c:	20000a88 	.word	0x20000a88
 800a340:	20000f70 	.word	0x20000f70
 800a344:	20000f6c 	.word	0x20000f6c
 800a348:	e000ed04 	.word	0xe000ed04

0800a34c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a352:	4b05      	ldr	r3, [pc, #20]	; (800a368 <xTaskGetTickCount+0x1c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a358:	687b      	ldr	r3, [r7, #4]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	20000f60 	.word	0x20000f60

0800a36c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a376:	4b4f      	ldr	r3, [pc, #316]	; (800a4b4 <xTaskIncrementTick+0x148>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 808f 	bne.w	800a49e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a380:	4b4d      	ldr	r3, [pc, #308]	; (800a4b8 <xTaskIncrementTick+0x14c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a388:	4a4b      	ldr	r2, [pc, #300]	; (800a4b8 <xTaskIncrementTick+0x14c>)
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d120      	bne.n	800a3d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a394:	4b49      	ldr	r3, [pc, #292]	; (800a4bc <xTaskIncrementTick+0x150>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00a      	beq.n	800a3b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	603b      	str	r3, [r7, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <xTaskIncrementTick+0x46>
 800a3b4:	4b41      	ldr	r3, [pc, #260]	; (800a4bc <xTaskIncrementTick+0x150>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]
 800a3ba:	4b41      	ldr	r3, [pc, #260]	; (800a4c0 <xTaskIncrementTick+0x154>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a3f      	ldr	r2, [pc, #252]	; (800a4bc <xTaskIncrementTick+0x150>)
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	4a3f      	ldr	r2, [pc, #252]	; (800a4c0 <xTaskIncrementTick+0x154>)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	4b3e      	ldr	r3, [pc, #248]	; (800a4c4 <xTaskIncrementTick+0x158>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4a3d      	ldr	r2, [pc, #244]	; (800a4c4 <xTaskIncrementTick+0x158>)
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	f000 fadb 	bl	800a98c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3d6:	4b3c      	ldr	r3, [pc, #240]	; (800a4c8 <xTaskIncrementTick+0x15c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d349      	bcc.n	800a474 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3e0:	4b36      	ldr	r3, [pc, #216]	; (800a4bc <xTaskIncrementTick+0x150>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d104      	bne.n	800a3f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ea:	4b37      	ldr	r3, [pc, #220]	; (800a4c8 <xTaskIncrementTick+0x15c>)
 800a3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f0:	601a      	str	r2, [r3, #0]
					break;
 800a3f2:	e03f      	b.n	800a474 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f4:	4b31      	ldr	r3, [pc, #196]	; (800a4bc <xTaskIncrementTick+0x150>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d203      	bcs.n	800a414 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a40c:	4a2e      	ldr	r2, [pc, #184]	; (800a4c8 <xTaskIncrementTick+0x15c>)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a412:	e02f      	b.n	800a474 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	3304      	adds	r3, #4
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fe ff79 	bl	8009310 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a422:	2b00      	cmp	r3, #0
 800a424:	d004      	beq.n	800a430 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	3318      	adds	r3, #24
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe ff70 	bl	8009310 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a434:	4b25      	ldr	r3, [pc, #148]	; (800a4cc <xTaskIncrementTick+0x160>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d903      	bls.n	800a444 <xTaskIncrementTick+0xd8>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	4a22      	ldr	r2, [pc, #136]	; (800a4cc <xTaskIncrementTick+0x160>)
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4a1f      	ldr	r2, [pc, #124]	; (800a4d0 <xTaskIncrementTick+0x164>)
 800a452:	441a      	add	r2, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	3304      	adds	r3, #4
 800a458:	4619      	mov	r1, r3
 800a45a:	4610      	mov	r0, r2
 800a45c:	f7fe fefb 	bl	8009256 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a464:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <xTaskIncrementTick+0x168>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d3b8      	bcc.n	800a3e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a472:	e7b5      	b.n	800a3e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a474:	4b17      	ldr	r3, [pc, #92]	; (800a4d4 <xTaskIncrementTick+0x168>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47a:	4915      	ldr	r1, [pc, #84]	; (800a4d0 <xTaskIncrementTick+0x164>)
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d901      	bls.n	800a490 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a490:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <xTaskIncrementTick+0x16c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d007      	beq.n	800a4a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]
 800a49c:	e004      	b.n	800a4a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <xTaskIncrementTick+0x170>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	4a0d      	ldr	r2, [pc, #52]	; (800a4dc <xTaskIncrementTick+0x170>)
 800a4a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4a8:	697b      	ldr	r3, [r7, #20]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000f84 	.word	0x20000f84
 800a4b8:	20000f60 	.word	0x20000f60
 800a4bc:	20000f14 	.word	0x20000f14
 800a4c0:	20000f18 	.word	0x20000f18
 800a4c4:	20000f74 	.word	0x20000f74
 800a4c8:	20000f7c 	.word	0x20000f7c
 800a4cc:	20000f64 	.word	0x20000f64
 800a4d0:	20000a8c 	.word	0x20000a8c
 800a4d4:	20000a88 	.word	0x20000a88
 800a4d8:	20000f70 	.word	0x20000f70
 800a4dc:	20000f6c 	.word	0x20000f6c

0800a4e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4e6:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <vTaskSwitchContext+0xb0>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4ee:	4b29      	ldr	r3, [pc, #164]	; (800a594 <vTaskSwitchContext+0xb4>)
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4f4:	e046      	b.n	800a584 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a4f6:	4b27      	ldr	r3, [pc, #156]	; (800a594 <vTaskSwitchContext+0xb4>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fc:	4b26      	ldr	r3, [pc, #152]	; (800a598 <vTaskSwitchContext+0xb8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	e010      	b.n	800a526 <vTaskSwitchContext+0x46>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <vTaskSwitchContext+0x40>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	607b      	str	r3, [r7, #4]
}
 800a51c:	bf00      	nop
 800a51e:	e7fe      	b.n	800a51e <vTaskSwitchContext+0x3e>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	3b01      	subs	r3, #1
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	491d      	ldr	r1, [pc, #116]	; (800a59c <vTaskSwitchContext+0xbc>)
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4613      	mov	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0e4      	beq.n	800a504 <vTaskSwitchContext+0x24>
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4a15      	ldr	r2, [pc, #84]	; (800a59c <vTaskSwitchContext+0xbc>)
 800a546:	4413      	add	r3, r2
 800a548:	60bb      	str	r3, [r7, #8]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	605a      	str	r2, [r3, #4]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	3308      	adds	r3, #8
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d104      	bne.n	800a56a <vTaskSwitchContext+0x8a>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	605a      	str	r2, [r3, #4]
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	4a0b      	ldr	r2, [pc, #44]	; (800a5a0 <vTaskSwitchContext+0xc0>)
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	4a08      	ldr	r2, [pc, #32]	; (800a598 <vTaskSwitchContext+0xb8>)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a57a:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <vTaskSwitchContext+0xc0>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3354      	adds	r3, #84	; 0x54
 800a580:	4a08      	ldr	r2, [pc, #32]	; (800a5a4 <vTaskSwitchContext+0xc4>)
 800a582:	6013      	str	r3, [r2, #0]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	20000f84 	.word	0x20000f84
 800a594:	20000f70 	.word	0x20000f70
 800a598:	20000f64 	.word	0x20000f64
 800a59c:	20000a8c 	.word	0x20000a8c
 800a5a0:	20000a88 	.word	0x20000a88
 800a5a4:	20000100 	.word	0x20000100

0800a5a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	60fb      	str	r3, [r7, #12]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5ce:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <vTaskPlaceOnEventList+0x44>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3318      	adds	r3, #24
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7fe fe61 	bl	800929e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5dc:	2101      	movs	r1, #1
 800a5de:	6838      	ldr	r0, [r7, #0]
 800a5e0:	f000 fa80 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
}
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20000a88 	.word	0x20000a88

0800a5f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	617b      	str	r3, [r7, #20]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <vTaskPlaceOnEventListRestricted+0x54>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3318      	adds	r3, #24
 800a61e:	4619      	mov	r1, r3
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7fe fe18 	bl	8009256 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a62c:	f04f 33ff 	mov.w	r3, #4294967295
 800a630:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	68b8      	ldr	r0, [r7, #8]
 800a636:	f000 fa55 	bl	800aae4 <prvAddCurrentTaskToDelayedList>
	}
 800a63a:	bf00      	nop
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000a88 	.word	0x20000a88

0800a648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	60fb      	str	r3, [r7, #12]
}
 800a670:	bf00      	nop
 800a672:	e7fe      	b.n	800a672 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	3318      	adds	r3, #24
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe fe49 	bl	8009310 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a67e:	4b1e      	ldr	r3, [pc, #120]	; (800a6f8 <xTaskRemoveFromEventList+0xb0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d11d      	bne.n	800a6c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	3304      	adds	r3, #4
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fe fe40 	bl	8009310 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a694:	4b19      	ldr	r3, [pc, #100]	; (800a6fc <xTaskRemoveFromEventList+0xb4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d903      	bls.n	800a6a4 <xTaskRemoveFromEventList+0x5c>
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	4a16      	ldr	r2, [pc, #88]	; (800a6fc <xTaskRemoveFromEventList+0xb4>)
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4a13      	ldr	r2, [pc, #76]	; (800a700 <xTaskRemoveFromEventList+0xb8>)
 800a6b2:	441a      	add	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	f7fe fdcb 	bl	8009256 <vListInsertEnd>
 800a6c0:	e005      	b.n	800a6ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	3318      	adds	r3, #24
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	480e      	ldr	r0, [pc, #56]	; (800a704 <xTaskRemoveFromEventList+0xbc>)
 800a6ca:	f7fe fdc4 	bl	8009256 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d2:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <xTaskRemoveFromEventList+0xc0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d905      	bls.n	800a6e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6e0:	4b0a      	ldr	r3, [pc, #40]	; (800a70c <xTaskRemoveFromEventList+0xc4>)
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	e001      	b.n	800a6ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6ec:	697b      	ldr	r3, [r7, #20]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20000f84 	.word	0x20000f84
 800a6fc:	20000f64 	.word	0x20000f64
 800a700:	20000a8c 	.word	0x20000a8c
 800a704:	20000f1c 	.word	0x20000f1c
 800a708:	20000a88 	.word	0x20000a88
 800a70c:	20000f70 	.word	0x20000f70

0800a710 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a718:	4b06      	ldr	r3, [pc, #24]	; (800a734 <vTaskInternalSetTimeOutState+0x24>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a720:	4b05      	ldr	r3, [pc, #20]	; (800a738 <vTaskInternalSetTimeOutState+0x28>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	605a      	str	r2, [r3, #4]
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	20000f74 	.word	0x20000f74
 800a738:	20000f60 	.word	0x20000f60

0800a73c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	613b      	str	r3, [r7, #16]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	60fb      	str	r3, [r7, #12]
}
 800a77a:	bf00      	nop
 800a77c:	e7fe      	b.n	800a77c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a77e:	f000 fe81 	bl	800b484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a782:	4b1d      	ldr	r3, [pc, #116]	; (800a7f8 <xTaskCheckForTimeOut+0xbc>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79a:	d102      	bne.n	800a7a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
 800a7a0:	e023      	b.n	800a7ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	4b15      	ldr	r3, [pc, #84]	; (800a7fc <xTaskCheckForTimeOut+0xc0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d007      	beq.n	800a7be <xTaskCheckForTimeOut+0x82>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d302      	bcc.n	800a7be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	61fb      	str	r3, [r7, #28]
 800a7bc:	e015      	b.n	800a7ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d20b      	bcs.n	800a7e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff ff9b 	bl	800a710 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	61fb      	str	r3, [r7, #28]
 800a7de:	e004      	b.n	800a7ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7ea:	f000 fe7b 	bl	800b4e4 <vPortExitCritical>

	return xReturn;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20000f60 	.word	0x20000f60
 800a7fc:	20000f74 	.word	0x20000f74

0800a800 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a800:	b480      	push	{r7}
 800a802:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a804:	4b03      	ldr	r3, [pc, #12]	; (800a814 <vTaskMissedYield+0x14>)
 800a806:	2201      	movs	r2, #1
 800a808:	601a      	str	r2, [r3, #0]
}
 800a80a:	bf00      	nop
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	20000f70 	.word	0x20000f70

0800a818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a820:	f000 f852 	bl	800a8c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a824:	4b06      	ldr	r3, [pc, #24]	; (800a840 <prvIdleTask+0x28>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d9f9      	bls.n	800a820 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a82c:	4b05      	ldr	r3, [pc, #20]	; (800a844 <prvIdleTask+0x2c>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a83c:	e7f0      	b.n	800a820 <prvIdleTask+0x8>
 800a83e:	bf00      	nop
 800a840:	20000a8c 	.word	0x20000a8c
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a84e:	2300      	movs	r3, #0
 800a850:	607b      	str	r3, [r7, #4]
 800a852:	e00c      	b.n	800a86e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4a12      	ldr	r2, [pc, #72]	; (800a8a8 <prvInitialiseTaskLists+0x60>)
 800a860:	4413      	add	r3, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fcca 	bl	80091fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3301      	adds	r3, #1
 800a86c:	607b      	str	r3, [r7, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b37      	cmp	r3, #55	; 0x37
 800a872:	d9ef      	bls.n	800a854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a874:	480d      	ldr	r0, [pc, #52]	; (800a8ac <prvInitialiseTaskLists+0x64>)
 800a876:	f7fe fcc1 	bl	80091fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a87a:	480d      	ldr	r0, [pc, #52]	; (800a8b0 <prvInitialiseTaskLists+0x68>)
 800a87c:	f7fe fcbe 	bl	80091fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a880:	480c      	ldr	r0, [pc, #48]	; (800a8b4 <prvInitialiseTaskLists+0x6c>)
 800a882:	f7fe fcbb 	bl	80091fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a886:	480c      	ldr	r0, [pc, #48]	; (800a8b8 <prvInitialiseTaskLists+0x70>)
 800a888:	f7fe fcb8 	bl	80091fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a88c:	480b      	ldr	r0, [pc, #44]	; (800a8bc <prvInitialiseTaskLists+0x74>)
 800a88e:	f7fe fcb5 	bl	80091fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a892:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <prvInitialiseTaskLists+0x78>)
 800a894:	4a05      	ldr	r2, [pc, #20]	; (800a8ac <prvInitialiseTaskLists+0x64>)
 800a896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a898:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <prvInitialiseTaskLists+0x7c>)
 800a89a:	4a05      	ldr	r2, [pc, #20]	; (800a8b0 <prvInitialiseTaskLists+0x68>)
 800a89c:	601a      	str	r2, [r3, #0]
}
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000a8c 	.word	0x20000a8c
 800a8ac:	20000eec 	.word	0x20000eec
 800a8b0:	20000f00 	.word	0x20000f00
 800a8b4:	20000f1c 	.word	0x20000f1c
 800a8b8:	20000f30 	.word	0x20000f30
 800a8bc:	20000f48 	.word	0x20000f48
 800a8c0:	20000f14 	.word	0x20000f14
 800a8c4:	20000f18 	.word	0x20000f18

0800a8c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8ce:	e019      	b.n	800a904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8d0:	f000 fdd8 	bl	800b484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d4:	4b10      	ldr	r3, [pc, #64]	; (800a918 <prvCheckTasksWaitingTermination+0x50>)
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fe fd15 	bl	8009310 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	; (800a91c <prvCheckTasksWaitingTermination+0x54>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	4a0b      	ldr	r2, [pc, #44]	; (800a91c <prvCheckTasksWaitingTermination+0x54>)
 800a8ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <prvCheckTasksWaitingTermination+0x58>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <prvCheckTasksWaitingTermination+0x58>)
 800a8f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8fa:	f000 fdf3 	bl	800b4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f810 	bl	800a924 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a904:	4b06      	ldr	r3, [pc, #24]	; (800a920 <prvCheckTasksWaitingTermination+0x58>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e1      	bne.n	800a8d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a90c:	bf00      	nop
 800a90e:	bf00      	nop
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000f30 	.word	0x20000f30
 800a91c:	20000f5c 	.word	0x20000f5c
 800a920:	20000f44 	.word	0x20000f44

0800a924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3354      	adds	r3, #84	; 0x54
 800a930:	4618      	mov	r0, r3
 800a932:	f002 fb4f 	bl	800cfd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d108      	bne.n	800a952 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	4618      	mov	r0, r3
 800a946:	f000 ff8b 	bl	800b860 <vPortFree>
				vPortFree( pxTCB );
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 ff88 	bl	800b860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a950:	e018      	b.n	800a984 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d103      	bne.n	800a964 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 ff7f 	bl	800b860 <vPortFree>
	}
 800a962:	e00f      	b.n	800a984 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d00a      	beq.n	800a984 <prvDeleteTCB+0x60>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	60fb      	str	r3, [r7, #12]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <prvDeleteTCB+0x5e>
	}
 800a984:	bf00      	nop
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a992:	4b0c      	ldr	r3, [pc, #48]	; (800a9c4 <prvResetNextTaskUnblockTime+0x38>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9a4:	e008      	b.n	800a9b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a6:	4b07      	ldr	r3, [pc, #28]	; (800a9c4 <prvResetNextTaskUnblockTime+0x38>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	4a04      	ldr	r2, [pc, #16]	; (800a9c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a9b6:	6013      	str	r3, [r2, #0]
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	20000f14 	.word	0x20000f14
 800a9c8:	20000f7c 	.word	0x20000f7c

0800a9cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <xTaskGetSchedulerState+0x34>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d102      	bne.n	800a9e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	607b      	str	r3, [r7, #4]
 800a9de:	e008      	b.n	800a9f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9e0:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <xTaskGetSchedulerState+0x38>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	607b      	str	r3, [r7, #4]
 800a9ec:	e001      	b.n	800a9f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9f2:	687b      	ldr	r3, [r7, #4]
	}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	20000f68 	.word	0x20000f68
 800aa04:	20000f84 	.word	0x20000f84

0800aa08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa14:	2300      	movs	r3, #0
 800aa16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d056      	beq.n	800aacc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa1e:	4b2e      	ldr	r3, [pc, #184]	; (800aad8 <xTaskPriorityDisinherit+0xd0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d00a      	beq.n	800aa3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	60fb      	str	r3, [r7, #12]
}
 800aa3a:	bf00      	nop
 800aa3c:	e7fe      	b.n	800aa3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10a      	bne.n	800aa5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	60bb      	str	r3, [r7, #8]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa60:	1e5a      	subs	r2, r3, #1
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d02c      	beq.n	800aacc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d128      	bne.n	800aacc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe fc46 	bl	8009310 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9c:	4b0f      	ldr	r3, [pc, #60]	; (800aadc <xTaskPriorityDisinherit+0xd4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d903      	bls.n	800aaac <xTaskPriorityDisinherit+0xa4>
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa8:	4a0c      	ldr	r2, [pc, #48]	; (800aadc <xTaskPriorityDisinherit+0xd4>)
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <xTaskPriorityDisinherit+0xd8>)
 800aaba:	441a      	add	r2, r3
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fe fbc7 	bl	8009256 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aac8:	2301      	movs	r3, #1
 800aaca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aacc:	697b      	ldr	r3, [r7, #20]
	}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000a88 	.word	0x20000a88
 800aadc:	20000f64 	.word	0x20000f64
 800aae0:	20000a8c 	.word	0x20000a8c

0800aae4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaee:	4b21      	ldr	r3, [pc, #132]	; (800ab74 <prvAddCurrentTaskToDelayedList+0x90>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaf4:	4b20      	ldr	r3, [pc, #128]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe fc08 	bl	8009310 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab06:	d10a      	bne.n	800ab1e <prvAddCurrentTaskToDelayedList+0x3a>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d007      	beq.n	800ab1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab0e:	4b1a      	ldr	r3, [pc, #104]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	4819      	ldr	r0, [pc, #100]	; (800ab7c <prvAddCurrentTaskToDelayedList+0x98>)
 800ab18:	f7fe fb9d 	bl	8009256 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab1c:	e026      	b.n	800ab6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4413      	add	r3, r2
 800ab24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d209      	bcs.n	800ab4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab36:	4b12      	ldr	r3, [pc, #72]	; (800ab80 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4619      	mov	r1, r3
 800ab42:	4610      	mov	r0, r2
 800ab44:	f7fe fbab 	bl	800929e <vListInsert>
}
 800ab48:	e010      	b.n	800ab6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7fe fba1 	bl	800929e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d202      	bcs.n	800ab6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab66:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6013      	str	r3, [r2, #0]
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20000f60 	.word	0x20000f60
 800ab78:	20000a88 	.word	0x20000a88
 800ab7c:	20000f48 	.word	0x20000f48
 800ab80:	20000f18 	.word	0x20000f18
 800ab84:	20000f14 	.word	0x20000f14
 800ab88:	20000f7c 	.word	0x20000f7c

0800ab8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	; 0x28
 800ab90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab96:	f000 fb07 	bl	800b1a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab9a:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <xTimerCreateTimerTask+0x80>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d021      	beq.n	800abe6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800abaa:	1d3a      	adds	r2, r7, #4
 800abac:	f107 0108 	add.w	r1, r7, #8
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe fb07 	bl	80091c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	9202      	str	r2, [sp, #8]
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	2302      	movs	r3, #2
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	2300      	movs	r3, #0
 800abca:	460a      	mov	r2, r1
 800abcc:	4910      	ldr	r1, [pc, #64]	; (800ac10 <xTimerCreateTimerTask+0x84>)
 800abce:	4811      	ldr	r0, [pc, #68]	; (800ac14 <xTimerCreateTimerTask+0x88>)
 800abd0:	f7ff f8b4 	bl	8009d3c <xTaskCreateStatic>
 800abd4:	4603      	mov	r3, r0
 800abd6:	4a10      	ldr	r2, [pc, #64]	; (800ac18 <xTimerCreateTimerTask+0x8c>)
 800abd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <xTimerCreateTimerTask+0x8c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abe2:	2301      	movs	r3, #1
 800abe4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	613b      	str	r3, [r7, #16]
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac02:	697b      	ldr	r3, [r7, #20]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	20000fb8 	.word	0x20000fb8
 800ac10:	0800d188 	.word	0x0800d188
 800ac14:	0800ad51 	.word	0x0800ad51
 800ac18:	20000fbc 	.word	0x20000fbc

0800ac1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	; 0x28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10a      	bne.n	800ac4a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	623b      	str	r3, [r7, #32]
}
 800ac46:	bf00      	nop
 800ac48:	e7fe      	b.n	800ac48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac4a:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d02a      	beq.n	800aca8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b05      	cmp	r3, #5
 800ac62:	dc18      	bgt.n	800ac96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac64:	f7ff feb2 	bl	800a9cc <xTaskGetSchedulerState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d109      	bne.n	800ac82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac6e:	4b11      	ldr	r3, [pc, #68]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	f107 0110 	add.w	r1, r7, #16
 800ac76:	2300      	movs	r3, #0
 800ac78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac7a:	f7fe fc77 	bl	800956c <xQueueGenericSend>
 800ac7e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac80:	e012      	b.n	800aca8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac82:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	f107 0110 	add.w	r1, r7, #16
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f7fe fc6d 	bl	800956c <xQueueGenericSend>
 800ac92:	6278      	str	r0, [r7, #36]	; 0x24
 800ac94:	e008      	b.n	800aca8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac96:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <xTimerGenericCommand+0x98>)
 800ac98:	6818      	ldr	r0, [r3, #0]
 800ac9a:	f107 0110 	add.w	r1, r7, #16
 800ac9e:	2300      	movs	r3, #0
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	f7fe fd61 	bl	8009768 <xQueueGenericSendFromISR>
 800aca6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3728      	adds	r7, #40	; 0x28
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	20000fb8 	.word	0x20000fb8

0800acb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af02      	add	r7, sp, #8
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acc2:	4b22      	ldr	r3, [pc, #136]	; (800ad4c <prvProcessExpiredTimer+0x94>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	3304      	adds	r3, #4
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fb1d 	bl	8009310 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d022      	beq.n	800ad2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	699a      	ldr	r2, [r3, #24]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	18d1      	adds	r1, r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	f000 f8d1 	bl	800ae98 <prvInsertTimerInActiveList>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01f      	beq.n	800ad3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acfc:	2300      	movs	r3, #0
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2300      	movs	r3, #0
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	2100      	movs	r1, #0
 800ad06:	6978      	ldr	r0, [r7, #20]
 800ad08:	f7ff ff88 	bl	800ac1c <xTimerGenericCommand>
 800ad0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d113      	bne.n	800ad3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	60fb      	str	r3, [r7, #12]
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	6978      	ldr	r0, [r7, #20]
 800ad42:	4798      	blx	r3
}
 800ad44:	bf00      	nop
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20000fb0 	.word	0x20000fb0

0800ad50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad58:	f107 0308 	add.w	r3, r7, #8
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 f857 	bl	800ae10 <prvGetNextExpireTime>
 800ad62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	4619      	mov	r1, r3
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 f803 	bl	800ad74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad6e:	f000 f8d5 	bl	800af1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad72:	e7f1      	b.n	800ad58 <prvTimerTask+0x8>

0800ad74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad7e:	f7ff fa39 	bl	800a1f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 f866 	bl	800ae58 <prvSampleTimeNow>
 800ad8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d130      	bne.n	800adf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10a      	bne.n	800adb0 <prvProcessTimerOrBlockTask+0x3c>
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d806      	bhi.n	800adb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ada2:	f7ff fa35 	bl	800a210 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ada6:	68f9      	ldr	r1, [r7, #12]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ff85 	bl	800acb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800adae:	e024      	b.n	800adfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d008      	beq.n	800adc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800adb6:	4b13      	ldr	r3, [pc, #76]	; (800ae04 <prvProcessTimerOrBlockTask+0x90>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <prvProcessTimerOrBlockTask+0x50>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e000      	b.n	800adc6 <prvProcessTimerOrBlockTask+0x52>
 800adc4:	2300      	movs	r3, #0
 800adc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800adc8:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <prvProcessTimerOrBlockTask+0x94>)
 800adca:	6818      	ldr	r0, [r3, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	4619      	mov	r1, r3
 800add6:	f7fe ff7d 	bl	8009cd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800adda:	f7ff fa19 	bl	800a210 <xTaskResumeAll>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ade4:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <prvProcessTimerOrBlockTask+0x98>)
 800ade6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	f3bf 8f6f 	isb	sy
}
 800adf4:	e001      	b.n	800adfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adf6:	f7ff fa0b 	bl	800a210 <xTaskResumeAll>
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	20000fb4 	.word	0x20000fb4
 800ae08:	20000fb8 	.word	0x20000fb8
 800ae0c:	e000ed04 	.word	0xe000ed04

0800ae10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae18:	4b0e      	ldr	r3, [pc, #56]	; (800ae54 <prvGetNextExpireTime+0x44>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <prvGetNextExpireTime+0x16>
 800ae22:	2201      	movs	r2, #1
 800ae24:	e000      	b.n	800ae28 <prvGetNextExpireTime+0x18>
 800ae26:	2200      	movs	r2, #0
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d105      	bne.n	800ae40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae34:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <prvGetNextExpireTime+0x44>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	e001      	b.n	800ae44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae44:	68fb      	ldr	r3, [r7, #12]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	20000fb0 	.word	0x20000fb0

0800ae58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae60:	f7ff fa74 	bl	800a34c <xTaskGetTickCount>
 800ae64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae66:	4b0b      	ldr	r3, [pc, #44]	; (800ae94 <prvSampleTimeNow+0x3c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d205      	bcs.n	800ae7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae70:	f000 f936 	bl	800b0e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e002      	b.n	800ae82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae82:	4a04      	ldr	r2, [pc, #16]	; (800ae94 <prvSampleTimeNow+0x3c>)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae88:	68fb      	ldr	r3, [r7, #12]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20000fc0 	.word	0x20000fc0

0800ae98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d812      	bhi.n	800aee4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	1ad2      	subs	r2, r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aecc:	2301      	movs	r3, #1
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e01b      	b.n	800af0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aed2:	4b10      	ldr	r3, [pc, #64]	; (800af14 <prvInsertTimerInActiveList+0x7c>)
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7fe f9de 	bl	800929e <vListInsert>
 800aee2:	e012      	b.n	800af0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d206      	bcs.n	800aefa <prvInsertTimerInActiveList+0x62>
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d302      	bcc.n	800aefa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aef4:	2301      	movs	r3, #1
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	e007      	b.n	800af0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aefa:	4b07      	ldr	r3, [pc, #28]	; (800af18 <prvInsertTimerInActiveList+0x80>)
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3304      	adds	r3, #4
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7fe f9ca 	bl	800929e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af0a:	697b      	ldr	r3, [r7, #20]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20000fb4 	.word	0x20000fb4
 800af18:	20000fb0 	.word	0x20000fb0

0800af1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08e      	sub	sp, #56	; 0x38
 800af20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af22:	e0ca      	b.n	800b0ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	da18      	bge.n	800af5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af2a:	1d3b      	adds	r3, r7, #4
 800af2c:	3304      	adds	r3, #4
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10a      	bne.n	800af4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	61fb      	str	r3, [r7, #28]
}
 800af48:	bf00      	nop
 800af4a:	e7fe      	b.n	800af4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af52:	6850      	ldr	r0, [r2, #4]
 800af54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af56:	6892      	ldr	r2, [r2, #8]
 800af58:	4611      	mov	r1, r2
 800af5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f2c0 80aa 	blt.w	800b0b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d004      	beq.n	800af7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	3304      	adds	r3, #4
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe f9cb 	bl	8009310 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af7a:	463b      	mov	r3, r7
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff ff6b 	bl	800ae58 <prvSampleTimeNow>
 800af82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b09      	cmp	r3, #9
 800af88:	f200 8097 	bhi.w	800b0ba <prvProcessReceivedCommands+0x19e>
 800af8c:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <prvProcessReceivedCommands+0x78>)
 800af8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af92:	bf00      	nop
 800af94:	0800afbd 	.word	0x0800afbd
 800af98:	0800afbd 	.word	0x0800afbd
 800af9c:	0800afbd 	.word	0x0800afbd
 800afa0:	0800b031 	.word	0x0800b031
 800afa4:	0800b045 	.word	0x0800b045
 800afa8:	0800b08f 	.word	0x0800b08f
 800afac:	0800afbd 	.word	0x0800afbd
 800afb0:	0800afbd 	.word	0x0800afbd
 800afb4:	0800b031 	.word	0x0800b031
 800afb8:	0800b045 	.word	0x0800b045
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afc2:	f043 0301 	orr.w	r3, r3, #1
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	18d1      	adds	r1, r2, r3
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afdc:	f7ff ff5c 	bl	800ae98 <prvInsertTimerInActiveList>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d069      	beq.n	800b0ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d05e      	beq.n	800b0ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	441a      	add	r2, r3
 800b004:	2300      	movs	r3, #0
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	2300      	movs	r3, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b00e:	f7ff fe05 	bl	800ac1c <xTimerGenericCommand>
 800b012:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d14f      	bne.n	800b0ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	61bb      	str	r3, [r7, #24]
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b036:	f023 0301 	bic.w	r3, r3, #1
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b042:	e03a      	b.n	800b0ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b04a:	f043 0301 	orr.w	r3, r3, #1
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	617b      	str	r3, [r7, #20]
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07c:	699a      	ldr	r2, [r3, #24]
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	18d1      	adds	r1, r2, r3
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b088:	f7ff ff06 	bl	800ae98 <prvInsertTimerInActiveList>
					break;
 800b08c:	e015      	b.n	800b0ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b094:	f003 0302 	and.w	r3, r3, #2
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d103      	bne.n	800b0a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b09e:	f000 fbdf 	bl	800b860 <vPortFree>
 800b0a2:	e00a      	b.n	800b0ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0aa:	f023 0301 	bic.w	r3, r3, #1
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b0b6:	e000      	b.n	800b0ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b0b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0ba:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <prvProcessReceivedCommands+0x1c0>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	1d39      	adds	r1, r7, #4
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fbec 	bl	80098a0 <xQueueReceive>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f47f af2a 	bne.w	800af24 <prvProcessReceivedCommands+0x8>
	}
}
 800b0d0:	bf00      	nop
 800b0d2:	bf00      	nop
 800b0d4:	3730      	adds	r7, #48	; 0x30
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20000fb8 	.word	0x20000fb8

0800b0e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0e6:	e048      	b.n	800b17a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0e8:	4b2d      	ldr	r3, [pc, #180]	; (800b1a0 <prvSwitchTimerLists+0xc0>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f2:	4b2b      	ldr	r3, [pc, #172]	; (800b1a0 <prvSwitchTimerLists+0xc0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe f905 	bl	8009310 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d02e      	beq.n	800b17a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4413      	add	r3, r2
 800b124:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d90e      	bls.n	800b14c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b13a:	4b19      	ldr	r3, [pc, #100]	; (800b1a0 <prvSwitchTimerLists+0xc0>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3304      	adds	r3, #4
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fe f8aa 	bl	800929e <vListInsert>
 800b14a:	e016      	b.n	800b17a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b14c:	2300      	movs	r3, #0
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	2300      	movs	r3, #0
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	2100      	movs	r1, #0
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7ff fd60 	bl	800ac1c <xTimerGenericCommand>
 800b15c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	603b      	str	r3, [r7, #0]
}
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b17a:	4b09      	ldr	r3, [pc, #36]	; (800b1a0 <prvSwitchTimerLists+0xc0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1b1      	bne.n	800b0e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b184:	4b06      	ldr	r3, [pc, #24]	; (800b1a0 <prvSwitchTimerLists+0xc0>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b18a:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a04      	ldr	r2, [pc, #16]	; (800b1a0 <prvSwitchTimerLists+0xc0>)
 800b190:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b192:	4a04      	ldr	r2, [pc, #16]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	6013      	str	r3, [r2, #0]
}
 800b198:	bf00      	nop
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20000fb0 	.word	0x20000fb0
 800b1a4:	20000fb4 	.word	0x20000fb4

0800b1a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1ae:	f000 f969 	bl	800b484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <prvCheckForValidListAndQueue+0x60>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d120      	bne.n	800b1fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1ba:	4814      	ldr	r0, [pc, #80]	; (800b20c <prvCheckForValidListAndQueue+0x64>)
 800b1bc:	f7fe f81e 	bl	80091fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1c0:	4813      	ldr	r0, [pc, #76]	; (800b210 <prvCheckForValidListAndQueue+0x68>)
 800b1c2:	f7fe f81b 	bl	80091fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1c6:	4b13      	ldr	r3, [pc, #76]	; (800b214 <prvCheckForValidListAndQueue+0x6c>)
 800b1c8:	4a10      	ldr	r2, [pc, #64]	; (800b20c <prvCheckForValidListAndQueue+0x64>)
 800b1ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1cc:	4b12      	ldr	r3, [pc, #72]	; (800b218 <prvCheckForValidListAndQueue+0x70>)
 800b1ce:	4a10      	ldr	r2, [pc, #64]	; (800b210 <prvCheckForValidListAndQueue+0x68>)
 800b1d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	4b11      	ldr	r3, [pc, #68]	; (800b21c <prvCheckForValidListAndQueue+0x74>)
 800b1d8:	4a11      	ldr	r2, [pc, #68]	; (800b220 <prvCheckForValidListAndQueue+0x78>)
 800b1da:	2110      	movs	r1, #16
 800b1dc:	200a      	movs	r0, #10
 800b1de:	f7fe f929 	bl	8009434 <xQueueGenericCreateStatic>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4a08      	ldr	r2, [pc, #32]	; (800b208 <prvCheckForValidListAndQueue+0x60>)
 800b1e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1e8:	4b07      	ldr	r3, [pc, #28]	; (800b208 <prvCheckForValidListAndQueue+0x60>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <prvCheckForValidListAndQueue+0x60>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	490b      	ldr	r1, [pc, #44]	; (800b224 <prvCheckForValidListAndQueue+0x7c>)
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe fd42 	bl	8009c80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1fc:	f000 f972 	bl	800b4e4 <vPortExitCritical>
}
 800b200:	bf00      	nop
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000fb8 	.word	0x20000fb8
 800b20c:	20000f88 	.word	0x20000f88
 800b210:	20000f9c 	.word	0x20000f9c
 800b214:	20000fb0 	.word	0x20000fb0
 800b218:	20000fb4 	.word	0x20000fb4
 800b21c:	20001064 	.word	0x20001064
 800b220:	20000fc4 	.word	0x20000fc4
 800b224:	0800d190 	.word	0x0800d190

0800b228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3b04      	subs	r3, #4
 800b238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	3b04      	subs	r3, #4
 800b246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	f023 0201 	bic.w	r2, r3, #1
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3b04      	subs	r3, #4
 800b256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b258:	4a0c      	ldr	r2, [pc, #48]	; (800b28c <pxPortInitialiseStack+0x64>)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3b14      	subs	r3, #20
 800b262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3b04      	subs	r3, #4
 800b26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f06f 0202 	mvn.w	r2, #2
 800b276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3b20      	subs	r3, #32
 800b27c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b27e:	68fb      	ldr	r3, [r7, #12]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	0800b291 	.word	0x0800b291

0800b290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b29a:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <prvTaskExitError+0x54>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a2:	d00a      	beq.n	800b2ba <prvTaskExitError+0x2a>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	60fb      	str	r3, [r7, #12]
}
 800b2b6:	bf00      	nop
 800b2b8:	e7fe      	b.n	800b2b8 <prvTaskExitError+0x28>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	60bb      	str	r3, [r7, #8]
}
 800b2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2ce:	bf00      	nop
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0fc      	beq.n	800b2d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	20000098 	.word	0x20000098
	...

0800b2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <pxCurrentTCBConst2>)
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	f380 8809 	msr	PSP, r0
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f04f 0000 	mov.w	r0, #0
 800b306:	f380 8811 	msr	BASEPRI, r0
 800b30a:	4770      	bx	lr
 800b30c:	f3af 8000 	nop.w

0800b310 <pxCurrentTCBConst2>:
 800b310:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop

0800b318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b318:	4808      	ldr	r0, [pc, #32]	; (800b33c <prvPortStartFirstTask+0x24>)
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	6800      	ldr	r0, [r0, #0]
 800b31e:	f380 8808 	msr	MSP, r0
 800b322:	f04f 0000 	mov.w	r0, #0
 800b326:	f380 8814 	msr	CONTROL, r0
 800b32a:	b662      	cpsie	i
 800b32c:	b661      	cpsie	f
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	df00      	svc	0
 800b338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b33a:	bf00      	nop
 800b33c:	e000ed08 	.word	0xe000ed08

0800b340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b346:	4b46      	ldr	r3, [pc, #280]	; (800b460 <xPortStartScheduler+0x120>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a46      	ldr	r2, [pc, #280]	; (800b464 <xPortStartScheduler+0x124>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d10a      	bne.n	800b366 <xPortStartScheduler+0x26>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	613b      	str	r3, [r7, #16]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b366:	4b3e      	ldr	r3, [pc, #248]	; (800b460 <xPortStartScheduler+0x120>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a3f      	ldr	r2, [pc, #252]	; (800b468 <xPortStartScheduler+0x128>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10a      	bne.n	800b386 <xPortStartScheduler+0x46>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	60fb      	str	r3, [r7, #12]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b386:	4b39      	ldr	r3, [pc, #228]	; (800b46c <xPortStartScheduler+0x12c>)
 800b388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3a0:	78fb      	ldrb	r3, [r7, #3]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b31      	ldr	r3, [pc, #196]	; (800b470 <xPortStartScheduler+0x130>)
 800b3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3ae:	4b31      	ldr	r3, [pc, #196]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b0:	2207      	movs	r2, #7
 800b3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3b4:	e009      	b.n	800b3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3b6:	4b2f      	ldr	r3, [pc, #188]	; (800b474 <xPortStartScheduler+0x134>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4a2d      	ldr	r2, [pc, #180]	; (800b474 <xPortStartScheduler+0x134>)
 800b3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3c0:	78fb      	ldrb	r3, [r7, #3]
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	2b80      	cmp	r3, #128	; 0x80
 800b3d4:	d0ef      	beq.n	800b3b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3d6:	4b27      	ldr	r3, [pc, #156]	; (800b474 <xPortStartScheduler+0x134>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f1c3 0307 	rsb	r3, r3, #7
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d00a      	beq.n	800b3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60bb      	str	r3, [r7, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	; (800b474 <xPortStartScheduler+0x134>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	021b      	lsls	r3, r3, #8
 800b3fe:	4a1d      	ldr	r2, [pc, #116]	; (800b474 <xPortStartScheduler+0x134>)
 800b400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b402:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <xPortStartScheduler+0x134>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b40a:	4a1a      	ldr	r2, [pc, #104]	; (800b474 <xPortStartScheduler+0x134>)
 800b40c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	b2da      	uxtb	r2, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b416:	4b18      	ldr	r3, [pc, #96]	; (800b478 <xPortStartScheduler+0x138>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a17      	ldr	r2, [pc, #92]	; (800b478 <xPortStartScheduler+0x138>)
 800b41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b422:	4b15      	ldr	r3, [pc, #84]	; (800b478 <xPortStartScheduler+0x138>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <xPortStartScheduler+0x138>)
 800b428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b42c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b42e:	f000 f8dd 	bl	800b5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <xPortStartScheduler+0x13c>)
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b438:	f000 f8fc 	bl	800b634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b43c:	4b10      	ldr	r3, [pc, #64]	; (800b480 <xPortStartScheduler+0x140>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a0f      	ldr	r2, [pc, #60]	; (800b480 <xPortStartScheduler+0x140>)
 800b442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b448:	f7ff ff66 	bl	800b318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b44c:	f7ff f848 	bl	800a4e0 <vTaskSwitchContext>
	prvTaskExitError();
 800b450:	f7ff ff1e 	bl	800b290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	e000ed00 	.word	0xe000ed00
 800b464:	410fc271 	.word	0x410fc271
 800b468:	410fc270 	.word	0x410fc270
 800b46c:	e000e400 	.word	0xe000e400
 800b470:	200010b4 	.word	0x200010b4
 800b474:	200010b8 	.word	0x200010b8
 800b478:	e000ed20 	.word	0xe000ed20
 800b47c:	20000098 	.word	0x20000098
 800b480:	e000ef34 	.word	0xe000ef34

0800b484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	607b      	str	r3, [r7, #4]
}
 800b49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b49e:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4a0d      	ldr	r2, [pc, #52]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <vPortEnterCritical+0x58>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d10f      	bne.n	800b4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <vPortEnterCritical+0x5c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	603b      	str	r3, [r7, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	e7fe      	b.n	800b4ce <vPortEnterCritical+0x4a>
	}
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	20000098 	.word	0x20000098
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4ea:	4b12      	ldr	r3, [pc, #72]	; (800b534 <vPortExitCritical+0x50>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10a      	bne.n	800b508 <vPortExitCritical+0x24>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	607b      	str	r3, [r7, #4]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b508:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <vPortExitCritical+0x50>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <vPortExitCritical+0x50>)
 800b510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b512:	4b08      	ldr	r3, [pc, #32]	; (800b534 <vPortExitCritical+0x50>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d105      	bne.n	800b526 <vPortExitCritical+0x42>
 800b51a:	2300      	movs	r3, #0
 800b51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	f383 8811 	msr	BASEPRI, r3
}
 800b524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000098 	.word	0x20000098
	...

0800b540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b540:	f3ef 8009 	mrs	r0, PSP
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <pxCurrentTCBConst>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f01e 0f10 	tst.w	lr, #16
 800b550:	bf08      	it	eq
 800b552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	6010      	str	r0, [r2, #0]
 800b55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b564:	f380 8811 	msr	BASEPRI, r0
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f7fe ffb6 	bl	800a4e0 <vTaskSwitchContext>
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f380 8811 	msr	BASEPRI, r0
 800b57c:	bc09      	pop	{r0, r3}
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6808      	ldr	r0, [r1, #0]
 800b582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b586:	f01e 0f10 	tst.w	lr, #16
 800b58a:	bf08      	it	eq
 800b58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b590:	f380 8809 	msr	PSP, r0
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <pxCurrentTCBConst>:
 800b5a0:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	607b      	str	r3, [r7, #4]
}
 800b5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5c2:	f7fe fed3 	bl	800a36c <xTaskIncrementTick>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5cc:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <xPortSysTickHandler+0x40>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f383 8811 	msr	BASEPRI, r3
}
 800b5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5f0:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <vPortSetupTimerInterrupt+0x38>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <vPortSetupTimerInterrupt+0x3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a0a      	ldr	r2, [pc, #40]	; (800b62c <vPortSetupTimerInterrupt+0x40>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	099b      	lsrs	r3, r3, #6
 800b608:	4a09      	ldr	r2, [pc, #36]	; (800b630 <vPortSetupTimerInterrupt+0x44>)
 800b60a:	3b01      	subs	r3, #1
 800b60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b60e:	4b04      	ldr	r3, [pc, #16]	; (800b620 <vPortSetupTimerInterrupt+0x34>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
}
 800b614:	bf00      	nop
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	e000e010 	.word	0xe000e010
 800b624:	e000e018 	.word	0xe000e018
 800b628:	20000000 	.word	0x20000000
 800b62c:	10624dd3 	.word	0x10624dd3
 800b630:	e000e014 	.word	0xe000e014

0800b634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b644 <vPortEnableVFP+0x10>
 800b638:	6801      	ldr	r1, [r0, #0]
 800b63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b63e:	6001      	str	r1, [r0, #0]
 800b640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b642:	bf00      	nop
 800b644:	e000ed88 	.word	0xe000ed88

0800b648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b64e:	f3ef 8305 	mrs	r3, IPSR
 800b652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b0f      	cmp	r3, #15
 800b658:	d914      	bls.n	800b684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <vPortValidateInterruptPriority+0x70>)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b664:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <vPortValidateInterruptPriority+0x74>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d20a      	bcs.n	800b684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	607b      	str	r3, [r7, #4]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b684:	4b0e      	ldr	r3, [pc, #56]	; (800b6c0 <vPortValidateInterruptPriority+0x78>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <vPortValidateInterruptPriority+0x7c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d90a      	bls.n	800b6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	603b      	str	r3, [r7, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <vPortValidateInterruptPriority+0x60>
	}
 800b6aa:	bf00      	nop
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	e000e3f0 	.word	0xe000e3f0
 800b6bc:	200010b4 	.word	0x200010b4
 800b6c0:	e000ed0c 	.word	0xe000ed0c
 800b6c4:	200010b8 	.word	0x200010b8

0800b6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6d4:	f7fe fd8e 	bl	800a1f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6d8:	4b5b      	ldr	r3, [pc, #364]	; (800b848 <pvPortMalloc+0x180>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6e0:	f000 f920 	bl	800b924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6e4:	4b59      	ldr	r3, [pc, #356]	; (800b84c <pvPortMalloc+0x184>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f040 8093 	bne.w	800b818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01d      	beq.n	800b734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2b00      	cmp	r3, #0
 800b708:	d014      	beq.n	800b734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f023 0307 	bic.w	r3, r3, #7
 800b710:	3308      	adds	r3, #8
 800b712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00a      	beq.n	800b734 <pvPortMalloc+0x6c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	617b      	str	r3, [r7, #20]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d06e      	beq.n	800b818 <pvPortMalloc+0x150>
 800b73a:	4b45      	ldr	r3, [pc, #276]	; (800b850 <pvPortMalloc+0x188>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d869      	bhi.n	800b818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b744:	4b43      	ldr	r3, [pc, #268]	; (800b854 <pvPortMalloc+0x18c>)
 800b746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b748:	4b42      	ldr	r3, [pc, #264]	; (800b854 <pvPortMalloc+0x18c>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b74e:	e004      	b.n	800b75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	d903      	bls.n	800b76c <pvPortMalloc+0xa4>
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1f1      	bne.n	800b750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b76c:	4b36      	ldr	r3, [pc, #216]	; (800b848 <pvPortMalloc+0x180>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b772:	429a      	cmp	r2, r3
 800b774:	d050      	beq.n	800b818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2208      	movs	r2, #8
 800b77c:	4413      	add	r3, r2
 800b77e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	6a3b      	ldr	r3, [r7, #32]
 800b786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	2308      	movs	r3, #8
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	d91f      	bls.n	800b7d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	613b      	str	r3, [r7, #16]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	1ad2      	subs	r2, r2, r3
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7d2:	69b8      	ldr	r0, [r7, #24]
 800b7d4:	f000 f908 	bl	800b9e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7d8:	4b1d      	ldr	r3, [pc, #116]	; (800b850 <pvPortMalloc+0x188>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	4a1b      	ldr	r2, [pc, #108]	; (800b850 <pvPortMalloc+0x188>)
 800b7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7e6:	4b1a      	ldr	r3, [pc, #104]	; (800b850 <pvPortMalloc+0x188>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <pvPortMalloc+0x190>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d203      	bcs.n	800b7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7f2:	4b17      	ldr	r3, [pc, #92]	; (800b850 <pvPortMalloc+0x188>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a18      	ldr	r2, [pc, #96]	; (800b858 <pvPortMalloc+0x190>)
 800b7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	4b13      	ldr	r3, [pc, #76]	; (800b84c <pvPortMalloc+0x184>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	431a      	orrs	r2, r3
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b80e:	4b13      	ldr	r3, [pc, #76]	; (800b85c <pvPortMalloc+0x194>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	4a11      	ldr	r2, [pc, #68]	; (800b85c <pvPortMalloc+0x194>)
 800b816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b818:	f7fe fcfa 	bl	800a210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <pvPortMalloc+0x174>
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	60fb      	str	r3, [r7, #12]
}
 800b838:	bf00      	nop
 800b83a:	e7fe      	b.n	800b83a <pvPortMalloc+0x172>
	return pvReturn;
 800b83c:	69fb      	ldr	r3, [r7, #28]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3728      	adds	r7, #40	; 0x28
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20004cc4 	.word	0x20004cc4
 800b84c:	20004cd8 	.word	0x20004cd8
 800b850:	20004cc8 	.word	0x20004cc8
 800b854:	20004cbc 	.word	0x20004cbc
 800b858:	20004ccc 	.word	0x20004ccc
 800b85c:	20004cd0 	.word	0x20004cd0

0800b860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d04d      	beq.n	800b90e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b872:	2308      	movs	r3, #8
 800b874:	425b      	negs	r3, r3
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	4413      	add	r3, r2
 800b87a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	685a      	ldr	r2, [r3, #4]
 800b884:	4b24      	ldr	r3, [pc, #144]	; (800b918 <vPortFree+0xb8>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4013      	ands	r3, r2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <vPortFree+0x44>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	60fb      	str	r3, [r7, #12]
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00a      	beq.n	800b8c2 <vPortFree+0x62>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	60bb      	str	r3, [r7, #8]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	4b14      	ldr	r3, [pc, #80]	; (800b918 <vPortFree+0xb8>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d01e      	beq.n	800b90e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d11a      	bne.n	800b90e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <vPortFree+0xb8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	401a      	ands	r2, r3
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8e8:	f7fe fc84 	bl	800a1f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <vPortFree+0xbc>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	4a09      	ldr	r2, [pc, #36]	; (800b91c <vPortFree+0xbc>)
 800b8f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8fa:	6938      	ldr	r0, [r7, #16]
 800b8fc:	f000 f874 	bl	800b9e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b900:	4b07      	ldr	r3, [pc, #28]	; (800b920 <vPortFree+0xc0>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3301      	adds	r3, #1
 800b906:	4a06      	ldr	r2, [pc, #24]	; (800b920 <vPortFree+0xc0>)
 800b908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b90a:	f7fe fc81 	bl	800a210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b90e:	bf00      	nop
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20004cd8 	.word	0x20004cd8
 800b91c:	20004cc8 	.word	0x20004cc8
 800b920:	20004cd4 	.word	0x20004cd4

0800b924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b92a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b930:	4b27      	ldr	r3, [pc, #156]	; (800b9d0 <prvHeapInit+0xac>)
 800b932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f003 0307 	and.w	r3, r3, #7
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00c      	beq.n	800b958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3307      	adds	r3, #7
 800b942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f023 0307 	bic.w	r3, r3, #7
 800b94a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	4a1f      	ldr	r2, [pc, #124]	; (800b9d0 <prvHeapInit+0xac>)
 800b954:	4413      	add	r3, r2
 800b956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b95c:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <prvHeapInit+0xb0>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b962:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <prvHeapInit+0xb0>)
 800b964:	2200      	movs	r2, #0
 800b966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	4413      	add	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b970:	2208      	movs	r2, #8
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	1a9b      	subs	r3, r3, r2
 800b976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f023 0307 	bic.w	r3, r3, #7
 800b97e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <prvHeapInit+0xb4>)
 800b984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b986:	4b14      	ldr	r3, [pc, #80]	; (800b9d8 <prvHeapInit+0xb4>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2200      	movs	r2, #0
 800b98c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b98e:	4b12      	ldr	r3, [pc, #72]	; (800b9d8 <prvHeapInit+0xb4>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	1ad2      	subs	r2, r2, r3
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9a4:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <prvHeapInit+0xb4>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	4a0a      	ldr	r2, [pc, #40]	; (800b9dc <prvHeapInit+0xb8>)
 800b9b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	4a09      	ldr	r2, [pc, #36]	; (800b9e0 <prvHeapInit+0xbc>)
 800b9ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9bc:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <prvHeapInit+0xc0>)
 800b9be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9c2:	601a      	str	r2, [r3, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	200010bc 	.word	0x200010bc
 800b9d4:	20004cbc 	.word	0x20004cbc
 800b9d8:	20004cc4 	.word	0x20004cc4
 800b9dc:	20004ccc 	.word	0x20004ccc
 800b9e0:	20004cc8 	.word	0x20004cc8
 800b9e4:	20004cd8 	.word	0x20004cd8

0800b9e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9f0:	4b28      	ldr	r3, [pc, #160]	; (800ba94 <prvInsertBlockIntoFreeList+0xac>)
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e002      	b.n	800b9fc <prvInsertBlockIntoFreeList+0x14>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d8f7      	bhi.n	800b9f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	4413      	add	r3, r2
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d108      	bne.n	800ba2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	441a      	add	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	441a      	add	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d118      	bne.n	800ba70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	4b15      	ldr	r3, [pc, #84]	; (800ba98 <prvInsertBlockIntoFreeList+0xb0>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d00d      	beq.n	800ba66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	441a      	add	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	e008      	b.n	800ba78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba66:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <prvInsertBlockIntoFreeList+0xb0>)
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	e003      	b.n	800ba78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d002      	beq.n	800ba86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba86:	bf00      	nop
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	20004cbc 	.word	0x20004cbc
 800ba98:	20004cc4 	.word	0x20004cc4

0800ba9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baa0:	2200      	movs	r2, #0
 800baa2:	4912      	ldr	r1, [pc, #72]	; (800baec <MX_USB_DEVICE_Init+0x50>)
 800baa4:	4812      	ldr	r0, [pc, #72]	; (800baf0 <MX_USB_DEVICE_Init+0x54>)
 800baa6:	f7fb ff47 	bl	8007938 <USBD_Init>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bab0:	f7f5 fbc2 	bl	8001238 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bab4:	490f      	ldr	r1, [pc, #60]	; (800baf4 <MX_USB_DEVICE_Init+0x58>)
 800bab6:	480e      	ldr	r0, [pc, #56]	; (800baf0 <MX_USB_DEVICE_Init+0x54>)
 800bab8:	f7fb ff6e 	bl	8007998 <USBD_RegisterClass>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bac2:	f7f5 fbb9 	bl	8001238 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bac6:	490c      	ldr	r1, [pc, #48]	; (800baf8 <MX_USB_DEVICE_Init+0x5c>)
 800bac8:	4809      	ldr	r0, [pc, #36]	; (800baf0 <MX_USB_DEVICE_Init+0x54>)
 800baca:	f7fb fe5f 	bl	800778c <USBD_CDC_RegisterInterface>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bad4:	f7f5 fbb0 	bl	8001238 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bad8:	4805      	ldr	r0, [pc, #20]	; (800baf0 <MX_USB_DEVICE_Init+0x54>)
 800bada:	f7fb ff93 	bl	8007a04 <USBD_Start>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bae4:	f7f5 fba8 	bl	8001238 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bae8:	bf00      	nop
 800baea:	bd80      	pop	{r7, pc}
 800baec:	200000b0 	.word	0x200000b0
 800baf0:	20004cdc 	.word	0x20004cdc
 800baf4:	20000018 	.word	0x20000018
 800baf8:	2000009c 	.word	0x2000009c

0800bafc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb00:	2200      	movs	r2, #0
 800bb02:	4905      	ldr	r1, [pc, #20]	; (800bb18 <CDC_Init_FS+0x1c>)
 800bb04:	4805      	ldr	r0, [pc, #20]	; (800bb1c <CDC_Init_FS+0x20>)
 800bb06:	f7fb fe5b 	bl	80077c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb0a:	4905      	ldr	r1, [pc, #20]	; (800bb20 <CDC_Init_FS+0x24>)
 800bb0c:	4803      	ldr	r0, [pc, #12]	; (800bb1c <CDC_Init_FS+0x20>)
 800bb0e:	f7fb fe79 	bl	8007804 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	200053a0 	.word	0x200053a0
 800bb1c:	20004cdc 	.word	0x20004cdc
 800bb20:	20004fb8 	.word	0x20004fb8

0800bb24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	71fb      	strb	r3, [r7, #7]
 800bb40:	4613      	mov	r3, r2
 800bb42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb44:	79fb      	ldrb	r3, [r7, #7]
 800bb46:	2b23      	cmp	r3, #35	; 0x23
 800bb48:	d84a      	bhi.n	800bbe0 <CDC_Control_FS+0xac>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <CDC_Control_FS+0x1c>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bbe1 	.word	0x0800bbe1
 800bb54:	0800bbe1 	.word	0x0800bbe1
 800bb58:	0800bbe1 	.word	0x0800bbe1
 800bb5c:	0800bbe1 	.word	0x0800bbe1
 800bb60:	0800bbe1 	.word	0x0800bbe1
 800bb64:	0800bbe1 	.word	0x0800bbe1
 800bb68:	0800bbe1 	.word	0x0800bbe1
 800bb6c:	0800bbe1 	.word	0x0800bbe1
 800bb70:	0800bbe1 	.word	0x0800bbe1
 800bb74:	0800bbe1 	.word	0x0800bbe1
 800bb78:	0800bbe1 	.word	0x0800bbe1
 800bb7c:	0800bbe1 	.word	0x0800bbe1
 800bb80:	0800bbe1 	.word	0x0800bbe1
 800bb84:	0800bbe1 	.word	0x0800bbe1
 800bb88:	0800bbe1 	.word	0x0800bbe1
 800bb8c:	0800bbe1 	.word	0x0800bbe1
 800bb90:	0800bbe1 	.word	0x0800bbe1
 800bb94:	0800bbe1 	.word	0x0800bbe1
 800bb98:	0800bbe1 	.word	0x0800bbe1
 800bb9c:	0800bbe1 	.word	0x0800bbe1
 800bba0:	0800bbe1 	.word	0x0800bbe1
 800bba4:	0800bbe1 	.word	0x0800bbe1
 800bba8:	0800bbe1 	.word	0x0800bbe1
 800bbac:	0800bbe1 	.word	0x0800bbe1
 800bbb0:	0800bbe1 	.word	0x0800bbe1
 800bbb4:	0800bbe1 	.word	0x0800bbe1
 800bbb8:	0800bbe1 	.word	0x0800bbe1
 800bbbc:	0800bbe1 	.word	0x0800bbe1
 800bbc0:	0800bbe1 	.word	0x0800bbe1
 800bbc4:	0800bbe1 	.word	0x0800bbe1
 800bbc8:	0800bbe1 	.word	0x0800bbe1
 800bbcc:	0800bbe1 	.word	0x0800bbe1
 800bbd0:	0800bbe1 	.word	0x0800bbe1
 800bbd4:	0800bbe1 	.word	0x0800bbe1
 800bbd8:	0800bbe1 	.word	0x0800bbe1
 800bbdc:	0800bbe1 	.word	0x0800bbe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbe0:	bf00      	nop
  }

  return (USBD_OK);
 800bbe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	4808      	ldr	r0, [pc, #32]	; (800bc20 <CDC_Receive_FS+0x30>)
 800bbfe:	f7fb fe01 	bl	8007804 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc02:	4807      	ldr	r0, [pc, #28]	; (800bc20 <CDC_Receive_FS+0x30>)
 800bc04:	f7fb fe62 	bl	80078cc <USBD_CDC_ReceivePacket>
  usb_rx_handler(Buf, *Len);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fd58 	bl	800c6c4 <usb_rx_handler>
  return (USBD_OK);
 800bc14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20004cdc 	.word	0x20004cdc

0800bc24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc34:	4b0d      	ldr	r3, [pc, #52]	; (800bc6c <CDC_Transmit_FS+0x48>)
 800bc36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e00b      	b.n	800bc62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc4a:	887b      	ldrh	r3, [r7, #2]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	4806      	ldr	r0, [pc, #24]	; (800bc6c <CDC_Transmit_FS+0x48>)
 800bc52:	f7fb fdb5 	bl	80077c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc56:	4805      	ldr	r0, [pc, #20]	; (800bc6c <CDC_Transmit_FS+0x48>)
 800bc58:	f7fb fdf2 	bl	8007840 <USBD_CDC_TransmitPacket>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20004cdc 	.word	0x20004cdc

0800bc70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	371c      	adds	r7, #28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
	...

0800bc94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6039      	str	r1, [r7, #0]
 800bc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2212      	movs	r2, #18
 800bca4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bca6:	4b03      	ldr	r3, [pc, #12]	; (800bcb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	200000cc 	.word	0x200000cc

0800bcb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	6039      	str	r1, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2204      	movs	r2, #4
 800bcc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcca:	4b03      	ldr	r3, [pc, #12]	; (800bcd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	200000e0 	.word	0x200000e0

0800bcdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	6039      	str	r1, [r7, #0]
 800bce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bce8:	79fb      	ldrb	r3, [r7, #7]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d105      	bne.n	800bcfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	4907      	ldr	r1, [pc, #28]	; (800bd10 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcf2:	4808      	ldr	r0, [pc, #32]	; (800bd14 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcf4:	f7fd f832 	bl	8008d5c <USBD_GetString>
 800bcf8:	e004      	b.n	800bd04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4904      	ldr	r1, [pc, #16]	; (800bd10 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcfe:	4805      	ldr	r0, [pc, #20]	; (800bd14 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd00:	f7fd f82c 	bl	8008d5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	20005788 	.word	0x20005788
 800bd14:	0800d198 	.word	0x0800d198

0800bd18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	4904      	ldr	r1, [pc, #16]	; (800bd38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd28:	4804      	ldr	r0, [pc, #16]	; (800bd3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd2a:	f7fd f817 	bl	8008d5c <USBD_GetString>
  return USBD_StrDesc;
 800bd2e:	4b02      	ldr	r3, [pc, #8]	; (800bd38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20005788 	.word	0x20005788
 800bd3c:	0800d1b0 	.word	0x0800d1b0

0800bd40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	6039      	str	r1, [r7, #0]
 800bd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	221a      	movs	r2, #26
 800bd50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd52:	f000 f843 	bl	800bddc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd56:	4b02      	ldr	r3, [pc, #8]	; (800bd60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	200000e4 	.word	0x200000e4

0800bd64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	6039      	str	r1, [r7, #0]
 800bd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d105      	bne.n	800bd82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	4907      	ldr	r1, [pc, #28]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd7a:	4808      	ldr	r0, [pc, #32]	; (800bd9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd7c:	f7fc ffee 	bl	8008d5c <USBD_GetString>
 800bd80:	e004      	b.n	800bd8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	4904      	ldr	r1, [pc, #16]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd86:	4805      	ldr	r0, [pc, #20]	; (800bd9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd88:	f7fc ffe8 	bl	8008d5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd8c:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20005788 	.word	0x20005788
 800bd9c:	0800d1c4 	.word	0x0800d1c4

0800bda0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d105      	bne.n	800bdbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	4907      	ldr	r1, [pc, #28]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdb6:	4808      	ldr	r0, [pc, #32]	; (800bdd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdb8:	f7fc ffd0 	bl	8008d5c <USBD_GetString>
 800bdbc:	e004      	b.n	800bdc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4904      	ldr	r1, [pc, #16]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdc2:	4805      	ldr	r0, [pc, #20]	; (800bdd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdc4:	f7fc ffca 	bl	8008d5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdc8:	4b02      	ldr	r3, [pc, #8]	; (800bdd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20005788 	.word	0x20005788
 800bdd8:	0800d1d0 	.word	0x0800d1d0

0800bddc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bde2:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <Get_SerialNum+0x44>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bde8:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <Get_SerialNum+0x48>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdee:	4b0e      	ldr	r3, [pc, #56]	; (800be28 <Get_SerialNum+0x4c>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d009      	beq.n	800be16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be02:	2208      	movs	r2, #8
 800be04:	4909      	ldr	r1, [pc, #36]	; (800be2c <Get_SerialNum+0x50>)
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f814 	bl	800be34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be0c:	2204      	movs	r2, #4
 800be0e:	4908      	ldr	r1, [pc, #32]	; (800be30 <Get_SerialNum+0x54>)
 800be10:	68b8      	ldr	r0, [r7, #8]
 800be12:	f000 f80f 	bl	800be34 <IntToUnicode>
  }
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	1fff7a10 	.word	0x1fff7a10
 800be24:	1fff7a14 	.word	0x1fff7a14
 800be28:	1fff7a18 	.word	0x1fff7a18
 800be2c:	200000e6 	.word	0x200000e6
 800be30:	200000f6 	.word	0x200000f6

0800be34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be34:	b480      	push	{r7}
 800be36:	b087      	sub	sp, #28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	4613      	mov	r3, r2
 800be40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be46:	2300      	movs	r3, #0
 800be48:	75fb      	strb	r3, [r7, #23]
 800be4a:	e027      	b.n	800be9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	0f1b      	lsrs	r3, r3, #28
 800be50:	2b09      	cmp	r3, #9
 800be52:	d80b      	bhi.n	800be6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	0f1b      	lsrs	r3, r3, #28
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	4619      	mov	r1, r3
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	440b      	add	r3, r1
 800be64:	3230      	adds	r2, #48	; 0x30
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	e00a      	b.n	800be82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	0f1b      	lsrs	r3, r3, #28
 800be70:	b2da      	uxtb	r2, r3
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	4619      	mov	r1, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	440b      	add	r3, r1
 800be7c:	3237      	adds	r2, #55	; 0x37
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	011b      	lsls	r3, r3, #4
 800be86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	3301      	adds	r3, #1
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	4413      	add	r3, r2
 800be92:	2200      	movs	r2, #0
 800be94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	3301      	adds	r3, #1
 800be9a:	75fb      	strb	r3, [r7, #23]
 800be9c:	7dfa      	ldrb	r2, [r7, #23]
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d3d3      	bcc.n	800be4c <IntToUnicode+0x18>
  }
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
	...

0800beb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bebc:	f107 0314 	add.w	r3, r7, #20
 800bec0:	2200      	movs	r2, #0
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	605a      	str	r2, [r3, #4]
 800bec6:	609a      	str	r2, [r3, #8]
 800bec8:	60da      	str	r2, [r3, #12]
 800beca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bed4:	d13a      	bne.n	800bf4c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bed6:	2300      	movs	r3, #0
 800bed8:	613b      	str	r3, [r7, #16]
 800beda:	4b1e      	ldr	r3, [pc, #120]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bede:	4a1d      	ldr	r2, [pc, #116]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bee0:	f043 0301 	orr.w	r3, r3, #1
 800bee4:	6313      	str	r3, [r2, #48]	; 0x30
 800bee6:	4b1b      	ldr	r3, [pc, #108]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	613b      	str	r3, [r7, #16]
 800bef0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef8:	2302      	movs	r3, #2
 800befa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800befc:	2300      	movs	r3, #0
 800befe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf00:	2303      	movs	r3, #3
 800bf02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf04:	230a      	movs	r3, #10
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf08:	f107 0314 	add.w	r3, r7, #20
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4812      	ldr	r0, [pc, #72]	; (800bf58 <HAL_PCD_MspInit+0xa4>)
 800bf10:	f7f6 f82c 	bl	8001f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf14:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf18:	4a0e      	ldr	r2, [pc, #56]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf1e:	6353      	str	r3, [r2, #52]	; 0x34
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	4b0b      	ldr	r3, [pc, #44]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf28:	4a0a      	ldr	r2, [pc, #40]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf2e:	6453      	str	r3, [r2, #68]	; 0x44
 800bf30:	4b08      	ldr	r3, [pc, #32]	; (800bf54 <HAL_PCD_MspInit+0xa0>)
 800bf32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2105      	movs	r1, #5
 800bf40:	2043      	movs	r0, #67	; 0x43
 800bf42:	f7f5 fc57 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf46:	2043      	movs	r0, #67	; 0x43
 800bf48:	f7f5 fc70 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf4c:	bf00      	nop
 800bf4e:	3728      	adds	r7, #40	; 0x28
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	40023800 	.word	0x40023800
 800bf58:	40020000 	.word	0x40020000

0800bf5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7fb fd93 	bl	8007a9e <USBD_LL_SetupStage>
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf92:	78fa      	ldrb	r2, [r7, #3]
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	4613      	mov	r3, r2
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	78fb      	ldrb	r3, [r7, #3]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	f7fb fdcd 	bl	8007b48 <USBD_LL_DataOutStage>
}
 800bfae:	bf00      	nop
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bfc8:	78fa      	ldrb	r2, [r7, #3]
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	4413      	add	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	440b      	add	r3, r1
 800bfd6:	334c      	adds	r3, #76	; 0x4c
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	78fb      	ldrb	r3, [r7, #3]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	f7fb fe66 	bl	8007cae <USBD_LL_DataInStage>
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fb ff9a 	bl	8007f32 <USBD_LL_SOF>
}
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c00e:	2301      	movs	r3, #1
 800c010:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	2b02      	cmp	r3, #2
 800c018:	d001      	beq.n	800c01e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c01a:	f7f5 f90d 	bl	8001238 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c024:	7bfa      	ldrb	r2, [r7, #15]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fb ff44 	bl	8007eb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c034:	4618      	mov	r0, r3
 800c036:	f7fb feec 	bl	8007e12 <USBD_LL_Reset>
}
 800c03a:	bf00      	nop
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c052:	4618      	mov	r0, r3
 800c054:	f7fb ff3f 	bl	8007ed6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	6812      	ldr	r2, [r2, #0]
 800c066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c06a:	f043 0301 	orr.w	r3, r3, #1
 800c06e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c078:	4b04      	ldr	r3, [pc, #16]	; (800c08c <HAL_PCD_SuspendCallback+0x48>)
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	4a03      	ldr	r2, [pc, #12]	; (800c08c <HAL_PCD_SuspendCallback+0x48>)
 800c07e:	f043 0306 	orr.w	r3, r3, #6
 800c082:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	e000ed00 	.word	0xe000ed00

0800c090 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fb ff2f 	bl	8007f02 <USBD_LL_Resume>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fb ff87 	bl	8007fd6 <USBD_LL_IsoOUTIncomplete>
}
 800c0c8:	bf00      	nop
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0e2:	78fa      	ldrb	r2, [r7, #3]
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fb ff43 	bl	8007f72 <USBD_LL_IsoINIncomplete>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c102:	4618      	mov	r0, r3
 800c104:	f7fb ff99 	bl	800803a <USBD_LL_DevConnected>
}
 800c108:	bf00      	nop
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fb ff96 	bl	8008050 <USBD_LL_DevDisconnected>
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d13c      	bne.n	800c1b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c13c:	4a20      	ldr	r2, [pc, #128]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a1e      	ldr	r2, [pc, #120]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c148:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c14c:	4b1c      	ldr	r3, [pc, #112]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c14e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c152:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c154:	4b1a      	ldr	r3, [pc, #104]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c156:	2204      	movs	r2, #4
 800c158:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c15a:	4b19      	ldr	r3, [pc, #100]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c15c:	2202      	movs	r2, #2
 800c15e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c160:	4b17      	ldr	r3, [pc, #92]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c162:	2200      	movs	r2, #0
 800c164:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c166:	4b16      	ldr	r3, [pc, #88]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c168:	2202      	movs	r2, #2
 800c16a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c16c:	4b14      	ldr	r3, [pc, #80]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c16e:	2200      	movs	r2, #0
 800c170:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c174:	2200      	movs	r2, #0
 800c176:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c178:	4b11      	ldr	r3, [pc, #68]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c17e:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c180:	2200      	movs	r2, #0
 800c182:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c184:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c186:	2200      	movs	r2, #0
 800c188:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c18a:	480d      	ldr	r0, [pc, #52]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c18c:	f7f6 f8d6 	bl	800233c <HAL_PCD_Init>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c196:	f7f5 f84f 	bl	8001238 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c19a:	2180      	movs	r1, #128	; 0x80
 800c19c:	4808      	ldr	r0, [pc, #32]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c19e:	f7f7 fb2e 	bl	80037fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c1a2:	2240      	movs	r2, #64	; 0x40
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	4806      	ldr	r0, [pc, #24]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c1a8:	f7f7 fae2 	bl	8003770 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1ac:	2280      	movs	r2, #128	; 0x80
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	4803      	ldr	r0, [pc, #12]	; (800c1c0 <USBD_LL_Init+0x94>)
 800c1b2:	f7f7 fadd 	bl	8003770 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20005988 	.word	0x20005988

0800c1c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7f6 f9cb 	bl	8002576 <HAL_PCD_Start>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f942 	bl	800c470 <USBD_Get_USB_Status>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	4608      	mov	r0, r1
 800c204:	4611      	mov	r1, r2
 800c206:	461a      	mov	r2, r3
 800c208:	4603      	mov	r3, r0
 800c20a:	70fb      	strb	r3, [r7, #3]
 800c20c:	460b      	mov	r3, r1
 800c20e:	70bb      	strb	r3, [r7, #2]
 800c210:	4613      	mov	r3, r2
 800c212:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c222:	78bb      	ldrb	r3, [r7, #2]
 800c224:	883a      	ldrh	r2, [r7, #0]
 800c226:	78f9      	ldrb	r1, [r7, #3]
 800c228:	f7f6 fe9c 	bl	8002f64 <HAL_PCD_EP_Open>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f91c 	bl	800c470 <USBD_Get_USB_Status>
 800c238:	4603      	mov	r3, r0
 800c23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	460b      	mov	r3, r1
 800c250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c260:	78fa      	ldrb	r2, [r7, #3]
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f7f6 fee5 	bl	8003034 <HAL_PCD_EP_Close>
 800c26a:	4603      	mov	r3, r0
 800c26c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
 800c270:	4618      	mov	r0, r3
 800c272:	f000 f8fd 	bl	800c470 <USBD_Get_USB_Status>
 800c276:	4603      	mov	r3, r0
 800c278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c29e:	78fa      	ldrb	r2, [r7, #3]
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f6 ffbd 	bl	8003222 <HAL_PCD_EP_SetStall>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 f8de 	bl	800c470 <USBD_Get_USB_Status>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2dc:	78fa      	ldrb	r2, [r7, #3]
 800c2de:	4611      	mov	r1, r2
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7f7 f802 	bl	80032ea <HAL_PCD_EP_ClrStall>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ea:	7bfb      	ldrb	r3, [r7, #15]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 f8bf 	bl	800c470 <USBD_Get_USB_Status>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c312:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	da0b      	bge.n	800c334 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c31c:	78fb      	ldrb	r3, [r7, #3]
 800c31e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c322:	68f9      	ldr	r1, [r7, #12]
 800c324:	4613      	mov	r3, r2
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	440b      	add	r3, r1
 800c32e:	333e      	adds	r3, #62	; 0x3e
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	e00b      	b.n	800c34c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c33a:	68f9      	ldr	r1, [r7, #12]
 800c33c:	4613      	mov	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	440b      	add	r3, r1
 800c346:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c34a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c372:	78fa      	ldrb	r2, [r7, #3]
 800c374:	4611      	mov	r1, r2
 800c376:	4618      	mov	r0, r3
 800c378:	f7f6 fdcf 	bl	8002f1a <HAL_PCD_SetAddress>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	4618      	mov	r0, r3
 800c384:	f000 f874 	bl	800c470 <USBD_Get_USB_Status>
 800c388:	4603      	mov	r3, r0
 800c38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b086      	sub	sp, #24
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	60f8      	str	r0, [r7, #12]
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	603b      	str	r3, [r7, #0]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3b4:	7af9      	ldrb	r1, [r7, #11]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	f7f6 fee8 	bl	800318e <HAL_PCD_EP_Transmit>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 f853 	bl	800c470 <USBD_Get_USB_Status>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	607a      	str	r2, [r7, #4]
 800c3e2:	603b      	str	r3, [r7, #0]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3f6:	7af9      	ldrb	r1, [r7, #11]
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	f7f6 fe64 	bl	80030c8 <HAL_PCD_EP_Receive>
 800c400:	4603      	mov	r3, r0
 800c402:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	4618      	mov	r0, r3
 800c408:	f000 f832 	bl	800c470 <USBD_Get_USB_Status>
 800c40c:	4603      	mov	r3, r0
 800c40e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c410:	7dbb      	ldrb	r3, [r7, #22]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b082      	sub	sp, #8
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	460b      	mov	r3, r1
 800c424:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c42c:	78fa      	ldrb	r2, [r7, #3]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f7f6 fe94 	bl	800315e <HAL_PCD_EP_GetRxCount>
 800c436:	4603      	mov	r3, r0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c448:	4b03      	ldr	r3, [pc, #12]	; (800c458 <USBD_static_malloc+0x18>)
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	20005e94 	.word	0x20005e94

0800c45c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]

}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c47e:	79fb      	ldrb	r3, [r7, #7]
 800c480:	2b03      	cmp	r3, #3
 800c482:	d817      	bhi.n	800c4b4 <USBD_Get_USB_Status+0x44>
 800c484:	a201      	add	r2, pc, #4	; (adr r2, 800c48c <USBD_Get_USB_Status+0x1c>)
 800c486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48a:	bf00      	nop
 800c48c:	0800c49d 	.word	0x0800c49d
 800c490:	0800c4a3 	.word	0x0800c4a3
 800c494:	0800c4a9 	.word	0x0800c4a9
 800c498:	0800c4af 	.word	0x0800c4af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a0:	e00b      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a6:	e008      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ac:	e005      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b2:	e002      	b.n	800c4ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b8:	bf00      	nop
  }
  return usb_status;
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <msg_handler>:

#include "messages.h"
uint8_t msg_in_buf[128];
uint8_t msg_out_buf[128];

void msg_handler(uint8_t type, uint8_t id, uint8_t *msg, uint16_t length) {
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	603a      	str	r2, [r7, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	71bb      	strb	r3, [r7, #6]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	80bb      	strh	r3, [r7, #4]
	switch (type) {
 800c4de:	79fb      	ldrb	r3, [r7, #7]
 800c4e0:	2b05      	cmp	r3, #5
 800c4e2:	d018      	beq.n	800c516 <msg_handler+0x4e>
 800c4e4:	2b05      	cmp	r3, #5
 800c4e6:	dc1c      	bgt.n	800c522 <msg_handler+0x5a>
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d014      	beq.n	800c516 <msg_handler+0x4e>
 800c4ec:	2b04      	cmp	r3, #4
 800c4ee:	d118      	bne.n	800c522 <msg_handler+0x5a>
	case MSG_TYPE_WRITE: {
		switch (id) {
 800c4f0:	79bb      	ldrb	r3, [r7, #6]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d002      	beq.n	800c4fc <msg_handler+0x34>
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d006      	beq.n	800c508 <msg_handler+0x40>
		}
		case MSG_WRITE_STATUS_LED_ID:
			msg_write_status_led(msg, length);
			break;
		}
		break;
 800c4fa:	e012      	b.n	800c522 <msg_handler+0x5a>
			msg_write_discrete_led(msg, length);
 800c4fc:	88bb      	ldrh	r3, [r7, #4]
 800c4fe:	4619      	mov	r1, r3
 800c500:	6838      	ldr	r0, [r7, #0]
 800c502:	f000 f944 	bl	800c78e <msg_write_discrete_led>
			break;
 800c506:	e005      	b.n	800c514 <msg_handler+0x4c>
			msg_write_status_led(msg, length);
 800c508:	88bb      	ldrh	r3, [r7, #4]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6838      	ldr	r0, [r7, #0]
 800c50e:	f000 f993 	bl	800c838 <msg_write_status_led>
			break;
 800c512:	bf00      	nop
		break;
 800c514:	e005      	b.n	800c522 <msg_handler+0x5a>
	}
	case MSG_TYPE_REQUEST: {
		case MSG_REQUEST_ECHO_ID:
		msg_request_echo(msg, length);
 800c516:	88bb      	ldrh	r3, [r7, #4]
 800c518:	4619      	mov	r1, r3
 800c51a:	6838      	ldr	r0, [r7, #0]
 800c51c:	f000 f880 	bl	800c620 <msg_request_echo>
		break;
 800c520:	bf00      	nop
	}
	}
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <send_msg>:

void send_msg(uint8_t type, uint8_t id, uint8_t *data, uint16_t length) {
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	603a      	str	r2, [r7, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	4603      	mov	r3, r0
 800c538:	71fb      	strb	r3, [r7, #7]
 800c53a:	460b      	mov	r3, r1
 800c53c:	71bb      	strb	r3, [r7, #6]
 800c53e:	4613      	mov	r3, r2
 800c540:	80bb      	strh	r3, [r7, #4]
	usb_tx_buf[0] = HEADER_0;
 800c542:	4b18      	ldr	r3, [pc, #96]	; (800c5a4 <send_msg+0x78>)
 800c544:	22aa      	movs	r2, #170	; 0xaa
 800c546:	701a      	strb	r2, [r3, #0]
	usb_tx_buf[1] = HEADER_1;
 800c548:	4b16      	ldr	r3, [pc, #88]	; (800c5a4 <send_msg+0x78>)
 800c54a:	22bb      	movs	r2, #187	; 0xbb
 800c54c:	705a      	strb	r2, [r3, #1]
	usb_tx_buf[2] = type;
 800c54e:	4a15      	ldr	r2, [pc, #84]	; (800c5a4 <send_msg+0x78>)
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	7093      	strb	r3, [r2, #2]
	usb_tx_buf[3] = id;
 800c554:	4a13      	ldr	r2, [pc, #76]	; (800c5a4 <send_msg+0x78>)
 800c556:	79bb      	ldrb	r3, [r7, #6]
 800c558:	70d3      	strb	r3, [r2, #3]
	usb_tx_buf[4] = length;
 800c55a:	88bb      	ldrh	r3, [r7, #4]
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	4b11      	ldr	r3, [pc, #68]	; (800c5a4 <send_msg+0x78>)
 800c560:	711a      	strb	r2, [r3, #4]
	if (MSG_CRC8_ENABLE) {

	} else {
		usb_tx_buf[5] = 0x00; //CRC8
 800c562:	4b10      	ldr	r3, [pc, #64]	; (800c5a4 <send_msg+0x78>)
 800c564:	2200      	movs	r2, #0
 800c566:	715a      	strb	r2, [r3, #5]
	}
	memcpy(&usb_tx_buf[6], data, length);
 800c568:	88bb      	ldrh	r3, [r7, #4]
 800c56a:	461a      	mov	r2, r3
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	480e      	ldr	r0, [pc, #56]	; (800c5a8 <send_msg+0x7c>)
 800c570:	f000 fd0c 	bl	800cf8c <memcpy>
	usb_tx_buf[6 + length] = FOOTER_0;
 800c574:	88bb      	ldrh	r3, [r7, #4]
 800c576:	3306      	adds	r3, #6
 800c578:	4a0a      	ldr	r2, [pc, #40]	; (800c5a4 <send_msg+0x78>)
 800c57a:	21cc      	movs	r1, #204	; 0xcc
 800c57c:	54d1      	strb	r1, [r2, r3]

	uint8_t ret = usb_send_data(usb_tx_buf, length + 7);
 800c57e:	88bb      	ldrh	r3, [r7, #4]
 800c580:	3307      	adds	r3, #7
 800c582:	b29b      	uxth	r3, r3
 800c584:	4619      	mov	r1, r3
 800c586:	4807      	ldr	r0, [pc, #28]	; (800c5a4 <send_msg+0x78>)
 800c588:	f000 f8ea 	bl	800c760 <usb_send_data>
 800c58c:	4603      	mov	r3, r0
 800c58e:	73fb      	strb	r3, [r7, #15]
	if (!ret) {
 800c590:	7bfb      	ldrb	r3, [r7, #15]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d102      	bne.n	800c59c <send_msg+0x70>
		error_handler(ERROR_ID_USB_TRANSMIT);
 800c596:	2001      	movs	r0, #1
 800c598:	f000 f9ac 	bl	800c8f4 <error_handler>
	}
}
 800c59c:	bf00      	nop
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	200061b4 	.word	0x200061b4
 800c5a8:	200061ba 	.word	0x200061ba

0800c5ac <error_msg>:

void error_msg(uint8_t error_id, uint8_t *data, uint16_t length) {
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	6039      	str	r1, [r7, #0]
 800c5b6:	71fb      	strb	r3, [r7, #7]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	80bb      	strh	r3, [r7, #4]
	send_msg(MSG_TYPE_ERROR, error_id, data, length);
 800c5bc:	88bb      	ldrh	r3, [r7, #4]
 800c5be:	79f9      	ldrb	r1, [r7, #7]
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	2003      	movs	r0, #3
 800c5c4:	f7ff ffb2 	bl	800c52c <send_msg>
}
 800c5c8:	bf00      	nop
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <float_to_byte>:

void float_to_byte(uint8_t *buf, float val) {
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	ed87 0a00 	vstr	s0, [r7]
	uint32_t temp = *(uint32_t*) &val;
 800c5dc:	463b      	mov	r3, r7
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	60fb      	str	r3, [r7, #12]
	*(buf) = temp & 0x00FF;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	b2da      	uxtb	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	701a      	strb	r2, [r3, #0]
	*(buf++) = (temp >> 8) & 0x00FF;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	0a19      	lsrs	r1, r3, #8
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	607a      	str	r2, [r7, #4]
 800c5f4:	b2ca      	uxtb	r2, r1
 800c5f6:	701a      	strb	r2, [r3, #0]
	*(buf++) = (temp >> 16) & 0x00FF;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	0c19      	lsrs	r1, r3, #16
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	607a      	str	r2, [r7, #4]
 800c602:	b2ca      	uxtb	r2, r1
 800c604:	701a      	strb	r2, [r3, #0]
	*(buf++) = (temp >> 24);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	0e19      	lsrs	r1, r3, #24
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	1c5a      	adds	r2, r3, #1
 800c60e:	607a      	str	r2, [r7, #4]
 800c610:	b2ca      	uxtb	r2, r1
 800c612:	701a      	strb	r2, [r3, #0]
}
 800c614:	bf00      	nop
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <msg_request_echo>:
 *      Author: Dustin Lehmann
 */

#include "request_messages.h"

void msg_request_echo(uint8_t *msg, uint16_t length) {
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	807b      	strh	r3, [r7, #2]
	msg_request_echo_answer(msg, length);
 800c62c:	887b      	ldrh	r3, [r7, #2]
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f804 	bl	800c63e <msg_request_echo_answer>
}
 800c636:	bf00      	nop
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <msg_request_echo_answer>:
void msg_request_echo_answer(uint8_t *msg, uint16_t length) {
 800c63e:	b580      	push	{r7, lr}
 800c640:	b082      	sub	sp, #8
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	460b      	mov	r3, r1
 800c648:	807b      	strh	r3, [r7, #2]
	send_msg(MSG_TYPE_RESPONSE, MSG_REQUEST_ECHO_ANSWER_ID, msg, length);
 800c64a:	887b      	ldrh	r3, [r7, #2]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	2101      	movs	r1, #1
 800c650:	2006      	movs	r0, #6
 800c652:	f7ff ff6b 	bl	800c52c <send_msg>
}
 800c656:	bf00      	nop
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <msg_stream_distance>:
 *      Author: lehmann_workstation
 */

#include "stream_messages.h"

void msg_stream_distance(uint8_t* buffer, distance_sensor_t* distance_sensor){
 800c65e:	b580      	push	{r7, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	6039      	str	r1, [r7, #0]
	buffer[0] = 0x00; // tick[0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x00; // tick[1]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3301      	adds	r3, #1
 800c672:	2200      	movs	r2, #0
 800c674:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0x00; // tick[2]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3302      	adds	r3, #2
 800c67a:	2200      	movs	r2, #0
 800c67c:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0x00; // tick[3]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3303      	adds	r3, #3
 800c682:	2200      	movs	r2, #0
 800c684:	701a      	strb	r2, [r3, #0]

	buffer[4] = distance_sensor ->id;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	3304      	adds	r3, #4
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	7f12      	ldrb	r2, [r2, #28]
 800c68e:	701a      	strb	r2, [r3, #0]
	buffer[5] = distance_sensor ->overflow;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3305      	adds	r3, #5
 800c694:	683a      	ldr	r2, [r7, #0]
 800c696:	7d12      	ldrb	r2, [r2, #20]
 800c698:	701a      	strb	r2, [r3, #0]
	float_to_byte(&buffer[6], distance_sensor->distance);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	1d9a      	adds	r2, r3, #6
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	edd3 7a04 	vldr	s15, [r3, #16]
 800c6a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	f7ff ff91 	bl	800c5d0 <float_to_byte>

	send_msg(MSG_TYPE_STREAMING, MSG_STREAM_DISTANCE_ID, buffer, 10);
 800c6ae:	230a      	movs	r3, #10
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	2103      	movs	r1, #3
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	f7ff ff39 	bl	800c52c <send_msg>
}
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <usb_rx_handler>:

void usb_init(usb_cdc_interface_t* interface, void* rx_callback){
	interface->rx_callback = rx_callback;
}

void usb_rx_handler(uint8_t* data, uint32_t len){
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
	if (len<2){
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d805      	bhi.n	800c6e0 <usb_rx_handler+0x1c>
		error_msg(ERROR_MSG_INVALID, NULL, 0);
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	2001      	movs	r0, #1
 800c6da:	f7ff ff67 	bl	800c5ac <error_msg>
		return;
 800c6de:	e03a      	b.n	800c756 <usb_rx_handler+0x92>
	}
	// Check if the first two bytes are the correct header
	if (!(data[0] == HEADER_0 && data[1]==HEADER_1)){
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2baa      	cmp	r3, #170	; 0xaa
 800c6e6:	d104      	bne.n	800c6f2 <usb_rx_handler+0x2e>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2bbb      	cmp	r3, #187	; 0xbb
 800c6f0:	d005      	beq.n	800c6fe <usb_rx_handler+0x3a>
		error_msg(ERROR_MSG_INVALID, NULL, 0);
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	f7ff ff58 	bl	800c5ac <error_msg>
		return; // TODO Error Handling
 800c6fc:	e02b      	b.n	800c756 <usb_rx_handler+0x92>
	}

	// Check if the last byte is the correct footer
	if (!(data[len-1] == FOOTER_0)){
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	3b01      	subs	r3, #1
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	4413      	add	r3, r2
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2bcc      	cmp	r3, #204	; 0xcc
 800c70a:	d11f      	bne.n	800c74c <usb_rx_handler+0x88>
		return; // TODO Error Handling
	}

	// check the minimum length
	if(len<8){
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	2b07      	cmp	r3, #7
 800c710:	d91e      	bls.n	800c750 <usb_rx_handler+0x8c>
		return; // TODO Error Handling
	}

	// extract the meta data
	uint8_t type = data[2];
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	789b      	ldrb	r3, [r3, #2]
 800c716:	73fb      	strb	r3, [r7, #15]
	uint8_t id = data[3];
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	78db      	ldrb	r3, [r3, #3]
 800c71c:	73bb      	strb	r3, [r7, #14]
	uint8_t data_len = data[4];
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	791b      	ldrb	r3, [r3, #4]
 800c722:	737b      	strb	r3, [r7, #13]
	if (MSG_CRC8_ENABLE){
		uint8_t crc8 = data[5];
	}

	// check if the data length is correct
	if (!((len-7) == data_len)){
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	1fda      	subs	r2, r3, #7
 800c728:	7b7b      	ldrb	r3, [r7, #13]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d112      	bne.n	800c754 <usb_rx_handler+0x90>
		return; // TODO Error Handling
	}

	// Copy the data to the msg_in_buffer
	memcpy(msg_in_buf,&data[6], data_len);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3306      	adds	r3, #6
 800c732:	7b7a      	ldrb	r2, [r7, #13]
 800c734:	4619      	mov	r1, r3
 800c736:	4809      	ldr	r0, [pc, #36]	; (800c75c <usb_rx_handler+0x98>)
 800c738:	f000 fc28 	bl	800cf8c <memcpy>

	// Invoke the message handler to execute the corresponding functions
	msg_handler(type, id, msg_in_buf, data_len);
 800c73c:	7b7b      	ldrb	r3, [r7, #13]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	7bb9      	ldrb	r1, [r7, #14]
 800c742:	7bf8      	ldrb	r0, [r7, #15]
 800c744:	4a05      	ldr	r2, [pc, #20]	; (800c75c <usb_rx_handler+0x98>)
 800c746:	f7ff febf 	bl	800c4c8 <msg_handler>
 800c74a:	e004      	b.n	800c756 <usb_rx_handler+0x92>
		return; // TODO Error Handling
 800c74c:	bf00      	nop
 800c74e:	e002      	b.n	800c756 <usb_rx_handler+0x92>
		return; // TODO Error Handling
 800c750:	bf00      	nop
 800c752:	e000      	b.n	800c756 <usb_rx_handler+0x92>
		return; // TODO Error Handling
 800c754:	bf00      	nop
}
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	200060b4 	.word	0x200060b4

0800c760 <usb_send_data>:


uint8_t usb_send_data(uint8_t* data, uint16_t len){
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	460b      	mov	r3, r1
 800c76a:	807b      	strh	r3, [r7, #2]
	uint8_t ret = CDC_Transmit_FS(data, len);
 800c76c:	887b      	ldrh	r3, [r7, #2]
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff fa57 	bl	800bc24 <CDC_Transmit_FS>
 800c776:	4603      	mov	r3, r0
 800c778:	73fb      	strb	r3, [r7, #15]
	if (ret == USBD_OK){
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <usb_send_data+0x24>
		return USBD_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	e000      	b.n	800c786 <usb_send_data+0x26>
	} else {
		return 1;
 800c784:	2301      	movs	r3, #1
	}
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <msg_write_discrete_led>:
 */

#include <stdint.h>
#include "write_messages.h"

void msg_write_discrete_led(uint8_t *msg, uint16_t length) {
 800c78e:	b580      	push	{r7, lr}
 800c790:	b082      	sub	sp, #8
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	460b      	mov	r3, r1
 800c798:	807b      	strh	r3, [r7, #2]
	if (!(length == MSG_WRITE_DISCRETE_LED_LENGTH)) {
 800c79a:	887b      	ldrh	r3, [r7, #2]
 800c79c:	2b03      	cmp	r3, #3
 800c79e:	d147      	bne.n	800c830 <msg_write_discrete_led+0xa2>
		return; //TODO ERROR HANDLING
	}
	if (msg[0] == 0 || msg[0] == 1) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <msg_write_discrete_led+0x22>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d105      	bne.n	800c7bc <msg_write_discrete_led+0x2e>
		set_led(LED_GREEN, msg[0]);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	2001      	movs	r0, #1
 800c7b8:	f000 f8a8 	bl	800c90c <set_led>
	}
	if (msg[1] == 0 || msg[1] == 1) {
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d004      	beq.n	800c7d0 <msg_write_discrete_led+0x42>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d106      	bne.n	800c7de <msg_write_discrete_led+0x50>
		set_led(LED_BLUE, msg[1]);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	2002      	movs	r0, #2
 800c7da:	f000 f897 	bl	800c90c <set_led>
	}
	if (msg[2] == 0 || msg[2] == 1) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3302      	adds	r3, #2
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d004      	beq.n	800c7f2 <msg_write_discrete_led+0x64>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d106      	bne.n	800c800 <msg_write_discrete_led+0x72>
		set_led(LED_ORANGE, msg[2]);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	3302      	adds	r3, #2
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	2003      	movs	r0, #3
 800c7fc:	f000 f886 	bl	800c90c <set_led>
	}

	if (msg[0] == 2) {
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d102      	bne.n	800c80e <msg_write_discrete_led+0x80>
		toggle_led(LED_GREEN);
 800c808:	2001      	movs	r0, #1
 800c80a:	f000 f8b1 	bl	800c970 <toggle_led>
	}
	if (msg[1] == 2) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3301      	adds	r3, #1
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b02      	cmp	r3, #2
 800c816:	d102      	bne.n	800c81e <msg_write_discrete_led+0x90>
		toggle_led(LED_BLUE);
 800c818:	2002      	movs	r0, #2
 800c81a:	f000 f8a9 	bl	800c970 <toggle_led>
	}
	if (msg[2] == 2) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3302      	adds	r3, #2
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d104      	bne.n	800c832 <msg_write_discrete_led+0xa4>
		toggle_led(LED_ORANGE);
 800c828:	2003      	movs	r0, #3
 800c82a:	f000 f8a1 	bl	800c970 <toggle_led>
 800c82e:	e000      	b.n	800c832 <msg_write_discrete_led+0xa4>
		return; //TODO ERROR HANDLING
 800c830:	bf00      	nop
	}
}
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <msg_write_status_led>:


void msg_write_status_led(uint8_t* msg, uint16_t length){
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	807b      	strh	r3, [r7, #2]
	if (!(length == MSG_WRITE_STATUS_LED_LENGTH)) {
 800c844:	887b      	ldrh	r3, [r7, #2]
 800c846:	2b03      	cmp	r3, #3
 800c848:	d10f      	bne.n	800c86a <msg_write_status_led+0x32>
		return; //TODO ERROR HANDLING
	}
	ws2812_set(0, msg[0], msg[1], msg[2]);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	4619      	mov	r1, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3301      	adds	r3, #1
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	3302      	adds	r3, #2
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	2000      	movs	r0, #0
 800c860:	f000 f940 	bl	800cae4 <ws2812_set>
	ws2812_send();
 800c864:	f000 f96c 	bl	800cb40 <ws2812_send>
 800c868:	e000      	b.n	800c86c <msg_write_status_led+0x34>
		return; //TODO ERROR HANDLING
 800c86a:	bf00      	nop
}
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <firmware_init>:
distance_sensor_handler_t distance_sensor_handler;
distance_sensor_t distance_sensor_1;
distance_sensor_t distance_sensor_2;


void firmware_init() {
 800c874:	b580      	push	{r7, lr}
 800c876:	af00      	add	r7, sp, #0

	// Set the status LED to IDLE
	set_status_led(LED_STATUS_IDLE);
 800c878:	2003      	movs	r0, #3
 800c87a:	f000 f8b7 	bl	800c9ec <set_status_led>
	// Initialize the USB Device
	MX_USB_DEVICE_Init();
 800c87e:	f7ff f90d 	bl	800ba9c <MX_USB_DEVICE_Init>

	// Set the status LED to OK
	set_status_led(LED_STATUS_OK);
 800c882:	2001      	movs	r0, #1
 800c884:	f000 f8b2 	bl	800c9ec <set_status_led>

	// Define one distance sensor
	init_distance_sensor_handler(&distance_sensor_handler,
 800c888:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <firmware_init+0x6c>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2200      	movs	r2, #0
 800c88e:	4619      	mov	r1, r3
 800c890:	4814      	ldr	r0, [pc, #80]	; (800c8e4 <firmware_init+0x70>)
 800c892:	f000 f9c5 	bl	800cc20 <init_distance_sensor_handler>
			distance_sensor_timer, NULL);

	//sensor 1
	distance_sensor_1.echo_port = GPIOB;
 800c896:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <firmware_init+0x74>)
 800c898:	4a14      	ldr	r2, [pc, #80]	; (800c8ec <firmware_init+0x78>)
 800c89a:	601a      	str	r2, [r3, #0]
	distance_sensor_1.echo_pin = GPIO_PIN_14;
 800c89c:	4b12      	ldr	r3, [pc, #72]	; (800c8e8 <firmware_init+0x74>)
 800c89e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c8a2:	809a      	strh	r2, [r3, #4]
	distance_sensor_1.trig_port = GPIOB;
 800c8a4:	4b10      	ldr	r3, [pc, #64]	; (800c8e8 <firmware_init+0x74>)
 800c8a6:	4a11      	ldr	r2, [pc, #68]	; (800c8ec <firmware_init+0x78>)
 800c8a8:	609a      	str	r2, [r3, #8]
	distance_sensor_1.trig_pin = GPIO_PIN_13;
 800c8aa:	4b0f      	ldr	r3, [pc, #60]	; (800c8e8 <firmware_init+0x74>)
 800c8ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c8b0:	819a      	strh	r2, [r3, #12]

	//sensor 2
	distance_sensor_2.echo_port = GPIOB;
 800c8b2:	4b0f      	ldr	r3, [pc, #60]	; (800c8f0 <firmware_init+0x7c>)
 800c8b4:	4a0d      	ldr	r2, [pc, #52]	; (800c8ec <firmware_init+0x78>)
 800c8b6:	601a      	str	r2, [r3, #0]
	distance_sensor_2.echo_pin = GPIO_PIN_1;
 800c8b8:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <firmware_init+0x7c>)
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	809a      	strh	r2, [r3, #4]
	distance_sensor_2.trig_port = GPIOB;
 800c8be:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <firmware_init+0x7c>)
 800c8c0:	4a0a      	ldr	r2, [pc, #40]	; (800c8ec <firmware_init+0x78>)
 800c8c2:	609a      	str	r2, [r3, #8]
	distance_sensor_2.trig_pin = GPIO_PIN_0;
 800c8c4:	4b0a      	ldr	r3, [pc, #40]	; (800c8f0 <firmware_init+0x7c>)
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	819a      	strh	r2, [r3, #12]

	//register sensors
	register_distance_sensor(&distance_sensor_handler, &distance_sensor_1);
 800c8ca:	4907      	ldr	r1, [pc, #28]	; (800c8e8 <firmware_init+0x74>)
 800c8cc:	4805      	ldr	r0, [pc, #20]	; (800c8e4 <firmware_init+0x70>)
 800c8ce:	f000 f9c9 	bl	800cc64 <register_distance_sensor>
	register_distance_sensor(&distance_sensor_handler, &distance_sensor_2);
 800c8d2:	4907      	ldr	r1, [pc, #28]	; (800c8f0 <firmware_init+0x7c>)
 800c8d4:	4803      	ldr	r0, [pc, #12]	; (800c8e4 <firmware_init+0x70>)
 800c8d6:	f000 f9c5 	bl	800cc64 <register_distance_sensor>

}
 800c8da:	bf00      	nop
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	200062b4 	.word	0x200062b4
 800c8e4:	200062b8 	.word	0x200062b8
 800c8e8:	200062cc 	.word	0x200062cc
 800c8ec:	40020400 	.word	0x40020400
 800c8f0:	200062ec 	.word	0x200062ec

0800c8f4 <error_handler>:

void error_handler(uint8_t error_id) {
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	71fb      	strb	r3, [r7, #7]
	set_status_led(LED_STATUS_ERROR);
 800c8fe:	2002      	movs	r0, #2
 800c900:	f000 f874 	bl	800c9ec <set_status_led>
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <set_led>:
 *      Author: Dustin Lehmann
 */

#include "led.h"

void set_led(uint8_t led_num, uint8_t state) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	4603      	mov	r3, r0
 800c914:	460a      	mov	r2, r1
 800c916:	71fb      	strb	r3, [r7, #7]
 800c918:	4613      	mov	r3, r2
 800c91a:	71bb      	strb	r3, [r7, #6]
	switch (led_num) {
 800c91c:	79fb      	ldrb	r3, [r7, #7]
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d016      	beq.n	800c950 <set_led+0x44>
 800c922:	2b03      	cmp	r3, #3
 800c924:	dc1c      	bgt.n	800c960 <set_led+0x54>
 800c926:	2b01      	cmp	r3, #1
 800c928:	d002      	beq.n	800c930 <set_led+0x24>
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d008      	beq.n	800c940 <set_led+0x34>
		break;
	case LED_ORANGE:
		HAL_GPIO_WritePin(LED_ORANGE_PORT, LED_ORANGE_PIN, state);
		break;
	}
}
 800c92e:	e017      	b.n	800c960 <set_led+0x54>
		HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, state);
 800c930:	79bb      	ldrb	r3, [r7, #6]
 800c932:	461a      	mov	r2, r3
 800c934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c938:	480b      	ldr	r0, [pc, #44]	; (800c968 <set_led+0x5c>)
 800c93a:	f7f5 fcb3 	bl	80022a4 <HAL_GPIO_WritePin>
		break;
 800c93e:	e00f      	b.n	800c960 <set_led+0x54>
		HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, state);
 800c940:	79bb      	ldrb	r3, [r7, #6]
 800c942:	461a      	mov	r2, r3
 800c944:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c948:	4808      	ldr	r0, [pc, #32]	; (800c96c <set_led+0x60>)
 800c94a:	f7f5 fcab 	bl	80022a4 <HAL_GPIO_WritePin>
		break;
 800c94e:	e007      	b.n	800c960 <set_led+0x54>
		HAL_GPIO_WritePin(LED_ORANGE_PORT, LED_ORANGE_PIN, state);
 800c950:	79bb      	ldrb	r3, [r7, #6]
 800c952:	461a      	mov	r2, r3
 800c954:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c958:	4803      	ldr	r0, [pc, #12]	; (800c968 <set_led+0x5c>)
 800c95a:	f7f5 fca3 	bl	80022a4 <HAL_GPIO_WritePin>
		break;
 800c95e:	bf00      	nop
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	40020800 	.word	0x40020800
 800c96c:	40020000 	.word	0x40020000

0800c970 <toggle_led>:

void toggle_led(uint8_t led_num) {
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	4603      	mov	r3, r0
 800c978:	71fb      	strb	r3, [r7, #7]
	switch (led_num) {
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d012      	beq.n	800c9a6 <toggle_led+0x36>
 800c980:	2b03      	cmp	r3, #3
 800c982:	dc16      	bgt.n	800c9b2 <toggle_led+0x42>
 800c984:	2b01      	cmp	r3, #1
 800c986:	d002      	beq.n	800c98e <toggle_led+0x1e>
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d006      	beq.n	800c99a <toggle_led+0x2a>
		break;
	case LED_ORANGE:
		HAL_GPIO_TogglePin(LED_ORANGE_PORT, LED_ORANGE_PIN);
		break;
	}
}
 800c98c:	e011      	b.n	800c9b2 <toggle_led+0x42>
		HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 800c98e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c992:	480a      	ldr	r0, [pc, #40]	; (800c9bc <toggle_led+0x4c>)
 800c994:	f7f5 fc9f 	bl	80022d6 <HAL_GPIO_TogglePin>
		break;
 800c998:	e00b      	b.n	800c9b2 <toggle_led+0x42>
		HAL_GPIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
 800c99a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c99e:	4808      	ldr	r0, [pc, #32]	; (800c9c0 <toggle_led+0x50>)
 800c9a0:	f7f5 fc99 	bl	80022d6 <HAL_GPIO_TogglePin>
		break;
 800c9a4:	e005      	b.n	800c9b2 <toggle_led+0x42>
		HAL_GPIO_TogglePin(LED_ORANGE_PORT, LED_ORANGE_PIN);
 800c9a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9aa:	4804      	ldr	r0, [pc, #16]	; (800c9bc <toggle_led+0x4c>)
 800c9ac:	f7f5 fc93 	bl	80022d6 <HAL_GPIO_TogglePin>
		break;
 800c9b0:	bf00      	nop
}
 800c9b2:	bf00      	nop
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	40020800 	.word	0x40020800
 800c9c0:	40020000 	.word	0x40020000

0800c9c4 <set_status_led_color>:

void set_status_led_color(uint8_t red, uint8_t green, uint8_t blue) {
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	71bb      	strb	r3, [r7, #6]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	717b      	strb	r3, [r7, #5]
	ws2812_set(0, red, green, blue);
 800c9d6:	79f9      	ldrb	r1, [r7, #7]
 800c9d8:	79ba      	ldrb	r2, [r7, #6]
 800c9da:	797b      	ldrb	r3, [r7, #5]
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f000 f881 	bl	800cae4 <ws2812_set>
}
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
	...

0800c9ec <set_status_led>:
void set_status_led(uint8_t state) {
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	2b03      	cmp	r3, #3
 800c9fa:	d823      	bhi.n	800ca44 <set_status_led+0x58>
 800c9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <set_status_led+0x18>)
 800c9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca02:	bf00      	nop
 800ca04:	0800ca21 	.word	0x0800ca21
 800ca08:	0800ca2d 	.word	0x0800ca2d
 800ca0c:	0800ca15 	.word	0x0800ca15
 800ca10:	0800ca39 	.word	0x0800ca39
	case LED_STATUS_ERROR:
		set_status_led_color(60, 0, 0);
 800ca14:	2200      	movs	r2, #0
 800ca16:	2100      	movs	r1, #0
 800ca18:	203c      	movs	r0, #60	; 0x3c
 800ca1a:	f7ff ffd3 	bl	800c9c4 <set_status_led_color>
		break;
 800ca1e:	e011      	b.n	800ca44 <set_status_led+0x58>
	case LED_STATUS_OFF:
		set_status_led_color(0, 0, 0);
 800ca20:	2200      	movs	r2, #0
 800ca22:	2100      	movs	r1, #0
 800ca24:	2000      	movs	r0, #0
 800ca26:	f7ff ffcd 	bl	800c9c4 <set_status_led_color>
		break;
 800ca2a:	e00b      	b.n	800ca44 <set_status_led+0x58>
	case LED_STATUS_OK:
		set_status_led_color(0, 60, 0);
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	213c      	movs	r1, #60	; 0x3c
 800ca30:	2000      	movs	r0, #0
 800ca32:	f7ff ffc7 	bl	800c9c4 <set_status_led_color>
		break;
 800ca36:	e005      	b.n	800ca44 <set_status_led+0x58>
	case LED_STATUS_IDLE:
		set_status_led_color(0, 0, 60);
 800ca38:	223c      	movs	r2, #60	; 0x3c
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	f7ff ffc1 	bl	800c9c4 <set_status_led_color>
		break;
 800ca42:	bf00      	nop
	}
	ws2812_send();
 800ca44:	f000 f87c 	bl	800cb40 <ws2812_send>
}
 800ca48:	bf00      	nop
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <HAL_TIM_PWM_PulseFinishedCallback>:

uint16_t pwmData[(24*MAX_LED)+50];


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws2812_tim, WS2812_TIM_CHANNEL);
 800ca58:	4b06      	ldr	r3, [pc, #24]	; (800ca74 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2104      	movs	r1, #4
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7f7 fe9e 	bl	80047a0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800ca64:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800ca66:	2201      	movs	r2, #1
 800ca68:	701a      	strb	r2, [r3, #0]
}
 800ca6a:	bf00      	nop
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	20006310 	.word	0x20006310
 800ca78:	2000630c 	.word	0x2000630c

0800ca7c <ws2812_init>:

void ws2812_init(TIM_HandleTypeDef* tim){
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
	ws2812_tim = tim;
 800ca84:	4a15      	ldr	r2, [pc, #84]	; (800cadc <ws2812_init+0x60>)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6013      	str	r3, [r2, #0]
	for (int i=0;i<MAX_LED;i++){
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e01a      	b.n	800cac6 <ws2812_init+0x4a>
		LED_Data[i][0] = i;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	b2d9      	uxtb	r1, r3
 800ca94:	4a12      	ldr	r2, [pc, #72]	; (800cae0 <ws2812_init+0x64>)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 800ca9c:	4a10      	ldr	r2, [pc, #64]	; (800cae0 <ws2812_init+0x64>)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	2200      	movs	r2, #0
 800caa6:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 800caa8:	4a0d      	ldr	r2, [pc, #52]	; (800cae0 <ws2812_init+0x64>)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	2200      	movs	r2, #0
 800cab2:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 800cab4:	4a0a      	ldr	r2, [pc, #40]	; (800cae0 <ws2812_init+0x64>)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	2200      	movs	r2, #0
 800cabe:	70da      	strb	r2, [r3, #3]
	for (int i=0;i<MAX_LED;i++){
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3301      	adds	r3, #1
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b0f      	cmp	r3, #15
 800caca:	dde1      	ble.n	800ca90 <ws2812_init+0x14>
	}
}
 800cacc:	bf00      	nop
 800cace:	bf00      	nop
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	20006310 	.word	0x20006310
 800cae0:	20006314 	.word	0x20006314

0800cae4 <ws2812_set>:

void ws2812_set(int LEDnum, int Red, int Green, int Blue)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	b2d9      	uxtb	r1, r3
 800caf6:	4a11      	ldr	r2, [pc, #68]	; (800cb3c <ws2812_set+0x58>)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	b2d9      	uxtb	r1, r3
 800cb02:	4a0e      	ldr	r2, [pc, #56]	; (800cb3c <ws2812_set+0x58>)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	460a      	mov	r2, r1
 800cb0c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	b2d9      	uxtb	r1, r3
 800cb12:	4a0a      	ldr	r2, [pc, #40]	; (800cb3c <ws2812_set+0x58>)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	460a      	mov	r2, r1
 800cb1c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	b2d9      	uxtb	r1, r3
 800cb22:	4a06      	ldr	r2, [pc, #24]	; (800cb3c <ws2812_set+0x58>)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	460a      	mov	r2, r1
 800cb2c:	70da      	strb	r2, [r3, #3]
}
 800cb2e:	bf00      	nop
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	20006314 	.word	0x20006314

0800cb40 <ws2812_send>:
	}
#endif
}

void ws2812_send(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	613b      	str	r3, [r7, #16]
 800cb4e:	e036      	b.n	800cbbe <ws2812_send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 800cb50:	4a2f      	ldr	r2, [pc, #188]	; (800cc10 <ws2812_send+0xd0>)
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	041a      	lsls	r2, r3, #16
 800cb5c:	492c      	ldr	r1, [pc, #176]	; (800cc10 <ws2812_send+0xd0>)
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	440b      	add	r3, r1
 800cb64:	789b      	ldrb	r3, [r3, #2]
 800cb66:	021b      	lsls	r3, r3, #8
 800cb68:	431a      	orrs	r2, r3
 800cb6a:	4929      	ldr	r1, [pc, #164]	; (800cc10 <ws2812_send+0xd0>)
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	440b      	add	r3, r1
 800cb72:	78db      	ldrb	r3, [r3, #3]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 800cb78:	2317      	movs	r3, #23
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e019      	b.n	800cbb2 <ws2812_send+0x72>
		{
			if (color&(1<<i))
 800cb7e:	2201      	movs	r2, #1
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	fa02 f303 	lsl.w	r3, r2, r3
 800cb86:	461a      	mov	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d005      	beq.n	800cb9c <ws2812_send+0x5c>
			{
				pwmData[indx] = 40;  // 2/3 of 60
 800cb90:	4a20      	ldr	r2, [pc, #128]	; (800cc14 <ws2812_send+0xd4>)
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2128      	movs	r1, #40	; 0x28
 800cb96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800cb9a:	e004      	b.n	800cba6 <ws2812_send+0x66>
			}

			else pwmData[indx] = 20;  // 1/3 of 60
 800cb9c:	4a1d      	ldr	r2, [pc, #116]	; (800cc14 <ws2812_send+0xd4>)
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2114      	movs	r1, #20
 800cba2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	60fb      	str	r3, [r7, #12]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	dae2      	bge.n	800cb7e <ws2812_send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	613b      	str	r3, [r7, #16]
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	2b0f      	cmp	r3, #15
 800cbc2:	ddc5      	ble.n	800cb50 <ws2812_send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60bb      	str	r3, [r7, #8]
 800cbc8:	e00a      	b.n	800cbe0 <ws2812_send+0xa0>
	{
		pwmData[indx] = 0;
 800cbca:	4a12      	ldr	r2, [pc, #72]	; (800cc14 <ws2812_send+0xd4>)
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	2100      	movs	r1, #0
 800cbd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	60bb      	str	r3, [r7, #8]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2b31      	cmp	r3, #49	; 0x31
 800cbe4:	ddf1      	ble.n	800cbca <ws2812_send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(ws2812_tim, WS2812_TIM_CHANNEL, (uint32_t *)pwmData, indx);
 800cbe6:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <ws2812_send+0xd8>)
 800cbe8:	6818      	ldr	r0, [r3, #0]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <ws2812_send+0xd4>)
 800cbf0:	2104      	movs	r1, #4
 800cbf2:	f7f7 fc25 	bl	8004440 <HAL_TIM_PWM_Start_DMA>
	while (datasentflag==0){
 800cbf6:	bf00      	nop
 800cbf8:	4b08      	ldr	r3, [pc, #32]	; (800cc1c <ws2812_send+0xdc>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d0fa      	beq.n	800cbf8 <ws2812_send+0xb8>

	};
	datasentflag = 0;
 800cc02:	4b06      	ldr	r3, [pc, #24]	; (800cc1c <ws2812_send+0xdc>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	701a      	strb	r2, [r3, #0]
}
 800cc08:	bf00      	nop
 800cc0a:	3718      	adds	r7, #24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	20006314 	.word	0x20006314
 800cc14:	20006354 	.word	0x20006354
 800cc18:	20006310 	.word	0x20006310
 800cc1c:	2000630c 	.word	0x2000630c

0800cc20 <init_distance_sensor_handler>:

//Flag to determine what caused the interrupt Trigger or Echo-Timeout
uint8_t TriggerFlag = 0;

void init_distance_sensor_handler(distance_sensor_handler_t *handler,
		TIM_HandleTypeDef *timer, void *isr_callback) {
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
	handler->distance_sensors = distance_sensors;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4a0b      	ldr	r2, [pc, #44]	; (800cc5c <init_distance_sensor_handler+0x3c>)
 800cc30:	605a      	str	r2, [r3, #4]
	handler->timer = timer;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	601a      	str	r2, [r3, #0]
	handler->num_sensors = 0;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	721a      	strb	r2, [r3, #8]
	handler->isr_callback = isr_callback;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	60da      	str	r2, [r3, #12]
	handler->initialized = 1;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2201      	movs	r2, #1
 800cc48:	749a      	strb	r2, [r3, #18]
	distance_sensor_handler_ptr = handler;
 800cc4a:	4a05      	ldr	r2, [pc, #20]	; (800cc60 <init_distance_sensor_handler+0x40>)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6013      	str	r3, [r2, #0]
}
 800cc50:	bf00      	nop
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	200066bc 	.word	0x200066bc
 800cc60:	200066cc 	.word	0x200066cc

0800cc64 <register_distance_sensor>:

void register_distance_sensor(distance_sensor_handler_t *handler,
		distance_sensor_t *sensor) {
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
	handler->num_sensors++;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7a1b      	ldrb	r3, [r3, #8]
 800cc72:	3301      	adds	r3, #1
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	721a      	strb	r2, [r3, #8]
	handler->distance_sensors[handler->num_sensors - 1] = sensor;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7a1b      	ldrb	r3, [r3, #8]
 800cc82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc86:	3b01      	subs	r3, #1
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	601a      	str	r2, [r3, #0]
	sensor->distance = -1;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	4a0a      	ldr	r2, [pc, #40]	; (800ccbc <register_distance_sensor+0x58>)
 800cc94:	611a      	str	r2, [r3, #16]
	sensor->overflow = 1;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	751a      	strb	r2, [r3, #20]
	sensor->tick = 0;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	619a      	str	r2, [r3, #24]
	sensor->id = handler->num_sensors - 1;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	7a1b      	ldrb	r3, [r3, #8]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	b2da      	uxtb	r2, r3
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	771a      	strb	r2, [r3, #28]
}
 800ccae:	bf00      	nop
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	bf800000 	.word	0xbf800000

0800ccc0 <distance_meas_task>:

void distance_meas_task(distance_sensor_handler_t *handler) {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
	//check if handler is initialized
	if (handler->initialized != 1) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	7c9b      	ldrb	r3, [r3, #18]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d126      	bne.n	800cd1e <distance_meas_task+0x5e>
		return;
	}
	//check if any sensors are registered
	if (handler->num_sensors == 0) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	7a1b      	ldrb	r3, [r3, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d024      	beq.n	800cd22 <distance_meas_task+0x62>
		return;
	}

	while (1) {
		// Start the measurement for the current sensor
		if (handler->current_sensor > (handler->num_sensors - 1)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	7a1a      	ldrb	r2, [r3, #8]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	7a5b      	ldrb	r3, [r3, #9]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d802      	bhi.n	800ccea <distance_meas_task+0x2a>
			handler->current_sensor = 0;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	725a      	strb	r2, [r3, #9]
		}
		start_distance_measure(handler, handler->current_sensor);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	7a5b      	ldrb	r3, [r3, #9]
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f81d 	bl	800cd30 <start_distance_measure>
		//wait for EXTI from Echo (measurement completed) and afterwards change to next Sensor
		while (RunVar == 0) {
 800ccf6:	bf00      	nop
 800ccf8:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <distance_meas_task+0x6c>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d0fb      	beq.n	800ccf8 <distance_meas_task+0x38>
		}
		RunVar = 0;
 800cd00:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <distance_meas_task+0x6c>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	701a      	strb	r2, [r3, #0]
		handler->current_sensor++;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	7a5b      	ldrb	r3, [r3, #9]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	725a      	strb	r2, [r3, #9]
		osDelay(handler->meas_freq);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8a1b      	ldrh	r3, [r3, #16]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fc fa20 	bl	800915c <osDelay>
		if (handler->current_sensor > (handler->num_sensors - 1)) {
 800cd1c:	e7dc      	b.n	800ccd8 <distance_meas_task+0x18>
		return;
 800cd1e:	bf00      	nop
 800cd20:	e000      	b.n	800cd24 <distance_meas_task+0x64>
		return;
 800cd22:	bf00      	nop

	}
}
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	200066d4 	.word	0x200066d4

0800cd30 <start_distance_measure>:

void start_distance_measure(distance_sensor_handler_t *handler,
		uint8_t sensor_id) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]

	//activate Interrupts
	InterruptReady = 1;
 800cd3c:	4b16      	ldr	r3, [pc, #88]	; (800cd98 <start_distance_measure+0x68>)
 800cd3e:	2201      	movs	r2, #1
 800cd40:	701a      	strb	r2, [r3, #0]

	//pointer to current sensor for EXTI callback function
	current_sensor_ptr = handler->distance_sensors[sensor_id];
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	78fb      	ldrb	r3, [r7, #3]
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a13      	ldr	r2, [pc, #76]	; (800cd9c <start_distance_measure+0x6c>)
 800cd50:	6013      	str	r3, [r2, #0]

	//Set Counter of timer to 1 -> triggers in ~10ys
	__HAL_TIM_SET_COUNTER(&*handler->timer, 1);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	625a      	str	r2, [r3, #36]	; 0x24

	// Start the timer
	HAL_TIM_Base_Start_IT(&*handler->timer);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f7 fab1 	bl	80042c8 <HAL_TIM_Base_Start_IT>

	//Generate trigger Pulse for at least 10us -> Counter Period = 1sec*CPU Clockspeed[MHZ] / Total prescaler-value
	HAL_GPIO_WritePin(
			handler->distance_sensors[handler->current_sensor]->trig_port,
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685a      	ldr	r2, [r3, #4]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7a5b      	ldrb	r3, [r3, #9]
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(
 800cd74:	6898      	ldr	r0, [r3, #8]
			handler->distance_sensors[handler->current_sensor]->trig_pin, 1);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7a5b      	ldrb	r3, [r3, #9]
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4413      	add	r3, r2
 800cd82:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(
 800cd84:	899b      	ldrh	r3, [r3, #12]
 800cd86:	2201      	movs	r2, #1
 800cd88:	4619      	mov	r1, r3
 800cd8a:	f7f5 fa8b 	bl	80022a4 <HAL_GPIO_WritePin>

}
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	200066d5 	.word	0x200066d5
 800cd9c:	200066d0 	.word	0x200066d0

0800cda0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	80fb      	strh	r3, [r7, #6]

	//tell interrupt it is caused by the echo function
	TriggerFlag = 0;
 800cdaa:	4b37      	ldr	r3, [pc, #220]	; (800ce88 <HAL_GPIO_EXTI_Callback+0xe8>)
 800cdac:	2200      	movs	r2, #0
 800cdae:	701a      	strb	r2, [r3, #0]
	if (InterruptReady) {
 800cdb0:	4b36      	ldr	r3, [pc, #216]	; (800ce8c <HAL_GPIO_EXTI_Callback+0xec>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d05a      	beq.n	800ce6e <HAL_GPIO_EXTI_Callback+0xce>
		//Interrupt rising edge -> start Timer
		if (HAL_GPIO_ReadPin(current_sensor_ptr->echo_port,
 800cdb8:	4b35      	ldr	r3, [pc, #212]	; (800ce90 <HAL_GPIO_EXTI_Callback+0xf0>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
				current_sensor_ptr->echo_pin)) {
 800cdbe:	4b34      	ldr	r3, [pc, #208]	; (800ce90 <HAL_GPIO_EXTI_Callback+0xf0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
		if (HAL_GPIO_ReadPin(current_sensor_ptr->echo_port,
 800cdc2:	889b      	ldrh	r3, [r3, #4]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f7f5 fa54 	bl	8002274 <HAL_GPIO_ReadPin>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00c      	beq.n	800cdec <HAL_GPIO_EXTI_Callback+0x4c>
			// Start the timer
			__HAL_TIM_SET_COUNTER(&*distance_sensor_handler_ptr->timer, 0);
 800cdd2:	4b30      	ldr	r3, [pc, #192]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2200      	movs	r2, #0
 800cddc:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&*distance_sensor_handler_ptr->timer);
 800cdde:	4b2d      	ldr	r3, [pc, #180]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7f7 f9ed 	bl	80041c4 <HAL_TIM_Base_Start>
 800cdea:	e040      	b.n	800ce6e <HAL_GPIO_EXTI_Callback+0xce>
		}
		//Interrupt falling edge -> stop Timer
		else {
			//Stop the timer
			HAL_TIM_Base_Stop(&*distance_sensor_handler_ptr->timer);
 800cdec:	4b29      	ldr	r3, [pc, #164]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7f7 fa40 	bl	8004278 <HAL_TIM_Base_Stop>

			//detect how many ticks during Echo (timer counter mode: down): Timer_Period - Timer_Counter
			uint32_t tick = (uint32_t) (distance_sensor_timer->Init.Period)
 800cdf8:	4b27      	ldr	r3, [pc, #156]	; (800ce98 <HAL_GPIO_EXTI_Callback+0xf8>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68da      	ldr	r2, [r3, #12]
					- __HAL_TIM_GET_COUNTER(
 800cdfe:	4b25      	ldr	r3, [pc, #148]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			uint32_t tick = (uint32_t) (distance_sensor_timer->Init.Period)
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	60fb      	str	r3, [r7, #12]
							&*distance_sensor_handler_ptr->timer);

			//calculate elapsed time during Echo
			time_elapsed = tick / TIMER_FREQUENCY;
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7f3 fb29 	bl	8000464 <__aeabi_ui2d>
 800ce12:	a31b      	add	r3, pc, #108	; (adr r3, 800ce80 <HAL_GPIO_EXTI_Callback+0xe0>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fcc8 	bl	80007ac <__aeabi_ddiv>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4610      	mov	r0, r2
 800ce22:	4619      	mov	r1, r3
 800ce24:	f7f3 fdaa 	bl	800097c <__aeabi_d2f>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	4a1c      	ldr	r2, [pc, #112]	; (800ce9c <HAL_GPIO_EXTI_Callback+0xfc>)
 800ce2c:	6013      	str	r3, [r2, #0]
			//write distance value to current sensor
			distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->distance =
					0.5 * 343.5 * time_elapsed;
 800ce2e:	4b1b      	ldr	r3, [pc, #108]	; (800ce9c <HAL_GPIO_EXTI_Callback+0xfc>)
 800ce30:	edd3 7a00 	vldr	s15, [r3]
			distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->distance =
 800ce34:	4b17      	ldr	r3, [pc, #92]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	4b16      	ldr	r3, [pc, #88]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	7a5b      	ldrb	r3, [r3, #9]
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	681b      	ldr	r3, [r3, #0]
					0.5 * 343.5 * time_elapsed;
 800ce46:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800cea0 <HAL_GPIO_EXTI_Callback+0x100>
 800ce4a:	ee67 7a87 	vmul.f32	s15, s15, s14
			distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->distance =
 800ce4e:	edc3 7a04 	vstr	s15, [r3, #16]
			distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->overflow =
 800ce52:	4b10      	ldr	r3, [pc, #64]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	4b0e      	ldr	r3, [pc, #56]	; (800ce94 <HAL_GPIO_EXTI_Callback+0xf4>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	7a5b      	ldrb	r3, [r3, #9]
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2200      	movs	r2, #0
 800ce66:	751a      	strb	r2, [r3, #20]
					0;

			//enable next Trigger-Pulse
			RunVar = 1;
 800ce68:	4b0e      	ldr	r3, [pc, #56]	; (800cea4 <HAL_GPIO_EXTI_Callback+0x104>)
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	701a      	strb	r2, [r3, #0]
		}
	}
	//Interrupt is caused by SensorTrigger to put Trigger Signal to low again
	TriggerFlag = 1;
 800ce6e:	4b06      	ldr	r3, [pc, #24]	; (800ce88 <HAL_GPIO_EXTI_Callback+0xe8>)
 800ce70:	2201      	movs	r2, #1
 800ce72:	701a      	strb	r2, [r3, #0]
}
 800ce74:	bf00      	nop
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	f3af 8000 	nop.w
 800ce80:	00000000 	.word	0x00000000
 800ce84:	41086a00 	.word	0x41086a00
 800ce88:	200066d6 	.word	0x200066d6
 800ce8c:	200066d5 	.word	0x200066d5
 800ce90:	200066d0 	.word	0x200066d0
 800ce94:	200066cc 	.word	0x200066cc
 800ce98:	200062b4 	.word	0x200062b4
 800ce9c:	200066b8 	.word	0x200066b8
 800cea0:	432bc000 	.word	0x432bc000
 800cea4:	200066d4 	.word	0x200066d4

0800cea8 <sensor_timeout>:

void sensor_timeout() {
 800cea8:	b480      	push	{r7}
 800ceaa:	af00      	add	r7, sp, #0
	//Distance Sensor Timeout: Distance of current Sensor = -1
	distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->distance =
 800ceac:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <sensor_timeout+0x3c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	4b0c      	ldr	r3, [pc, #48]	; (800cee4 <sensor_timeout+0x3c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	7a5b      	ldrb	r3, [r3, #9]
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a0a      	ldr	r2, [pc, #40]	; (800cee8 <sensor_timeout+0x40>)
 800cec0:	611a      	str	r2, [r3, #16]
			-1;
	distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->overflow =
 800cec2:	4b08      	ldr	r3, [pc, #32]	; (800cee4 <sensor_timeout+0x3c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	4b06      	ldr	r3, [pc, #24]	; (800cee4 <sensor_timeout+0x3c>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	7a5b      	ldrb	r3, [r3, #9]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2201      	movs	r2, #1
 800ced6:	751a      	strb	r2, [r3, #20]
			1;
}
 800ced8:	bf00      	nop
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	200066cc 	.word	0x200066cc
 800cee8:	bf800000 	.word	0xbf800000

0800ceec <distance_sensor_timer_callback>:

void distance_sensor_timer_callback() {
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
	if (TriggerFlag == 1) //Innterupt from Distance-Sensor Trigger Function
 800cef0:	4b11      	ldr	r3, [pc, #68]	; (800cf38 <distance_sensor_timer_callback+0x4c>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d117      	bne.n	800cf28 <distance_sensor_timer_callback+0x3c>
			{
		HAL_GPIO_WritePin(
				distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->trig_port,
 800cef8:	4b10      	ldr	r3, [pc, #64]	; (800cf3c <distance_sensor_timer_callback+0x50>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	4b0f      	ldr	r3, [pc, #60]	; (800cf3c <distance_sensor_timer_callback+0x50>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	7a5b      	ldrb	r3, [r3, #9]
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	681b      	ldr	r3, [r3, #0]
		HAL_GPIO_WritePin(
 800cf0a:	6898      	ldr	r0, [r3, #8]
				distance_sensor_handler_ptr->distance_sensors[distance_sensor_handler_ptr->current_sensor]->trig_pin,
 800cf0c:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <distance_sensor_timer_callback+0x50>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	685a      	ldr	r2, [r3, #4]
 800cf12:	4b0a      	ldr	r3, [pc, #40]	; (800cf3c <distance_sensor_timer_callback+0x50>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	7a5b      	ldrb	r3, [r3, #9]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	681b      	ldr	r3, [r3, #0]
		HAL_GPIO_WritePin(
 800cf1e:	899b      	ldrh	r3, [r3, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	4619      	mov	r1, r3
 800cf24:	f7f5 f9be 	bl	80022a4 <HAL_GPIO_WritePin>
				0);
	}
	if (TriggerFlag == 0) //Interrupt from Distance-Sensor Timeout Echo
 800cf28:	4b03      	ldr	r3, [pc, #12]	; (800cf38 <distance_sensor_timer_callback+0x4c>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <distance_sensor_timer_callback+0x48>
			{
		sensor_timeout();
 800cf30:	f7ff ffba 	bl	800cea8 <sensor_timeout>
	}
}
 800cf34:	bf00      	nop
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	200066d6 	.word	0x200066d6
 800cf3c:	200066cc 	.word	0x200066cc

0800cf40 <__libc_init_array>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	4d0d      	ldr	r5, [pc, #52]	; (800cf78 <__libc_init_array+0x38>)
 800cf44:	4c0d      	ldr	r4, [pc, #52]	; (800cf7c <__libc_init_array+0x3c>)
 800cf46:	1b64      	subs	r4, r4, r5
 800cf48:	10a4      	asrs	r4, r4, #2
 800cf4a:	2600      	movs	r6, #0
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	d109      	bne.n	800cf64 <__libc_init_array+0x24>
 800cf50:	4d0b      	ldr	r5, [pc, #44]	; (800cf80 <__libc_init_array+0x40>)
 800cf52:	4c0c      	ldr	r4, [pc, #48]	; (800cf84 <__libc_init_array+0x44>)
 800cf54:	f000 f8f2 	bl	800d13c <_init>
 800cf58:	1b64      	subs	r4, r4, r5
 800cf5a:	10a4      	asrs	r4, r4, #2
 800cf5c:	2600      	movs	r6, #0
 800cf5e:	42a6      	cmp	r6, r4
 800cf60:	d105      	bne.n	800cf6e <__libc_init_array+0x2e>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf68:	4798      	blx	r3
 800cf6a:	3601      	adds	r6, #1
 800cf6c:	e7ee      	b.n	800cf4c <__libc_init_array+0xc>
 800cf6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf72:	4798      	blx	r3
 800cf74:	3601      	adds	r6, #1
 800cf76:	e7f2      	b.n	800cf5e <__libc_init_array+0x1e>
 800cf78:	0800d2d4 	.word	0x0800d2d4
 800cf7c:	0800d2d4 	.word	0x0800d2d4
 800cf80:	0800d2d4 	.word	0x0800d2d4
 800cf84:	0800d2d8 	.word	0x0800d2d8

0800cf88 <__retarget_lock_acquire_recursive>:
 800cf88:	4770      	bx	lr

0800cf8a <__retarget_lock_release_recursive>:
 800cf8a:	4770      	bx	lr

0800cf8c <memcpy>:
 800cf8c:	440a      	add	r2, r1
 800cf8e:	4291      	cmp	r1, r2
 800cf90:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf94:	d100      	bne.n	800cf98 <memcpy+0xc>
 800cf96:	4770      	bx	lr
 800cf98:	b510      	push	{r4, lr}
 800cf9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfa2:	4291      	cmp	r1, r2
 800cfa4:	d1f9      	bne.n	800cf9a <memcpy+0xe>
 800cfa6:	bd10      	pop	{r4, pc}

0800cfa8 <memset>:
 800cfa8:	4402      	add	r2, r0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d100      	bne.n	800cfb2 <memset+0xa>
 800cfb0:	4770      	bx	lr
 800cfb2:	f803 1b01 	strb.w	r1, [r3], #1
 800cfb6:	e7f9      	b.n	800cfac <memset+0x4>

0800cfb8 <cleanup_glue>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	460c      	mov	r4, r1
 800cfbc:	6809      	ldr	r1, [r1, #0]
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	b109      	cbz	r1, 800cfc6 <cleanup_glue+0xe>
 800cfc2:	f7ff fff9 	bl	800cfb8 <cleanup_glue>
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4628      	mov	r0, r5
 800cfca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfce:	f000 b869 	b.w	800d0a4 <_free_r>
	...

0800cfd4 <_reclaim_reent>:
 800cfd4:	4b2c      	ldr	r3, [pc, #176]	; (800d088 <_reclaim_reent+0xb4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4283      	cmp	r3, r0
 800cfda:	b570      	push	{r4, r5, r6, lr}
 800cfdc:	4604      	mov	r4, r0
 800cfde:	d051      	beq.n	800d084 <_reclaim_reent+0xb0>
 800cfe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cfe2:	b143      	cbz	r3, 800cff6 <_reclaim_reent+0x22>
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d14a      	bne.n	800d080 <_reclaim_reent+0xac>
 800cfea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfec:	6819      	ldr	r1, [r3, #0]
 800cfee:	b111      	cbz	r1, 800cff6 <_reclaim_reent+0x22>
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 f857 	bl	800d0a4 <_free_r>
 800cff6:	6961      	ldr	r1, [r4, #20]
 800cff8:	b111      	cbz	r1, 800d000 <_reclaim_reent+0x2c>
 800cffa:	4620      	mov	r0, r4
 800cffc:	f000 f852 	bl	800d0a4 <_free_r>
 800d000:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d002:	b111      	cbz	r1, 800d00a <_reclaim_reent+0x36>
 800d004:	4620      	mov	r0, r4
 800d006:	f000 f84d 	bl	800d0a4 <_free_r>
 800d00a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d00c:	b111      	cbz	r1, 800d014 <_reclaim_reent+0x40>
 800d00e:	4620      	mov	r0, r4
 800d010:	f000 f848 	bl	800d0a4 <_free_r>
 800d014:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d016:	b111      	cbz	r1, 800d01e <_reclaim_reent+0x4a>
 800d018:	4620      	mov	r0, r4
 800d01a:	f000 f843 	bl	800d0a4 <_free_r>
 800d01e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d020:	b111      	cbz	r1, 800d028 <_reclaim_reent+0x54>
 800d022:	4620      	mov	r0, r4
 800d024:	f000 f83e 	bl	800d0a4 <_free_r>
 800d028:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d02a:	b111      	cbz	r1, 800d032 <_reclaim_reent+0x5e>
 800d02c:	4620      	mov	r0, r4
 800d02e:	f000 f839 	bl	800d0a4 <_free_r>
 800d032:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d034:	b111      	cbz	r1, 800d03c <_reclaim_reent+0x68>
 800d036:	4620      	mov	r0, r4
 800d038:	f000 f834 	bl	800d0a4 <_free_r>
 800d03c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d03e:	b111      	cbz	r1, 800d046 <_reclaim_reent+0x72>
 800d040:	4620      	mov	r0, r4
 800d042:	f000 f82f 	bl	800d0a4 <_free_r>
 800d046:	69a3      	ldr	r3, [r4, #24]
 800d048:	b1e3      	cbz	r3, 800d084 <_reclaim_reent+0xb0>
 800d04a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d04c:	4620      	mov	r0, r4
 800d04e:	4798      	blx	r3
 800d050:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d052:	b1b9      	cbz	r1, 800d084 <_reclaim_reent+0xb0>
 800d054:	4620      	mov	r0, r4
 800d056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d05a:	f7ff bfad 	b.w	800cfb8 <cleanup_glue>
 800d05e:	5949      	ldr	r1, [r1, r5]
 800d060:	b941      	cbnz	r1, 800d074 <_reclaim_reent+0xa0>
 800d062:	3504      	adds	r5, #4
 800d064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d066:	2d80      	cmp	r5, #128	; 0x80
 800d068:	68d9      	ldr	r1, [r3, #12]
 800d06a:	d1f8      	bne.n	800d05e <_reclaim_reent+0x8a>
 800d06c:	4620      	mov	r0, r4
 800d06e:	f000 f819 	bl	800d0a4 <_free_r>
 800d072:	e7ba      	b.n	800cfea <_reclaim_reent+0x16>
 800d074:	680e      	ldr	r6, [r1, #0]
 800d076:	4620      	mov	r0, r4
 800d078:	f000 f814 	bl	800d0a4 <_free_r>
 800d07c:	4631      	mov	r1, r6
 800d07e:	e7ef      	b.n	800d060 <_reclaim_reent+0x8c>
 800d080:	2500      	movs	r5, #0
 800d082:	e7ef      	b.n	800d064 <_reclaim_reent+0x90>
 800d084:	bd70      	pop	{r4, r5, r6, pc}
 800d086:	bf00      	nop
 800d088:	20000100 	.word	0x20000100

0800d08c <__malloc_lock>:
 800d08c:	4801      	ldr	r0, [pc, #4]	; (800d094 <__malloc_lock+0x8>)
 800d08e:	f7ff bf7b 	b.w	800cf88 <__retarget_lock_acquire_recursive>
 800d092:	bf00      	nop
 800d094:	200066d7 	.word	0x200066d7

0800d098 <__malloc_unlock>:
 800d098:	4801      	ldr	r0, [pc, #4]	; (800d0a0 <__malloc_unlock+0x8>)
 800d09a:	f7ff bf76 	b.w	800cf8a <__retarget_lock_release_recursive>
 800d09e:	bf00      	nop
 800d0a0:	200066d7 	.word	0x200066d7

0800d0a4 <_free_r>:
 800d0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	d044      	beq.n	800d134 <_free_r+0x90>
 800d0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ae:	9001      	str	r0, [sp, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f1a1 0404 	sub.w	r4, r1, #4
 800d0b6:	bfb8      	it	lt
 800d0b8:	18e4      	addlt	r4, r4, r3
 800d0ba:	f7ff ffe7 	bl	800d08c <__malloc_lock>
 800d0be:	4a1e      	ldr	r2, [pc, #120]	; (800d138 <_free_r+0x94>)
 800d0c0:	9801      	ldr	r0, [sp, #4]
 800d0c2:	6813      	ldr	r3, [r2, #0]
 800d0c4:	b933      	cbnz	r3, 800d0d4 <_free_r+0x30>
 800d0c6:	6063      	str	r3, [r4, #4]
 800d0c8:	6014      	str	r4, [r2, #0]
 800d0ca:	b003      	add	sp, #12
 800d0cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0d0:	f7ff bfe2 	b.w	800d098 <__malloc_unlock>
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	d908      	bls.n	800d0ea <_free_r+0x46>
 800d0d8:	6825      	ldr	r5, [r4, #0]
 800d0da:	1961      	adds	r1, r4, r5
 800d0dc:	428b      	cmp	r3, r1
 800d0de:	bf01      	itttt	eq
 800d0e0:	6819      	ldreq	r1, [r3, #0]
 800d0e2:	685b      	ldreq	r3, [r3, #4]
 800d0e4:	1949      	addeq	r1, r1, r5
 800d0e6:	6021      	streq	r1, [r4, #0]
 800d0e8:	e7ed      	b.n	800d0c6 <_free_r+0x22>
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	b10b      	cbz	r3, 800d0f4 <_free_r+0x50>
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d9fa      	bls.n	800d0ea <_free_r+0x46>
 800d0f4:	6811      	ldr	r1, [r2, #0]
 800d0f6:	1855      	adds	r5, r2, r1
 800d0f8:	42a5      	cmp	r5, r4
 800d0fa:	d10b      	bne.n	800d114 <_free_r+0x70>
 800d0fc:	6824      	ldr	r4, [r4, #0]
 800d0fe:	4421      	add	r1, r4
 800d100:	1854      	adds	r4, r2, r1
 800d102:	42a3      	cmp	r3, r4
 800d104:	6011      	str	r1, [r2, #0]
 800d106:	d1e0      	bne.n	800d0ca <_free_r+0x26>
 800d108:	681c      	ldr	r4, [r3, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	6053      	str	r3, [r2, #4]
 800d10e:	4421      	add	r1, r4
 800d110:	6011      	str	r1, [r2, #0]
 800d112:	e7da      	b.n	800d0ca <_free_r+0x26>
 800d114:	d902      	bls.n	800d11c <_free_r+0x78>
 800d116:	230c      	movs	r3, #12
 800d118:	6003      	str	r3, [r0, #0]
 800d11a:	e7d6      	b.n	800d0ca <_free_r+0x26>
 800d11c:	6825      	ldr	r5, [r4, #0]
 800d11e:	1961      	adds	r1, r4, r5
 800d120:	428b      	cmp	r3, r1
 800d122:	bf04      	itt	eq
 800d124:	6819      	ldreq	r1, [r3, #0]
 800d126:	685b      	ldreq	r3, [r3, #4]
 800d128:	6063      	str	r3, [r4, #4]
 800d12a:	bf04      	itt	eq
 800d12c:	1949      	addeq	r1, r1, r5
 800d12e:	6021      	streq	r1, [r4, #0]
 800d130:	6054      	str	r4, [r2, #4]
 800d132:	e7ca      	b.n	800d0ca <_free_r+0x26>
 800d134:	b003      	add	sp, #12
 800d136:	bd30      	pop	{r4, r5, pc}
 800d138:	200066d8 	.word	0x200066d8

0800d13c <_init>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	bf00      	nop
 800d140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d142:	bc08      	pop	{r3}
 800d144:	469e      	mov	lr, r3
 800d146:	4770      	bx	lr

0800d148 <_fini>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	bf00      	nop
 800d14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14e:	bc08      	pop	{r3}
 800d150:	469e      	mov	lr, r3
 800d152:	4770      	bx	lr
