
firmware_robochallenge_hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b774  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800b914  0800b914  0001b914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba24  0800ba24  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba24  0800ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba2c  0800ba2c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ba34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006588  200001e8  0800bc1c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006770  0800bc1c  00026770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031f18  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006273  00000000  00000000  00052130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  000583a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001880  00000000  00000000  00059e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008c13  00000000  00000000  0005b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230a5  00000000  00000000  00064323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a720  00000000  00000000  000873c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121ae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007104  00000000  00000000  00121b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8fc 	.word	0x0800b8fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800b8fc 	.word	0x0800b8fc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fba8 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f82a 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f94c 	bl	8000780 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f92a 	bl	8000740 <MX_DMA_Init>
  MX_TIM4_Init();
 80004ec:	f000 f88e 	bl	800060c <MX_TIM4_Init>
  MX_TIM10_Init();
 80004f0:	f000 f902 	bl	80006f8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  distance_sensor_timer = &htim10;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <main+0x48>)
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <main+0x4c>)
 80004f8:	601a      	str	r2, [r3, #0]

   ws2812_init(&htim4);
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x50>)
 80004fc:	f00a ffd8 	bl	800b4b0 <ws2812_init>

	firmware_init();
 8000500:	f00a fee6 	bl	800b2d0 <firmware_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f007 fada 	bl	8007abc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of test_task */
  test_taskHandle = osThreadNew(test_task_fun, NULL, &test_task_attributes);
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <main+0x54>)
 800050a:	2100      	movs	r1, #0
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <main+0x58>)
 800050e:	f007 fb1f 	bl	8007b50 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <main+0x5c>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f007 faf4 	bl	8007b04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800051c:	e7fe      	b.n	800051c <main+0x44>
 800051e:	bf00      	nop
 8000520:	20006350 	.word	0x20006350
 8000524:	20004eb0 	.word	0x20004eb0
 8000528:	20004e68 	.word	0x20004e68
 800052c:	0800b980 	.word	0x0800b980
 8000530:	080008ad 	.word	0x080008ad
 8000534:	20004e64 	.word	0x20004e64

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f00b f90a 	bl	800b760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <SystemClock_Config+0xd0>)
 8000586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ac:	2310      	movs	r3, #16
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b0:	23c0      	movs	r3, #192	; 0xc0
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fb63 	bl	8002c8c <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005cc:	f000 f98a 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2101      	movs	r1, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fdc5 	bl	800317c <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f8:	f000 f974 	bl	80008e4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	; 0x38
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_TIM4_Init+0xe4>)
 800063e:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <MX_TIM4_Init+0xe8>)
 8000640:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_TIM4_Init+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_TIM4_Init+0xe4>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60-1;
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_TIM4_Init+0xe4>)
 8000650:	223b      	movs	r2, #59	; 0x3b
 8000652:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_TIM4_Init+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_TIM4_Init+0xe4>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000660:	4823      	ldr	r0, [pc, #140]	; (80006f0 <MX_TIM4_Init+0xe4>)
 8000662:	f002 ff79 	bl	8003558 <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800066c:	f000 f93a 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067a:	4619      	mov	r1, r3
 800067c:	481c      	ldr	r0, [pc, #112]	; (80006f0 <MX_TIM4_Init+0xe4>)
 800067e:	f003 fcb7 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000688:	f000 f92c 	bl	80008e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800068c:	4818      	ldr	r0, [pc, #96]	; (80006f0 <MX_TIM4_Init+0xe4>)
 800068e:	f003 f815 	bl	80036bc <HAL_TIM_PWM_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 f924 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4619      	mov	r1, r3
 80006aa:	4811      	ldr	r0, [pc, #68]	; (80006f0 <MX_TIM4_Init+0xe4>)
 80006ac:	f004 f936 	bl	800491c <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80006b6:	f000 f915 	bl	80008e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ba:	2360      	movs	r3, #96	; 0x60
 80006bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2204      	movs	r2, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <MX_TIM4_Init+0xe4>)
 80006d2:	f003 fbcb 	bl	8003e6c <HAL_TIM_PWM_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80006dc:	f000 f902 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <MX_TIM4_Init+0xe4>)
 80006e2:	f000 f99b 	bl	8000a1c <HAL_TIM_MspPostInit>

}
 80006e6:	bf00      	nop
 80006e8:	3738      	adds	r7, #56	; 0x38
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20004e68 	.word	0x20004e68
 80006f4:	40000800 	.word	0x40000800

080006f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_TIM10_Init+0x40>)
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_TIM10_Init+0x44>)
 8000700:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_TIM10_Init+0x40>)
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_TIM10_Init+0x40>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_TIM10_Init+0x40>)
 8000710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000714:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_TIM10_Init+0x40>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_TIM10_Init+0x40>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_TIM10_Init+0x40>)
 8000724:	f002 ff18 	bl	8003558 <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800072e:	f000 f8d9 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20004eb0 	.word	0x20004eb0
 800073c:	40014400 	.word	0x40014400

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <MX_DMA_Init+0x3c>)
 8000750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_DMA_Init+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	200e      	movs	r0, #14
 8000768:	f000 fb80 	bl	8000e6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800076c:	200e      	movs	r0, #14
 800076e:	f000 fb99 	bl	8000ea4 <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b40      	ldr	r3, [pc, #256]	; (800089c <MX_GPIO_Init+0x11c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a3f      	ldr	r2, [pc, #252]	; (800089c <MX_GPIO_Init+0x11c>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <MX_GPIO_Init+0x11c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <MX_GPIO_Init+0x11c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a38      	ldr	r2, [pc, #224]	; (800089c <MX_GPIO_Init+0x11c>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <MX_GPIO_Init+0x11c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_GPIO_Init+0x11c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a31      	ldr	r2, [pc, #196]	; (800089c <MX_GPIO_Init+0x11c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_GPIO_Init+0x11c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RANGE_3_TRIG_GPIO_Port, RANGE_3_TRIG_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	482b      	ldr	r0, [pc, #172]	; (80008a0 <MX_GPIO_Init+0x120>)
 80007f2:	f001 f87b 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80007fc:	4829      	ldr	r0, [pc, #164]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007fe:	f001 f875 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	4827      	ldr	r0, [pc, #156]	; (80008a8 <MX_GPIO_Init+0x128>)
 800080a:	f001 f86f 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RANGE_3_TRIG_Pin */
  GPIO_InitStruct.Pin = RANGE_3_TRIG_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RANGE_3_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	481e      	ldr	r0, [pc, #120]	; (80008a0 <MX_GPIO_Init+0x120>)
 8000828:	f000 fedc 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RANGE_3_ECHO_Pin */
  GPIO_InitStruct.Pin = RANGE_3_ECHO_Pin;
 800082c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000832:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000838:	2302      	movs	r3, #2
 800083a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RANGE_3_ECHO_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4817      	ldr	r0, [pc, #92]	; (80008a0 <MX_GPIO_Init+0x120>)
 8000844:	f000 fece 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000848:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	4810      	ldr	r0, [pc, #64]	; (80008a4 <MX_GPIO_Init+0x124>)
 8000862:	f000 febf 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <MX_GPIO_Init+0x128>)
 8000880:	f000 feb0 	bl	80015e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2105      	movs	r1, #5
 8000888:	2028      	movs	r0, #40	; 0x28
 800088a:	f000 faef 	bl	8000e6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088e:	2028      	movs	r0, #40	; 0x28
 8000890:	f000 fb08 	bl	8000ea4 <HAL_NVIC_EnableIRQ>

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000

080008ac <test_task_fun>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_test_task_fun */
void test_task_fun(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008b4:	f009 fe7a 	bl	800a5ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(250);
 80008b8:	20fa      	movs	r0, #250	; 0xfa
 80008ba:	f007 f9db 	bl	8007c74 <osDelay>
 80008be:	e7fb      	b.n	80008b8 <test_task_fun+0xc>

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 f9cf 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40014800 	.word	0x40014800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <HAL_MspInit+0x54>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x54>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_MspInit+0x54>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x54>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 fa99 	bl	8000e6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <HAL_TIM_Base_MspInit+0xc0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d13f      	bne.n	80009da <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <HAL_TIM_Base_MspInit+0xc4>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <HAL_TIM_Base_MspInit+0xc4>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <HAL_TIM_Base_MspInit+0xc4>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 8000978:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <HAL_TIM_Base_MspInit+0xcc>)
 800097a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 800097e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000982:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 8000986:	2240      	movs	r2, #64	; 0x40
 8000988:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 8000992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000996:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 800099a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 80009a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 80009b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80009bc:	4814      	ldr	r0, [pc, #80]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 80009be:	f000 fa7f 	bl	8000ec0 <HAL_DMA_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80009c8:	f7ff ff8c 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_TIM_Base_MspInit+0xc8>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80009d8:	e012      	b.n	8000a00 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM10)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_TIM_Base_MspInit+0xd0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d10d      	bne.n	8000a00 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_TIM_Base_MspInit+0xc4>)
 80009ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_TIM_Base_MspInit+0xc4>)
 80009ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f2:	6453      	str	r3, [r2, #68]	; 0x44
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_TIM_Base_MspInit+0xc4>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40000800 	.word	0x40000800
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	20004e04 	.word	0x20004e04
 8000a14:	40026058 	.word	0x40026058
 8000a18:	40014400 	.word	0x40014400

08000a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <HAL_TIM_MspPostInit+0x68>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d11d      	bne.n	8000a7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_TIM_MspPostInit+0x6c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <HAL_TIM_MspPostInit+0x6c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_TIM_MspPostInit+0x6c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <HAL_TIM_MspPostInit+0x70>)
 8000a76:	f000 fdb5 	bl	80015e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3720      	adds	r7, #32
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40000800 	.word	0x40000800
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	201a      	movs	r0, #26
 8000aa6:	f000 f9e1 	bl	8000e6c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000aaa:	201a      	movs	r0, #26
 8000aac:	f000 f9fa 	bl	8000ea4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_InitTick+0xa0>)
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_InitTick+0xa0>)
 8000aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000abe:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_InitTick+0xa0>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fd0c 	bl	80034f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000adc:	f002 fcf6 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8000ae0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae4:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <HAL_InitTick+0xa4>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	0c9b      	lsrs	r3, r3, #18
 8000aec:	3b01      	subs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_InitTick+0xa8>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <HAL_InitTick+0xac>)
 8000af4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_InitTick+0xa8>)
 8000af8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000afc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_InitTick+0xa8>)
 8000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b02:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_InitTick+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_InitTick+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <HAL_InitTick+0xa8>)
 8000b12:	f002 fd21 	bl	8003558 <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d104      	bne.n	8000b26 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <HAL_InitTick+0xa8>)
 8000b1e:	f002 fd6b 	bl	80035f8 <HAL_TIM_Base_Start_IT>
 8000b22:	4603      	mov	r3, r0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	431bde83 	.word	0x431bde83
 8000b38:	20004f00 	.word	0x20004f00
 8000b3c:	40014800 	.word	0x40014800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <DMA1_Stream3_IRQHandler+0x10>)
 8000b72:	f000 facd 	bl	8001110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20004e04 	.word	0x20004e04

08000b80 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b86:	f003 f869 	bl	8003c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20004f00 	.word	0x20004f00

08000b94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RANGE_3_ECHO_Pin);
 8000b98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b9c:	f000 feda 	bl	8001954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <OTG_FS_IRQHandler+0x10>)
 8000baa:	f001 f83b 	bl	8001c24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20005c2c 	.word	0x20005c2c

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ffd7 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f00a fd75 	bl	800b6f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fc63 	bl	80004d8 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000c20:	0800ba34 	.word	0x0800ba34
  ldr r2, =_sbss
 8000c24:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000c28:	20006770 	.word	0x20006770

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f8fc 	bl	8000e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f7ff ff16 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe44 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20004f48 	.word	0x20004f48

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20004f48 	.word	0x20004f48

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff4c 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7e:	f7ff ff61 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	6978      	ldr	r0, [r7, #20]
 8000e8a:	f7ff ffb1 	bl	8000df0 <NVIC_EncodePriority>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff80 	bl	8000d9c <__NVIC_SetPriority>
}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff54 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff fee6 	bl	8000c9c <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e099      	b.n	8001010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000efc:	e00f      	b.n	8000f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000efe:	f7ff fecd 	bl	8000c9c <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d908      	bls.n	8000f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e078      	b.n	8001010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e8      	bne.n	8000efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <HAL_DMA_Init+0x158>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d107      	bne.n	8000f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4313      	orrs	r3, r2
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f023 0307 	bic.w	r3, r3, #7
 8000f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00e      	beq.n	8000fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fa91 	bl	80014ec <DMA_CheckFifoParam>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2240      	movs	r2, #64	; 0x40
 8000fd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e016      	b.n	8001010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fa48 	bl	8001480 <DMA_CalcBaseAndBitshift>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	223f      	movs	r2, #63	; 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	f010803f 	.word	0xf010803f

0800101c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_DMA_Start_IT+0x26>
 800103e:	2302      	movs	r3, #2
 8001040:	e040      	b.n	80010c4 <HAL_DMA_Start_IT+0xa8>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d12f      	bne.n	80010b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2202      	movs	r2, #2
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 f9da 	bl	8001424 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001074:	223f      	movs	r2, #63	; 0x3f
 8001076:	409a      	lsls	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0216 	orr.w	r2, r2, #22
 800108a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0208 	orr.w	r2, r2, #8
 80010a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e005      	b.n	80010c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010be:	2302      	movs	r3, #2
 80010c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d004      	beq.n	80010ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00c      	b.n	8001104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2205      	movs	r2, #5
 80010ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0201 	bic.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800111c:	4b92      	ldr	r3, [pc, #584]	; (8001368 <HAL_DMA_IRQHandler+0x258>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a92      	ldr	r2, [pc, #584]	; (800136c <HAL_DMA_IRQHandler+0x25c>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0a9b      	lsrs	r3, r3, #10
 8001128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113a:	2208      	movs	r2, #8
 800113c:	409a      	lsls	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d01a      	beq.n	800117c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	2208      	movs	r2, #8
 800116a:	409a      	lsls	r2, r3
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001180:	2201      	movs	r2, #1
 8001182:	409a      	lsls	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d012      	beq.n	80011b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119e:	2201      	movs	r2, #1
 80011a0:	409a      	lsls	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011aa:	f043 0202 	orr.w	r2, r3, #2
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b6:	2204      	movs	r2, #4
 80011b8:	409a      	lsls	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d012      	beq.n	80011e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d4:	2204      	movs	r2, #4
 80011d6:	409a      	lsls	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e0:	f043 0204 	orr.w	r2, r3, #4
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ec:	2210      	movs	r2, #16
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d043      	beq.n	8001280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d03c      	beq.n	8001280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120a:	2210      	movs	r2, #16
 800120c:	409a      	lsls	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d018      	beq.n	8001252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d108      	bne.n	8001240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d024      	beq.n	8001280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	4798      	blx	r3
 800123e:	e01f      	b.n	8001280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01b      	beq.n	8001280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	4798      	blx	r3
 8001250:	e016      	b.n	8001280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0208 	bic.w	r2, r2, #8
 800126e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	2220      	movs	r2, #32
 8001286:	409a      	lsls	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 808e 	beq.w	80013ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8086 	beq.w	80013ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a6:	2220      	movs	r2, #32
 80012a8:	409a      	lsls	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d136      	bne.n	8001328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0216 	bic.w	r2, r2, #22
 80012c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <HAL_DMA_IRQHandler+0x1da>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0208 	bic.w	r2, r2, #8
 80012f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	223f      	movs	r2, #63	; 0x3f
 8001300:	409a      	lsls	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131a:	2b00      	cmp	r3, #0
 800131c:	d07d      	beq.n	800141a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4798      	blx	r3
        }
        return;
 8001326:	e078      	b.n	800141a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01c      	beq.n	8001370 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d108      	bne.n	8001356 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	2b00      	cmp	r3, #0
 800134a:	d030      	beq.n	80013ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
 8001354:	e02b      	b.n	80013ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135a:	2b00      	cmp	r3, #0
 800135c:	d027      	beq.n	80013ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
 8001366:	e022      	b.n	80013ae <HAL_DMA_IRQHandler+0x29e>
 8001368:	20000000 	.word	0x20000000
 800136c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10f      	bne.n	800139e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0210 	bic.w	r2, r2, #16
 800138c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d032      	beq.n	800141c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d022      	beq.n	8001408 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2205      	movs	r2, #5
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3301      	adds	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d307      	bcc.n	80013f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f2      	bne.n	80013da <HAL_DMA_IRQHandler+0x2ca>
 80013f4:	e000      	b.n	80013f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013f6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
 8001418:	e000      	b.n	800141c <HAL_DMA_IRQHandler+0x30c>
        return;
 800141a:	bf00      	nop
    }
  }
}
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001440:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b40      	cmp	r3, #64	; 0x40
 8001450:	d108      	bne.n	8001464 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001462:	e007      	b.n	8001474 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3b10      	subs	r3, #16
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <DMA_CalcBaseAndBitshift+0x64>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <DMA_CalcBaseAndBitshift+0x68>)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d909      	bls.n	80014c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	659a      	str	r2, [r3, #88]	; 0x58
 80014c0:	e007      	b.n	80014d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ca:	f023 0303 	bic.w	r3, r3, #3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	aaaaaaab 	.word	0xaaaaaaab
 80014e8:	0800b9bc 	.word	0x0800b9bc

080014ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11f      	bne.n	8001546 <DMA_CheckFifoParam+0x5a>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d856      	bhi.n	80015ba <DMA_CheckFifoParam+0xce>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <DMA_CheckFifoParam+0x28>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001525 	.word	0x08001525
 8001518:	08001537 	.word	0x08001537
 800151c:	08001525 	.word	0x08001525
 8001520:	080015bb 	.word	0x080015bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d046      	beq.n	80015be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001534:	e043      	b.n	80015be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800153e:	d140      	bne.n	80015c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001544:	e03d      	b.n	80015c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154e:	d121      	bne.n	8001594 <DMA_CheckFifoParam+0xa8>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d837      	bhi.n	80015c6 <DMA_CheckFifoParam+0xda>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <DMA_CheckFifoParam+0x70>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	0800156d 	.word	0x0800156d
 8001560:	08001573 	.word	0x08001573
 8001564:	0800156d 	.word	0x0800156d
 8001568:	08001585 	.word	0x08001585
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
      break;
 8001570:	e030      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d025      	beq.n	80015ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001582:	e022      	b.n	80015ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800158c:	d11f      	bne.n	80015ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001592:	e01c      	b.n	80015ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d903      	bls.n	80015a2 <DMA_CheckFifoParam+0xb6>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d003      	beq.n	80015a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015a0:	e018      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
      break;
 80015a6:	e015      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00e      	beq.n	80015d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
      break;
 80015b8:	e00b      	b.n	80015d2 <DMA_CheckFifoParam+0xe6>
      break;
 80015ba:	bf00      	nop
 80015bc:	e00a      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      break;
 80015be:	bf00      	nop
 80015c0:	e008      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      break;
 80015c2:	bf00      	nop
 80015c4:	e006      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      break;
 80015c6:	bf00      	nop
 80015c8:	e004      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      break;
 80015ca:	bf00      	nop
 80015cc:	e002      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80015ce:	bf00      	nop
 80015d0:	e000      	b.n	80015d4 <DMA_CheckFifoParam+0xe8>
      break;
 80015d2:	bf00      	nop
    }
  } 
  
  return status; 
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e159      	b.n	80018b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	429a      	cmp	r2, r3
 800161a:	f040 8148 	bne.w	80018ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d005      	beq.n	8001636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001632:	2b02      	cmp	r3, #2
 8001634:	d130      	bne.n	8001698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166c:	2201      	movs	r2, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 0201 	and.w	r2, r3, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d017      	beq.n	80016d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d123      	bne.n	8001728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	69b9      	ldr	r1, [r7, #24]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80a2 	beq.w	80018ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b57      	ldr	r3, [pc, #348]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a56      	ldr	r2, [pc, #344]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b54      	ldr	r3, [pc, #336]	; (80018cc <HAL_GPIO_Init+0x2e8>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001786:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_GPIO_Init+0x2f0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x202>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_GPIO_Init+0x2f4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x1fe>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a47      	ldr	r2, [pc, #284]	; (80018dc <HAL_GPIO_Init+0x2f8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x1fa>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a46      	ldr	r2, [pc, #280]	; (80018e0 <HAL_GPIO_Init+0x2fc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x1f6>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a45      	ldr	r2, [pc, #276]	; (80018e4 <HAL_GPIO_Init+0x300>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x1f2>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e008      	b.n	80017e8 <HAL_GPIO_Init+0x204>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x204>
 80017da:	2303      	movs	r3, #3
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x204>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x204>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x204>
 80017e6:	2300      	movs	r3, #0
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f002 0203 	and.w	r2, r2, #3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <HAL_GPIO_Init+0x2ec>)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_GPIO_Init+0x304>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800182a:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x304>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_GPIO_Init+0x304>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001854:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <HAL_GPIO_Init+0x304>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_GPIO_Init+0x304>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187e:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <HAL_GPIO_Init+0x304>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_GPIO_Init+0x304>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_GPIO_Init+0x304>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	f67f aea2 	bls.w	8001600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40013c00 	.word	0x40013c00

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	041a      	lsls	r2, r3, #16
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43d9      	mvns	r1, r3
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	400b      	ands	r3, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	619a      	str	r2, [r3, #24]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	4618      	mov	r0, r3
 8001974:	f009 feb4 	bl	800b6e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	b08f      	sub	sp, #60	; 0x3c
 8001988:	af0a      	add	r7, sp, #40	; 0x28
 800198a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e10f      	b.n	8001bb6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f009 f807 	bl	800a9c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 f938 	bl	8004c4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	687e      	ldr	r6, [r7, #4]
 80019e2:	466d      	mov	r5, sp
 80019e4:	f106 0410 	add.w	r4, r6, #16
 80019e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f8:	1d33      	adds	r3, r6, #4
 80019fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fc:	6838      	ldr	r0, [r7, #0]
 80019fe:	f003 f80f 	bl	8004a20 <USB_CoreInit>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0d0      	b.n	8001bb6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 f926 	bl	8004c6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e04a      	b.n	8001abc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	333d      	adds	r3, #61	; 0x3d
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	333c      	adds	r3, #60	; 0x3c
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	b298      	uxth	r0, r3
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3342      	adds	r3, #66	; 0x42
 8001a62:	4602      	mov	r2, r0
 8001a64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	333f      	adds	r3, #63	; 0x3f
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3344      	adds	r3, #68	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3348      	adds	r3, #72	; 0x48
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3350      	adds	r3, #80	; 0x50
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3af      	bcc.n	8001a26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e044      	b.n	8001b56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	3301      	adds	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3b5      	bcc.n	8001acc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	687e      	ldr	r6, [r7, #4]
 8001b68:	466d      	mov	r5, sp
 8001b6a:	f106 0410 	add.w	r4, r6, #16
 8001b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b7e:	1d33      	adds	r3, r6, #4
 8001b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b82:	6838      	ldr	r0, [r7, #0]
 8001b84:	f003 f8be 	bl	8004d04 <USB_DevInit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00d      	b.n	8001bb6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 f93a 	bl	8005e28 <USB_DevDisconnect>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_PCD_Start+0x1c>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e020      	b.n	8001c1c <HAL_PCD_Start+0x5e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d109      	bne.n	8001bfe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d005      	beq.n	8001bfe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 f810 	bl	8004c28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 f8ea 	bl	8005de6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08d      	sub	sp, #52	; 0x34
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f9a8 	bl	8005f90 <USB_GetMode>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 839d 	bne.w	8002382 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 f90c 	bl	8005e6a <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8393 	beq.w	8002380 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 f903 	bl	8005e6a <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f002 0202 	and.w	r2, r2, #2
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 f8f1 	bl	8005e6a <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d161      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0210 	bic.w	r2, r2, #16
 8001ca0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	0c5b      	lsrs	r3, r3, #17
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d124      	bne.n	8001d18 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d035      	beq.n	8001d46 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	6a38      	ldr	r0, [r7, #32]
 8001cee:	f003 ff28 	bl	8005b42 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfe:	441a      	add	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d10:	441a      	add	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	619a      	str	r2, [r3, #24]
 8001d16:	e016      	b.n	8001d46 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d110      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6a38      	ldr	r0, [r7, #32]
 8001d30:	f003 ff07 	bl	8005b42 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d40:	441a      	add	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699a      	ldr	r2, [r3, #24]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0210 	orr.w	r2, r2, #16
 8001d54:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 f885 	bl	8005e6a <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d6a:	d16e      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 f88b 	bl	8005e90 <USB_ReadDevAllOutEpInterrupt>
 8001d7a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d7c:	e062      	b.n	8001e44 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d057      	beq.n	8001e38 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 f8b0 	bl	8005ef8 <USB_ReadDevOutEPInterrupt>
 8001d98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00c      	beq.n	8001dbe <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db0:	461a      	mov	r2, r3
 8001db2:	2301      	movs	r3, #1
 8001db4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fdb1 	bl	8002920 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00c      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 feab 	bl	8002b38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e14:	461a      	mov	r2, r3
 8001e16:	2320      	movs	r3, #32
 8001e18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e30:	461a      	mov	r2, r3
 8001e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e36:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d199      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 f80b 	bl	8005e6a <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e5e:	f040 80c0 	bne.w	8001fe2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 f82c 	bl	8005ec4 <USB_ReadDevAllInEpInterrupt>
 8001e6c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e72:	e0b2      	b.n	8001fda <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80a7 	beq.w	8001fce <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 f852 	bl	8005f34 <USB_ReadDevInEPInterrupt>
 8001e90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d057      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69f9      	ldr	r1, [r7, #28]
 8001eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2301      	movs	r3, #1
 8001ed0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d132      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3348      	adds	r3, #72	; 0x48
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4403      	add	r3, r0
 8001efa:	3344      	adds	r3, #68	; 0x44
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4419      	add	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4403      	add	r3, r0
 8001f0e:	3348      	adds	r3, #72	; 0x48
 8001f10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d113      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x31c>
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3350      	adds	r3, #80	; 0x50
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	f004 f85a 	bl	8005ff4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f008 fdbd 	bl	800aac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f62:	461a      	mov	r2, r3
 8001f64:	2308      	movs	r3, #8
 8001f66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2310      	movs	r3, #16
 8001f82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2340      	movs	r3, #64	; 0x40
 8001f9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2302      	movs	r3, #2
 8001fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fc1b 	bl	8002804 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f47f af49 	bne.w	8001e74 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 ff3f 	bl	8005e6a <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ff6:	d122      	bne.n	800203e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800201e:	2100      	movs	r1, #0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fe27 	bl	8002c74 <HAL_PCDEx_LPM_Callback>
 8002026:	e002      	b.n	800202e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f008 fdb9 	bl	800aba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800203c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 ff11 	bl	8005e6a <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002052:	d112      	bne.n	800207a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f008 fd75 	bl	800ab54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002078:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fef3 	bl	8005e6a <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208e:	f040 80c7 	bne.w	8002220 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2110      	movs	r1, #16
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 ff8d 	bl	8004fcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b6:	e056      	b.n	8002166 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c4:	461a      	mov	r2, r3
 80020c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020dc:	0151      	lsls	r1, r2, #5
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	440a      	add	r2, r1
 80020e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020ea:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020fc:	0151      	lsls	r1, r2, #5
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	440a      	add	r2, r1
 8002102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800210a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002118:	461a      	mov	r2, r3
 800211a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800211e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002130:	0151      	lsls	r1, r2, #5
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	440a      	add	r2, r1
 8002136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800213a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800213e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002150:	0151      	lsls	r1, r2, #5
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	440a      	add	r2, r1
 8002156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800215a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800215e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	3301      	adds	r3, #1
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216c:	429a      	cmp	r2, r3
 800216e:	d3a3      	bcc.n	80020b8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002182:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	2b00      	cmp	r3, #0
 800218a:	d016      	beq.n	80021ba <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800219c:	f043 030b 	orr.w	r3, r3, #11
 80021a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b2:	f043 030b 	orr.w	r3, r3, #11
 80021b6:	6453      	str	r3, [r2, #68]	; 0x44
 80021b8:	e015      	b.n	80021e6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021cc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e0:	f043 030b 	orr.w	r3, r3, #11
 80021e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800220a:	461a      	mov	r2, r3
 800220c:	f003 fef2 	bl	8005ff4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800221e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fe20 	bl	8005e6a <USB_ReadInterrupts>
 800222a:	4603      	mov	r3, r0
 800222c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002234:	d124      	bne.n	8002280 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 feb6 	bl	8005fac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f002 ff1e 	bl	8005086 <USB_GetDevSpeed>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681c      	ldr	r4, [r3, #0]
 8002256:	f001 f92d 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 800225a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	4620      	mov	r0, r4
 8002266:	f002 fc3d 	bl	8004ae4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f008 fc53 	bl	800ab16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800227e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fdf0 	bl	8005e6a <USB_ReadInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d10a      	bne.n	80022aa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f008 fc30 	bl	800aafa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 0208 	and.w	r2, r2, #8
 80022a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 fddb 	bl	8005e6a <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022be:	d10f      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f008 fc88 	bl	800abe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fdc0 	bl	8005e6a <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022f4:	d10f      	bne.n	8002316 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f008 fc5b 	bl	800abbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fda5 	bl	8005e6a <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d10a      	bne.n	8002342 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f008 fc69 	bl	800ac04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fd8f 	bl	8005e6a <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d115      	bne.n	8002382 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f008 fc59 	bl	800ac20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	e000      	b.n	8002382 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002380:	bf00      	nop
    }
  }
}
 8002382:	3734      	adds	r7, #52	; 0x34
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}

08002388 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_PCD_SetAddress+0x1a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e013      	b.n	80023ca <HAL_PCD_SetAddress+0x42>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fced 	bl	8005d9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	4608      	mov	r0, r1
 80023dc:	4611      	mov	r1, r2
 80023de:	461a      	mov	r2, r3
 80023e0:	4603      	mov	r3, r0
 80023e2:	70fb      	strb	r3, [r7, #3]
 80023e4:	460b      	mov	r3, r1
 80023e6:	803b      	strh	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da0f      	bge.n	8002418 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 020f 	and.w	r2, r3, #15
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3338      	adds	r3, #56	; 0x38
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	705a      	strb	r2, [r3, #1]
 8002416:	e00f      	b.n	8002438 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	f003 020f 	and.w	r2, r3, #15
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	3304      	adds	r3, #4
 8002430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	b2da      	uxtb	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002444:	883a      	ldrh	r2, [r7, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	78ba      	ldrb	r2, [r7, #2]
 800244e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002462:	78bb      	ldrb	r3, [r7, #2]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d102      	bne.n	800246e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_PCD_EP_Open+0xaa>
 8002478:	2302      	movs	r3, #2
 800247a:	e00e      	b.n	800249a <HAL_PCD_EP_Open+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fe20 	bl	80050d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002498:	7afb      	ldrb	r3, [r7, #11]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da0f      	bge.n	80024d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 020f 	and.w	r2, r3, #15
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	3338      	adds	r3, #56	; 0x38
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	705a      	strb	r2, [r3, #1]
 80024d4:	e00f      	b.n	80024f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 020f 	and.w	r2, r3, #15
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_PCD_EP_Close+0x6e>
 800250c:	2302      	movs	r3, #2
 800250e:	e00e      	b.n	800252e <HAL_PCD_EP_Close+0x8c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fe5e 	bl	80051e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	460b      	mov	r3, r1
 8002544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	b2da      	uxtb	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	f003 f939 	bl	8005820 <USB_EP0StartXfer>
 80025ae:	e008      	b.n	80025c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6979      	ldr	r1, [r7, #20]
 80025be:	f002 feeb 	bl	8005398 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	f003 020f 	and.w	r2, r3, #15
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	460b      	mov	r3, r1
 800260a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260c:	7afb      	ldrb	r3, [r7, #11]
 800260e:	f003 020f 	and.w	r2, r3, #15
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	3338      	adds	r3, #56	; 0x38
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	3304      	adds	r3, #4
 8002622:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2201      	movs	r2, #1
 800263a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800263c:	7afb      	ldrb	r3, [r7, #11]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	b2da      	uxtb	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6979      	ldr	r1, [r7, #20]
 800266e:	f003 f8d7 	bl	8005820 <USB_EP0StartXfer>
 8002672:	e008      	b.n	8002686 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	6979      	ldr	r1, [r7, #20]
 8002682:	f002 fe89 	bl	8005398 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 020f 	and.w	r2, r3, #15
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d901      	bls.n	80026ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e050      	b.n	8002750 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da0f      	bge.n	80026d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 020f 	and.w	r2, r3, #15
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	3338      	adds	r3, #56	; 0x38
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	705a      	strb	r2, [r3, #1]
 80026d4:	e00d      	b.n	80026f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_PCD_EP_SetStall+0x82>
 800270e:	2302      	movs	r3, #2
 8002710:	e01e      	b.n	8002750 <HAL_PCD_EP_SetStall+0xc0>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fa66 	bl	8005bf2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	b2d9      	uxtb	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002740:	461a      	mov	r2, r3
 8002742:	f003 fc57 	bl	8005ff4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	f003 020f 	and.w	r2, r3, #15
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d901      	bls.n	8002776 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e042      	b.n	80027fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277a:	2b00      	cmp	r3, #0
 800277c:	da0f      	bge.n	800279e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3338      	adds	r3, #56	; 0x38
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	3304      	adds	r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	705a      	strb	r2, [r3, #1]
 800279c:	e00f      	b.n	80027be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	f003 020f 	and.w	r2, r3, #15
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	3304      	adds	r3, #4
 80027b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_PCD_EP_ClrStall+0x86>
 80027da:	2302      	movs	r3, #2
 80027dc:	e00e      	b.n	80027fc <HAL_PCD_EP_ClrStall+0xa4>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fa6e 	bl	8005cce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af02      	add	r7, sp, #8
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	3338      	adds	r3, #56	; 0x38
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d901      	bls.n	800283c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e06c      	b.n	8002916 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	429a      	cmp	r2, r3
 8002850:	d902      	bls.n	8002858 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3303      	adds	r3, #3
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002860:	e02b      	b.n	80028ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	429a      	cmp	r2, r3
 8002876:	d902      	bls.n	800287e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3303      	adds	r3, #3
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002896:	b2db      	uxtb	r3, r3
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4603      	mov	r3, r0
 800289c:	6978      	ldr	r0, [r7, #20]
 800289e:	f003 f912 	bl	8005ac6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	441a      	add	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	441a      	add	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d809      	bhi.n	80028e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028d8:	429a      	cmp	r2, r3
 80028da:	d203      	bcs.n	80028e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1be      	bne.n	8002862 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d811      	bhi.n	8002914 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	2201      	movs	r2, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	43db      	mvns	r3, r3
 800290a:	6939      	ldr	r1, [r7, #16]
 800290c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002910:	4013      	ands	r3, r2
 8002912:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	333c      	adds	r3, #60	; 0x3c
 8002938:	3304      	adds	r3, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b01      	cmp	r3, #1
 8002954:	f040 80a0 	bne.w	8002a98 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d015      	beq.n	800298e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a72      	ldr	r2, [pc, #456]	; (8002b30 <PCD_EP_OutXfrComplete_int+0x210>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f240 80dd 	bls.w	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80d7 	beq.w	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002984:	461a      	mov	r2, r3
 8002986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298a:	6093      	str	r3, [r2, #8]
 800298c:	e0cb      	b.n	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	461a      	mov	r2, r3
 80029a6:	2320      	movs	r3, #32
 80029a8:	6093      	str	r3, [r2, #8]
 80029aa:	e0bc      	b.n	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80b7 	bne.w	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a5d      	ldr	r2, [pc, #372]	; (8002b30 <PCD_EP_OutXfrComplete_int+0x210>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d90f      	bls.n	80029e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	e0a2      	b.n	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	0159      	lsls	r1, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a06:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4403      	add	r3, r0
 8002a16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a1a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4403      	add	r3, r0
 8002a3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4419      	add	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4403      	add	r3, r0
 8002a54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a58:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d114      	bne.n	8002a8a <PCD_EP_OutXfrComplete_int+0x16a>
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d108      	bne.n	8002a8a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a82:	461a      	mov	r2, r3
 8002a84:	2101      	movs	r1, #1
 8002a86:	f003 fab5 	bl	8005ff4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f007 fffd 	bl	800aa90 <HAL_PCD_DataOutStageCallback>
 8002a96:	e046      	b.n	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d124      	bne.n	8002aea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002abc:	6093      	str	r3, [r2, #8]
 8002abe:	e032      	b.n	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2320      	movs	r3, #32
 8002ada:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f007 ffd4 	bl	800aa90 <HAL_PCD_DataOutStageCallback>
 8002ae8:	e01d      	b.n	8002b26 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d114      	bne.n	8002b1a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d108      	bne.n	8002b1a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b12:	461a      	mov	r2, r3
 8002b14:	2100      	movs	r1, #0
 8002b16:	f003 fa6d 	bl	8005ff4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f007 ffb5 	bl	800aa90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	4f54300a 	.word	0x4f54300a
 8002b34:	4f54310a 	.word	0x4f54310a

08002b38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	333c      	adds	r3, #60	; 0x3c
 8002b50:	3304      	adds	r3, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d90e      	bls.n	8002b8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b84:	461a      	mov	r2, r3
 8002b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f007 ff6d 	bl	800aa6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d90c      	bls.n	8002bb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d108      	bne.n	8002bb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bac:	461a      	mov	r2, r3
 8002bae:	2101      	movs	r1, #1
 8002bb0:	f003 fa20 	bl	8005ff4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	4f54300a 	.word	0x4f54300a

08002bc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002be2:	883b      	ldrh	r3, [r7, #0]
 8002be4:	0419      	lsls	r1, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf0:	e028      	b.n	8002c44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e00d      	b.n	8002c22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	3340      	adds	r3, #64	; 0x40
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	4413      	add	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3ec      	bcc.n	8002c06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c2c:	883b      	ldrh	r3, [r7, #0]
 8002c2e:	0418      	lsls	r0, r3, #16
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4302      	orrs	r2, r0
 8002c3c:	3340      	adds	r3, #64	; 0x40
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e264      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	4ba3      	ldr	r3, [pc, #652]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4ba0      	ldr	r3, [pc, #640]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b9d      	ldr	r3, [pc, #628]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e23f      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b91      	ldr	r3, [pc, #580]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a90      	ldr	r2, [pc, #576]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a8a      	ldr	r2, [pc, #552]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a87      	ldr	r2, [pc, #540]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b84      	ldr	r3, [pc, #528]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a83      	ldr	r2, [pc, #524]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a80      	ldr	r2, [pc, #512]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fd ffaa 	bl	8000c9c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fd ffa6 	bl	8000c9c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e204      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fd ff96 	bl	8000c9c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fd ff92 	bl	8000c9c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f0      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c4      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4952      	ldr	r1, [pc, #328]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_RCC_OscConfig+0x2b0>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fd ff4b 	bl	8000c9c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fd ff47 	bl	8000c9c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a5      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4940      	ldr	r1, [pc, #256]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_OscConfig+0x2b0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fd ff2a 	bl	8000c9c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fd ff26 	bl	8000c9c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e184      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d030      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_RCC_OscConfig+0x2b4>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd ff0a 	bl	8000c9c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fd ff06 	bl	8000c9c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e164      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e015      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x2b4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fd fef3 	bl	8000c9c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fd feef 	bl	8000c9c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e14d      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a0 	beq.w	8003026 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_RCC_OscConfig+0x2b8>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd feb5 	bl	8000c9c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e011      	b.n	8002f5a <HAL_RCC_OscConfig+0x2ce>
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	42470000 	.word	0x42470000
 8002f40:	42470e80 	.word	0x42470e80
 8002f44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fd fea8 	bl	8000c9c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e106      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b85      	ldr	r3, [pc, #532]	; (8003170 <HAL_RCC_OscConfig+0x4e4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2f0>
 8002f6e:	4b81      	ldr	r3, [pc, #516]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x312>
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a7a      	ldr	r2, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a77      	ldr	r2, [pc, #476]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
 8002f9e:	4b75      	ldr	r3, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a74      	ldr	r2, [pc, #464]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a71      	ldr	r2, [pc, #452]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fd fe6d 	bl	8000c9c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fd fe69 	bl	8000c9c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0c5      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x33a>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fd fe57 	bl	8000c9c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd fe53 	bl	8000c9c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0af      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a55      	ldr	r2, [pc, #340]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 809b 	beq.w	8003166 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d05c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d141      	bne.n	80030c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fd fe27 	bl	8000c9c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fd fe23 	bl	8000c9c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e081      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	019b      	lsls	r3, r3, #6
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	4937      	ldr	r1, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fd fdfc 	bl	8000c9c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fd fdf8 	bl	8000c9c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e056      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x41c>
 80030c6:	e04e      	b.n	8003166 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x4ec>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fd fde5 	bl	8000c9c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fd fde1 	bl	8000c9c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e03f      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x44a>
 80030f4:	e037      	b.n	8003166 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e032      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_RCC_OscConfig+0x4e8>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d028      	beq.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d121      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d11a      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003138:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313a:	4293      	cmp	r3, r2
 800313c:	d111      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40007000 	.word	0x40007000
 8003174:	40023800 	.word	0x40023800
 8003178:	42470060 	.word	0x42470060

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fd fd16 	bl	8000c9c <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fd fd12 	bl	8000c9c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fbb4 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	0800b9a4 	.word	0x0800b9a4
 8003340:	20000000 	.word	0x20000000
 8003344:	20000004 	.word	0x20000004

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800334e:	2100      	movs	r1, #0
 8003350:	6079      	str	r1, [r7, #4]
 8003352:	2100      	movs	r1, #0
 8003354:	60f9      	str	r1, [r7, #12]
 8003356:	2100      	movs	r1, #0
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800335a:	2100      	movs	r1, #0
 800335c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335e:	4952      	ldr	r1, [pc, #328]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003360:	6889      	ldr	r1, [r1, #8]
 8003362:	f001 010c 	and.w	r1, r1, #12
 8003366:	2908      	cmp	r1, #8
 8003368:	d00d      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x3e>
 800336a:	2908      	cmp	r1, #8
 800336c:	f200 8094 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x150>
 8003370:	2900      	cmp	r1, #0
 8003372:	d002      	beq.n	800337a <HAL_RCC_GetSysClockFreq+0x32>
 8003374:	2904      	cmp	r1, #4
 8003376:	d003      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x38>
 8003378:	e08e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337a:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <HAL_RCC_GetSysClockFreq+0x164>)
 800337c:	60bb      	str	r3, [r7, #8]
       break;
 800337e:	e08e      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003382:	60bb      	str	r3, [r7, #8]
      break;
 8003384:	e08b      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003386:	4948      	ldr	r1, [pc, #288]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003388:	6849      	ldr	r1, [r1, #4]
 800338a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800338e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003390:	4945      	ldr	r1, [pc, #276]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003392:	6849      	ldr	r1, [r1, #4]
 8003394:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003398:	2900      	cmp	r1, #0
 800339a:	d024      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339c:	4942      	ldr	r1, [pc, #264]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800339e:	6849      	ldr	r1, [r1, #4]
 80033a0:	0989      	lsrs	r1, r1, #6
 80033a2:	4608      	mov	r0, r1
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033ac:	f04f 0500 	mov.w	r5, #0
 80033b0:	ea00 0204 	and.w	r2, r0, r4
 80033b4:	ea01 0305 	and.w	r3, r1, r5
 80033b8:	493d      	ldr	r1, [pc, #244]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033ba:	fb01 f003 	mul.w	r0, r1, r3
 80033be:	2100      	movs	r1, #0
 80033c0:	fb01 f102 	mul.w	r1, r1, r2
 80033c4:	1844      	adds	r4, r0, r1
 80033c6:	493a      	ldr	r1, [pc, #232]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033c8:	fba2 0101 	umull	r0, r1, r2, r1
 80033cc:	1863      	adds	r3, r4, r1
 80033ce:	4619      	mov	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	f7fc ff02 	bl	80001e0 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e04a      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	461a      	mov	r2, r3
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	ea02 0400 	and.w	r4, r2, r0
 80033fe:	ea03 0501 	and.w	r5, r3, r1
 8003402:	4620      	mov	r0, r4
 8003404:	4629      	mov	r1, r5
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	014b      	lsls	r3, r1, #5
 8003410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003414:	0142      	lsls	r2, r0, #5
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	1b00      	subs	r0, r0, r4
 800341c:	eb61 0105 	sbc.w	r1, r1, r5
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	018b      	lsls	r3, r1, #6
 800342a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800342e:	0182      	lsls	r2, r0, #6
 8003430:	1a12      	subs	r2, r2, r0
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	00d9      	lsls	r1, r3, #3
 8003440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003444:	00d0      	lsls	r0, r2, #3
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	1912      	adds	r2, r2, r4
 800344c:	eb45 0303 	adc.w	r3, r5, r3
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	0299      	lsls	r1, r3, #10
 800345a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800345e:	0290      	lsls	r0, r2, #10
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	f7fc feb6 	bl	80001e0 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_RCC_GetSysClockFreq+0x164>)
 800349a:	60bb      	str	r3, [r7, #8]
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	68bb      	ldr	r3, [r7, #8]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bdb0      	pop	{r4, r5, r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	017d7840 	.word	0x017d7840

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0b5b      	lsrs	r3, r3, #13
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	0800b9b4 	.word	0x0800b9b4

080034f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	220f      	movs	r2, #15
 8003502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCC_GetClockConfig+0x5c>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0203 	and.w	r2, r3, #3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <HAL_RCC_GetClockConfig+0x5c>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_RCC_GetClockConfig+0x5c>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_GetClockConfig+0x5c>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003536:	4b07      	ldr	r3, [pc, #28]	; (8003554 <HAL_RCC_GetClockConfig+0x60>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0207 	and.w	r2, r3, #7
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	40023c00 	.word	0x40023c00

08003558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e041      	b.n	80035ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd f9e2 	bl	8000948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 fef4 	bl	8004384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e044      	b.n	800369a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d013      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d010      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e007      	b.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000

080036bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f839 	bl	800375a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 fe42 	bl	8004384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e022      	b.n	80037e2 <HAL_TIM_PWM_Start_DMA+0x72>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d109      	bne.n	80037b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e015      	b.n	80037e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e008      	b.n	80037e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	e15d      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_PWM_Start_DMA+0x94>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e022      	b.n	800384a <HAL_TIM_PWM_Start_DMA+0xda>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b04      	cmp	r3, #4
 8003808:	d109      	bne.n	800381e <HAL_TIM_PWM_Start_DMA+0xae>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e015      	b.n	800384a <HAL_TIM_PWM_Start_DMA+0xda>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d109      	bne.n	8003838 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e008      	b.n	800384a <HAL_TIM_PWM_Start_DMA+0xda>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d024      	beq.n	8003898 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start_DMA+0xee>
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e123      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800386c:	e016      	b.n	800389c <HAL_TIM_PWM_Start_DMA+0x12c>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	e00e      	b.n	800389c <HAL_TIM_PWM_Start_DMA+0x12c>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800388c:	e006      	b.n	800389c <HAL_TIM_PWM_Start_DMA+0x12c>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003896:	e001      	b.n	800389c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e104      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x336>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	f200 80ae 	bhi.w	8003a00 <HAL_TIM_PWM_Start_DMA+0x290>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <HAL_TIM_PWM_Start_DMA+0x13c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	08003a01 	.word	0x08003a01
 80038b4:	08003a01 	.word	0x08003a01
 80038b8:	08003a01 	.word	0x08003a01
 80038bc:	08003929 	.word	0x08003929
 80038c0:	08003a01 	.word	0x08003a01
 80038c4:	08003a01 	.word	0x08003a01
 80038c8:	08003a01 	.word	0x08003a01
 80038cc:	08003971 	.word	0x08003971
 80038d0:	08003a01 	.word	0x08003a01
 80038d4:	08003a01 	.word	0x08003a01
 80038d8:	08003a01 	.word	0x08003a01
 80038dc:	080039b9 	.word	0x080039b9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	4a72      	ldr	r2, [pc, #456]	; (8003ab0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	4a71      	ldr	r2, [pc, #452]	; (8003ab4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	4a70      	ldr	r2, [pc, #448]	; (8003ab8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80038f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3334      	adds	r3, #52	; 0x34
 8003904:	461a      	mov	r2, r3
 8003906:	887b      	ldrh	r3, [r7, #2]
 8003908:	f7fd fb88 	bl	800101c <HAL_DMA_Start_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0c7      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003924:	60da      	str	r2, [r3, #12]
      break;
 8003926:	e06e      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	4a60      	ldr	r2, [pc, #384]	; (8003ab0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800392e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	4a5f      	ldr	r2, [pc, #380]	; (8003ab4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	4a5e      	ldr	r2, [pc, #376]	; (8003ab8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800393e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3338      	adds	r3, #56	; 0x38
 800394c:	461a      	mov	r2, r3
 800394e:	887b      	ldrh	r3, [r7, #2]
 8003950:	f7fd fb64 	bl	800101c <HAL_DMA_Start_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0a3      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800396c:	60da      	str	r2, [r3, #12]
      break;
 800396e:	e04a      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a4e      	ldr	r2, [pc, #312]	; (8003ab0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003976:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4a4d      	ldr	r2, [pc, #308]	; (8003ab4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003986:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	333c      	adds	r3, #60	; 0x3c
 8003994:	461a      	mov	r2, r3
 8003996:	887b      	ldrh	r3, [r7, #2]
 8003998:	f7fd fb40 	bl	800101c <HAL_DMA_Start_IT>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e07f      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b4:	60da      	str	r2, [r3, #12]
      break;
 80039b6:	e026      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	4a3c      	ldr	r2, [pc, #240]	; (8003ab0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	4a3b      	ldr	r2, [pc, #236]	; (8003ab4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4a3a      	ldr	r2, [pc, #232]	; (8003ab8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80039ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3340      	adds	r3, #64	; 0x40
 80039dc:	461a      	mov	r2, r3
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	f7fd fb1c 	bl	800101c <HAL_DMA_Start_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e05b      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039fc:	60da      	str	r2, [r3, #12]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d14b      	bne.n	8003aa4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2201      	movs	r2, #1
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 ff5b 	bl	80048d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a27      	ldr	r2, [pc, #156]	; (8003abc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d013      	beq.n	8003a70 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_TIM_PWM_Start_DMA+0x300>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d111      	bne.n	8003a94 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d010      	beq.n	8003aa4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	e007      	b.n	8003aa4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	08004275 	.word	0x08004275
 8003ab4:	0800431d 	.word	0x0800431d
 8003ab8:	080041e3 	.word	0x080041e3
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40014000 	.word	0x40014000

08003ad0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d855      	bhi.n	8003b90 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b21 	.word	0x08003b21
 8003af0:	08003b91 	.word	0x08003b91
 8003af4:	08003b91 	.word	0x08003b91
 8003af8:	08003b91 	.word	0x08003b91
 8003afc:	08003b3d 	.word	0x08003b3d
 8003b00:	08003b91 	.word	0x08003b91
 8003b04:	08003b91 	.word	0x08003b91
 8003b08:	08003b91 	.word	0x08003b91
 8003b0c:	08003b59 	.word	0x08003b59
 8003b10:	08003b91 	.word	0x08003b91
 8003b14:	08003b91 	.word	0x08003b91
 8003b18:	08003b91 	.word	0x08003b91
 8003b1c:	08003b75 	.word	0x08003b75
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fd fac9 	bl	80010cc <HAL_DMA_Abort_IT>
      break;
 8003b3a:	e02c      	b.n	8003b96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fd fabb 	bl	80010cc <HAL_DMA_Abort_IT>
      break;
 8003b56:	e01e      	b.n	8003b96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd faad 	bl	80010cc <HAL_DMA_Abort_IT>
      break;
 8003b72:	e010      	b.n	8003b96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd fa9f 	bl	80010cc <HAL_DMA_Abort_IT>
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d157      	bne.n	8003c4c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fe93 	bl	80048d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d117      	bne.n	8003be4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10f      	bne.n	8003be4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	f240 4344 	movw	r3, #1092	; 0x444
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6a1a      	ldr	r2, [r3, #32]
 8003bea:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10f      	bne.n	8003c14 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	f240 4344 	movw	r3, #1092	; 0x444
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c22:	e013      	b.n	8003c4c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d104      	bne.n	8003c34 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c32:	e00b      	b.n	8003c4c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d104      	bne.n	8003c44 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c42:	e003      	b.n	8003c4c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000

08003c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0202 	mvn.w	r2, #2
 8003c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fa77 	bl	8004192 <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa69 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f007 fbe9 	bl	800b484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0204 	mvn.w	r2, #4
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa4d 	bl	8004192 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fa3f 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f007 fbbf 	bl	800b484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0208 	mvn.w	r2, #8
 8003d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2204      	movs	r2, #4
 8003d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fa23 	bl	8004192 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa15 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f007 fb95 	bl	800b484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0210 	mvn.w	r2, #16
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f9f9 	bl	8004192 <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9eb 	bl	800417e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f007 fb6b 	bl	800b484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10e      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d107      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0201 	mvn.w	r2, #1
 8003dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc fd70 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df8:	2b80      	cmp	r3, #128	; 0x80
 8003dfa:	d107      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fe00 	bl	8004a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d107      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9c1 	bl	80041ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0220 	mvn.w	r2, #32
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fdca 	bl	80049f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0ae      	b.n	8003fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	f200 809f 	bhi.w	8003fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003fd9 	.word	0x08003fd9
 8003ea8:	08003fd9 	.word	0x08003fd9
 8003eac:	08003fd9 	.word	0x08003fd9
 8003eb0:	08003f15 	.word	0x08003f15
 8003eb4:	08003fd9 	.word	0x08003fd9
 8003eb8:	08003fd9 	.word	0x08003fd9
 8003ebc:	08003fd9 	.word	0x08003fd9
 8003ec0:	08003f57 	.word	0x08003f57
 8003ec4:	08003fd9 	.word	0x08003fd9
 8003ec8:	08003fd9 	.word	0x08003fd9
 8003ecc:	08003fd9 	.word	0x08003fd9
 8003ed0:	08003f97 	.word	0x08003f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fad2 	bl	8004484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0208 	orr.w	r2, r2, #8
 8003eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0204 	bic.w	r2, r2, #4
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6999      	ldr	r1, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	619a      	str	r2, [r3, #24]
      break;
 8003f12:	e064      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb18 	bl	8004550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6999      	ldr	r1, [r3, #24]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	021a      	lsls	r2, r3, #8
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	619a      	str	r2, [r3, #24]
      break;
 8003f54:	e043      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fb63 	bl	8004628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0208 	orr.w	r2, r2, #8
 8003f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0204 	bic.w	r2, r2, #4
 8003f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69d9      	ldr	r1, [r3, #28]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	61da      	str	r2, [r3, #28]
      break;
 8003f94:	e023      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fbad 	bl	80046fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69d9      	ldr	r1, [r3, #28]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	61da      	str	r2, [r3, #28]
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x1c>
 8004008:	2302      	movs	r3, #2
 800400a:	e0b4      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x186>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004044:	d03e      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404a:	f200 8087 	bhi.w	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	f000 8086 	beq.w	8004162 <HAL_TIM_ConfigClockSource+0x172>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d87f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b70      	cmp	r3, #112	; 0x70
 800405e:	d01a      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xa6>
 8004060:	2b70      	cmp	r3, #112	; 0x70
 8004062:	d87b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b60      	cmp	r3, #96	; 0x60
 8004066:	d050      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x11a>
 8004068:	2b60      	cmp	r3, #96	; 0x60
 800406a:	d877      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b50      	cmp	r3, #80	; 0x50
 800406e:	d03c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xfa>
 8004070:	2b50      	cmp	r3, #80	; 0x50
 8004072:	d873      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d058      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x13a>
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d86f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b30      	cmp	r3, #48	; 0x30
 800407e:	d064      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b30      	cmp	r3, #48	; 0x30
 8004082:	d86b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d060      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d867      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b10      	cmp	r3, #16
 8004092:	d05a      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	e062      	b.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f000 fbf3 	bl	8004890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e04f      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f000 fbdc 	bl	8004890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e6:	609a      	str	r2, [r3, #8]
      break;
 80040e8:	e03c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fb50 	bl	800479c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2150      	movs	r1, #80	; 0x50
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fba9 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 8004108:	e02c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	f000 fb6f 	bl	80047fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2160      	movs	r1, #96	; 0x60
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fb99 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 8004128:	e01c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	461a      	mov	r2, r3
 8004138:	f000 fb30 	bl	800479c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2140      	movs	r1, #64	; 0x40
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fb89 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 8004148:	e00c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 fb80 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 800415a:	e003      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e000      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d107      	bne.n	800420a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004208:	e02a      	b.n	8004260 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2202      	movs	r2, #2
 8004218:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004222:	e01d      	b.n	8004260 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d107      	bne.n	800423e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2204      	movs	r2, #4
 8004232:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	e010      	b.n	8004260 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2208      	movs	r2, #8
 800424c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004256:	e003      	b.n	8004260 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ffb4 	bl	80041ce <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	429a      	cmp	r2, r3
 800428a:	d10b      	bne.n	80042a4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d136      	bne.n	8004308 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a2:	e031      	b.n	8004308 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d10b      	bne.n	80042c6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2202      	movs	r2, #2
 80042b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d125      	bne.n	8004308 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	e020      	b.n	8004308 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d10b      	bne.n	80042e8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2204      	movs	r2, #4
 80042d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d114      	bne.n	8004308 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e6:	e00f      	b.n	8004308 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10a      	bne.n	8004308 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2208      	movs	r2, #8
 80042f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d103      	bne.n	8004308 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f007 f8bb 	bl	800b484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d103      	bne.n	800433c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	771a      	strb	r2, [r3, #28]
 800433a:	e019      	b.n	8004370 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d103      	bne.n	800434e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2202      	movs	r2, #2
 800434a:	771a      	strb	r2, [r3, #28]
 800434c:	e010      	b.n	8004370 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d103      	bne.n	8004360 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2204      	movs	r2, #4
 800435c:	771a      	strb	r2, [r3, #28]
 800435e:	e007      	b.n	8004370 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	429a      	cmp	r2, r3
 8004368:	d102      	bne.n	8004370 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2208      	movs	r2, #8
 800436e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff ff18 	bl	80041a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a34      	ldr	r2, [pc, #208]	; (8004468 <TIM_Base_SetConfig+0xe4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00f      	beq.n	80043bc <TIM_Base_SetConfig+0x38>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x38>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a31      	ldr	r2, [pc, #196]	; (800446c <TIM_Base_SetConfig+0xe8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x38>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a30      	ldr	r2, [pc, #192]	; (8004470 <TIM_Base_SetConfig+0xec>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x38>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <TIM_Base_SetConfig+0xf0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a25      	ldr	r2, [pc, #148]	; (8004468 <TIM_Base_SetConfig+0xe4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01b      	beq.n	800440e <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d017      	beq.n	800440e <TIM_Base_SetConfig+0x8a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a22      	ldr	r2, [pc, #136]	; (800446c <TIM_Base_SetConfig+0xe8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <TIM_Base_SetConfig+0x8a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a21      	ldr	r2, [pc, #132]	; (8004470 <TIM_Base_SetConfig+0xec>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00f      	beq.n	800440e <TIM_Base_SetConfig+0x8a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a20      	ldr	r2, [pc, #128]	; (8004474 <TIM_Base_SetConfig+0xf0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00b      	beq.n	800440e <TIM_Base_SetConfig+0x8a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <TIM_Base_SetConfig+0xf4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <TIM_Base_SetConfig+0x8a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1e      	ldr	r2, [pc, #120]	; (800447c <TIM_Base_SetConfig+0xf8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_Base_SetConfig+0x8a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <TIM_Base_SetConfig+0xfc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d108      	bne.n	8004420 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <TIM_Base_SetConfig+0xe4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d103      	bne.n	8004454 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	615a      	str	r2, [r3, #20]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800

08004484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0302 	bic.w	r3, r3, #2
 80044cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <TIM_OC1_SetConfig+0xc8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10c      	bne.n	80044fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0308 	bic.w	r3, r3, #8
 80044e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <TIM_OC1_SetConfig+0xc8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d111      	bne.n	8004526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40010000 	.word	0x40010000

08004550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f023 0210 	bic.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0320 	bic.w	r3, r3, #32
 800459a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <TIM_OC2_SetConfig+0xd4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10d      	bne.n	80045cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <TIM_OC2_SetConfig+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d113      	bne.n	80045fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000

08004628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <TIM_OC3_SetConfig+0xd0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d10d      	bne.n	80046a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800468c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <TIM_OC3_SetConfig+0xd0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d113      	bne.n	80046d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	40010000 	.word	0x40010000

080046fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	031b      	lsls	r3, r3, #12
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a10      	ldr	r2, [pc, #64]	; (8004798 <TIM_OC4_SetConfig+0x9c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d109      	bne.n	8004770 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	019b      	lsls	r3, r3, #6
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000

0800479c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0201 	bic.w	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f023 030a 	bic.w	r3, r3, #10
 80047d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b087      	sub	sp, #28
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f023 0210 	bic.w	r2, r3, #16
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	031b      	lsls	r3, r3, #12
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004836:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	f043 0307 	orr.w	r3, r3, #7
 800487c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2201      	movs	r2, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	401a      	ands	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	431a      	orrs	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004930:	2302      	movs	r3, #2
 8004932:	e050      	b.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d018      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d013      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10c      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40014000 	.word	0x40014000

080049f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a20:	b084      	sub	sp, #16
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	f107 001c 	add.w	r0, r7, #28
 8004a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d122      	bne.n	8004a7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d105      	bne.n	8004a72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f001 fb1c 	bl	80060b0 <USB_CoreReset>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	e01a      	b.n	8004ab4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 fb10 	bl	80060b0 <USB_CoreReset>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8004aa6:	e005      	b.n	8004ab4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d10b      	bne.n	8004ad2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f043 0206 	orr.w	r2, r3, #6
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ade:	b004      	add	sp, #16
 8004ae0:	4770      	bx	lr
	...

08004ae4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d165      	bne.n	8004bc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a41      	ldr	r2, [pc, #260]	; (8004c00 <USB_SetTurnaroundTime+0x11c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d906      	bls.n	8004b0e <USB_SetTurnaroundTime+0x2a>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4a40      	ldr	r2, [pc, #256]	; (8004c04 <USB_SetTurnaroundTime+0x120>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d202      	bcs.n	8004b0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b08:	230f      	movs	r3, #15
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e062      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a3c      	ldr	r2, [pc, #240]	; (8004c04 <USB_SetTurnaroundTime+0x120>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d306      	bcc.n	8004b24 <USB_SetTurnaroundTime+0x40>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4a3b      	ldr	r2, [pc, #236]	; (8004c08 <USB_SetTurnaroundTime+0x124>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d202      	bcs.n	8004b24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b1e:	230e      	movs	r3, #14
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e057      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <USB_SetTurnaroundTime+0x124>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d306      	bcc.n	8004b3a <USB_SetTurnaroundTime+0x56>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a37      	ldr	r2, [pc, #220]	; (8004c0c <USB_SetTurnaroundTime+0x128>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d202      	bcs.n	8004b3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b34:	230d      	movs	r3, #13
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e04c      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a33      	ldr	r2, [pc, #204]	; (8004c0c <USB_SetTurnaroundTime+0x128>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d306      	bcc.n	8004b50 <USB_SetTurnaroundTime+0x6c>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a32      	ldr	r2, [pc, #200]	; (8004c10 <USB_SetTurnaroundTime+0x12c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d802      	bhi.n	8004b50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e041      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4a2f      	ldr	r2, [pc, #188]	; (8004c10 <USB_SetTurnaroundTime+0x12c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d906      	bls.n	8004b66 <USB_SetTurnaroundTime+0x82>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4a2e      	ldr	r2, [pc, #184]	; (8004c14 <USB_SetTurnaroundTime+0x130>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d802      	bhi.n	8004b66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b60:	230b      	movs	r3, #11
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	e036      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <USB_SetTurnaroundTime+0x130>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d906      	bls.n	8004b7c <USB_SetTurnaroundTime+0x98>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <USB_SetTurnaroundTime+0x134>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d802      	bhi.n	8004b7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b76:	230a      	movs	r3, #10
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e02b      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <USB_SetTurnaroundTime+0x134>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d906      	bls.n	8004b92 <USB_SetTurnaroundTime+0xae>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <USB_SetTurnaroundTime+0x138>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d202      	bcs.n	8004b92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b8c:	2309      	movs	r3, #9
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e020      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <USB_SetTurnaroundTime+0x138>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d306      	bcc.n	8004ba8 <USB_SetTurnaroundTime+0xc4>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <USB_SetTurnaroundTime+0x13c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d802      	bhi.n	8004ba8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	e015      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <USB_SetTurnaroundTime+0x13c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d906      	bls.n	8004bbe <USB_SetTurnaroundTime+0xda>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <USB_SetTurnaroundTime+0x140>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d202      	bcs.n	8004bbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bb8:	2307      	movs	r3, #7
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e00a      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bbe:	2306      	movs	r3, #6
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e007      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bca:	2309      	movs	r3, #9
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e001      	b.n	8004bd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bd0:	2309      	movs	r3, #9
 8004bd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	029b      	lsls	r3, r3, #10
 8004be8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	00d8acbf 	.word	0x00d8acbf
 8004c04:	00e4e1c0 	.word	0x00e4e1c0
 8004c08:	00f42400 	.word	0x00f42400
 8004c0c:	01067380 	.word	0x01067380
 8004c10:	011a499f 	.word	0x011a499f
 8004c14:	01312cff 	.word	0x01312cff
 8004c18:	014ca43f 	.word	0x014ca43f
 8004c1c:	016e3600 	.word	0x016e3600
 8004c20:	01a6ab1f 	.word	0x01a6ab1f
 8004c24:	01e84800 	.word	0x01e84800

08004c28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f043 0201 	orr.w	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 0201 	bic.w	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d115      	bne.n	8004cba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	f7fc f80a 	bl	8000cb4 <HAL_Delay>
      ms++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f001 f972 	bl	8005f90 <USB_GetMode>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d01e      	beq.n	8004cf0 <USB_SetCurrentMode+0x84>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b31      	cmp	r3, #49	; 0x31
 8004cb6:	d9f0      	bls.n	8004c9a <USB_SetCurrentMode+0x2e>
 8004cb8:	e01a      	b.n	8004cf0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d115      	bne.n	8004cec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7fb fff1 	bl	8000cb4 <HAL_Delay>
      ms++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 f959 	bl	8005f90 <USB_GetMode>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <USB_SetCurrentMode+0x84>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b31      	cmp	r3, #49	; 0x31
 8004ce8:	d9f0      	bls.n	8004ccc <USB_SetCurrentMode+0x60>
 8004cea:	e001      	b.n	8004cf0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e005      	b.n	8004cfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b32      	cmp	r3, #50	; 0x32
 8004cf4:	d101      	bne.n	8004cfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d04:	b084      	sub	sp, #16
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e009      	b.n	8004d38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	3340      	adds	r3, #64	; 0x40
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3301      	adds	r3, #1
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b0e      	cmp	r3, #14
 8004d3c:	d9f2      	bls.n	8004d24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11c      	bne.n	8004d7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d7c:	e00b      	b.n	8004d96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2300      	movs	r3, #0
 8004da0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da8:	4619      	mov	r1, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db0:	461a      	mov	r2, r3
 8004db2:	680b      	ldr	r3, [r1, #0]
 8004db4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d10c      	bne.n	8004dd6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f945 	bl	8005054 <USB_SetDevSpeed>
 8004dca:	e008      	b.n	8004dde <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dcc:	2101      	movs	r1, #1
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f940 	bl	8005054 <USB_SetDevSpeed>
 8004dd4:	e003      	b.n	8004dde <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f93b 	bl	8005054 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dde:	2110      	movs	r1, #16
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8f3 	bl	8004fcc <USB_FlushTxFifo>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f90f 	bl	8005014 <USB_FlushRxFifo>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	461a      	mov	r2, r3
 8004e08:	2300      	movs	r3, #0
 8004e0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e043      	b.n	8004eb2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e40:	d118      	bne.n	8004e74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	461a      	mov	r2, r3
 8004e56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e013      	b.n	8004e86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e008      	b.n	8004e86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	461a      	mov	r2, r3
 8004e82:	2300      	movs	r3, #0
 8004e84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	461a      	mov	r2, r3
 8004e94:	2300      	movs	r3, #0
 8004e96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d3b7      	bcc.n	8004e2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e043      	b.n	8004f48 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed6:	d118      	bne.n	8004f0a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	461a      	mov	r2, r3
 8004eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e013      	b.n	8004f1c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	461a      	mov	r2, r3
 8004f02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e008      	b.n	8004f1c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	461a      	mov	r2, r3
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d3b7      	bcc.n	8004ec0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f043 0210 	orr.w	r2, r3, #16
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <USB_DevInit+0x2c4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f043 0208 	orr.w	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d107      	bne.n	8004fb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc4:	b004      	add	sp, #16
 8004fc6:	4770      	bx	lr
 8004fc8:	803c3800 	.word	0x803c3800

08004fcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	4a08      	ldr	r2, [pc, #32]	; (8005010 <USB_FlushTxFifo+0x44>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e006      	b.n	8005004 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d0f1      	beq.n	8004fe6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	00030d40 	.word	0x00030d40

08005014 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2210      	movs	r2, #16
 8005024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	4a08      	ldr	r2, [pc, #32]	; (8005050 <USB_FlushRxFifo+0x3c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e006      	b.n	8005044 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b10      	cmp	r3, #16
 8005040:	d0f1      	beq.n	8005026 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	00030d40 	.word	0x00030d40

08005054 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005074:	4313      	orrs	r3, r2
 8005076:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0306 	and.w	r3, r3, #6
 800509e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
 80050aa:	e00a      	b.n	80050c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d002      	beq.n	80050b8 <USB_GetDevSpeed+0x32>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d102      	bne.n	80050be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050b8:	2302      	movs	r3, #2
 80050ba:	75fb      	strb	r3, [r7, #23]
 80050bc:	e001      	b.n	80050c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050be:	230f      	movs	r3, #15
 80050c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d13a      	bne.n	8005162 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	2101      	movs	r1, #1
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	b29b      	uxth	r3, r3
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510a:	4313      	orrs	r3, r2
 800510c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d155      	bne.n	80051d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	78db      	ldrb	r3, [r3, #3]
 800513e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005140:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	059b      	lsls	r3, r3, #22
 8005146:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005148:	4313      	orrs	r3, r2
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e036      	b.n	80051d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	2101      	movs	r1, #1
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005180:	4313      	orrs	r3, r2
 8005182:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11a      	bne.n	80051d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	78db      	ldrb	r3, [r3, #3]
 80051b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051b6:	430b      	orrs	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d161      	bne.n	80052c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005212:	d11f      	bne.n	8005254 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005232:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005252:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	b29b      	uxth	r3, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005274:	4013      	ands	r3, r2
 8005276:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	b29b      	uxth	r3, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005298:	4013      	ands	r3, r2
 800529a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	0159      	lsls	r1, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	4619      	mov	r1, r3
 80052b8:	4b35      	ldr	r3, [pc, #212]	; (8005390 <USB_DeactivateEndpoint+0x1b0>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
 80052be:	e060      	b.n	8005382 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d6:	d11f      	bne.n	8005318 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005316:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	43db      	mvns	r3, r3
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005338:	4013      	ands	r3, r2
 800533a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	43db      	mvns	r3, r3
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800535c:	4013      	ands	r3, r2
 800535e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	0159      	lsls	r1, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	440b      	add	r3, r1
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	4619      	mov	r1, r3
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <USB_DeactivateEndpoint+0x1b4>)
 800537e:	4013      	ands	r3, r2
 8005380:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	ec337800 	.word	0xec337800
 8005394:	eff37800 	.word	0xeff37800

08005398 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 815c 	bne.w	8005672 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d132      	bne.n	8005428 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005404:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005420:	0cdb      	lsrs	r3, r3, #19
 8005422:	04db      	lsls	r3, r3, #19
 8005424:	6113      	str	r3, [r2, #16]
 8005426:	e074      	b.n	8005512 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005442:	0cdb      	lsrs	r3, r3, #19
 8005444:	04db      	lsls	r3, r3, #19
 8005446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005462:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005466:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800546a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6959      	ldr	r1, [r3, #20]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	440b      	add	r3, r1
 8005484:	1e59      	subs	r1, r3, #1
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	fbb1 f3f3 	udiv	r3, r1, r3
 800548e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005490:	4b9d      	ldr	r3, [pc, #628]	; (8005708 <USB_EPStartXfer+0x370>)
 8005492:	400b      	ands	r3, r1
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	0148      	lsls	r0, r1, #5
 8005498:	69f9      	ldr	r1, [r7, #28]
 800549a:	4401      	add	r1, r0
 800549c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054a0:	4313      	orrs	r3, r2
 80054a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ba:	69b9      	ldr	r1, [r7, #24]
 80054bc:	0148      	lsls	r0, r1, #5
 80054be:	69f9      	ldr	r1, [r7, #28]
 80054c0:	4401      	add	r1, r0
 80054c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054c6:	4313      	orrs	r3, r2
 80054c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	78db      	ldrb	r3, [r3, #3]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d11f      	bne.n	8005512 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	0151      	lsls	r1, r2, #5
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	440a      	add	r2, r1
 8005508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005510:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d14b      	bne.n	80055b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	461a      	mov	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d128      	bne.n	800558e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d110      	bne.n	800556e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005566:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e00f      	b.n	800558e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e12f      	b.n	8005810 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	78db      	ldrb	r3, [r3, #3]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d015      	beq.n	8005604 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8117 	beq.w	8005810 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	2101      	movs	r1, #1
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	69f9      	ldr	r1, [r7, #28]
 80055fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055fe:	4313      	orrs	r3, r2
 8005600:	634b      	str	r3, [r1, #52]	; 0x34
 8005602:	e105      	b.n	8005810 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d110      	bne.n	8005636 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	e00f      	b.n	8005656 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005654:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68d9      	ldr	r1, [r3, #12]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	b298      	uxth	r0, r3
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4603      	mov	r3, r0
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fa2b 	bl	8005ac6 <USB_WritePacket>
 8005670:	e0ce      	b.n	8005810 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568c:	0cdb      	lsrs	r3, r3, #19
 800568e:	04db      	lsls	r3, r3, #19
 8005690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d126      	bne.n	800570c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	0148      	lsls	r0, r1, #5
 80056d8:	69f9      	ldr	r1, [r7, #28]
 80056da:	4401      	add	r1, r0
 80056dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e0:	4313      	orrs	r3, r2
 80056e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005702:	6113      	str	r3, [r2, #16]
 8005704:	e036      	b.n	8005774 <USB_EPStartXfer+0x3dc>
 8005706:	bf00      	nop
 8005708:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4413      	add	r3, r2
 8005716:	1e5a      	subs	r2, r3, #1
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	8afb      	ldrh	r3, [r7, #22]
 8005732:	04d9      	lsls	r1, r3, #19
 8005734:	4b39      	ldr	r3, [pc, #228]	; (800581c <USB_EPStartXfer+0x484>)
 8005736:	400b      	ands	r3, r1
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	0148      	lsls	r0, r1, #5
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	4401      	add	r1, r0
 8005740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005744:	4313      	orrs	r3, r2
 8005746:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	8af9      	ldrh	r1, [r7, #22]
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	0148      	lsls	r0, r1, #5
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	4401      	add	r1, r0
 800576c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10d      	bne.n	8005796 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	68d9      	ldr	r1, [r3, #12]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	460a      	mov	r2, r1
 8005794:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	78db      	ldrb	r3, [r3, #3]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d128      	bne.n	80057f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d110      	bne.n	80057d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e00f      	b.n	80057f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800580e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	1ff80000 	.word	0x1ff80000

08005820 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b01      	cmp	r3, #1
 800583e:	f040 80cd 	bne.w	80059dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d132      	bne.n	80058b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800586c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800588c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	0cdb      	lsrs	r3, r3, #19
 80058aa:	04db      	lsls	r3, r3, #19
 80058ac:	6113      	str	r3, [r2, #16]
 80058ae:	e04e      	b.n	800594e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	0cdb      	lsrs	r3, r3, #19
 80058cc:	04db      	lsls	r3, r3, #19
 80058ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d903      	bls.n	8005908 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593e:	6939      	ldr	r1, [r7, #16]
 8005940:	0148      	lsls	r0, r1, #5
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	4401      	add	r1, r0
 8005946:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800594a:	4313      	orrs	r3, r2
 800594c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d11e      	bne.n	8005992 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	461a      	mov	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e092      	b.n	8005ab8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d07e      	beq.n	8005ab8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	2101      	movs	r1, #1
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	6979      	ldr	r1, [r7, #20]
 80059d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d6:	4313      	orrs	r3, r2
 80059d8:	634b      	str	r3, [r1, #52]	; 0x34
 80059da:	e06d      	b.n	8005ab8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f6:	0cdb      	lsrs	r3, r3, #19
 80059f8:	04db      	lsls	r3, r3, #19
 80059fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a1e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	0148      	lsls	r0, r1, #5
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	4401      	add	r1, r0
 8005a6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d10d      	bne.n	8005a98 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	68d9      	ldr	r1, [r3, #12]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	460a      	mov	r2, r1
 8005a96:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b089      	sub	sp, #36	; 0x24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	71fb      	strb	r3, [r7, #7]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d123      	bne.n	8005b34 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005aec:	88bb      	ldrh	r3, [r7, #4]
 8005aee:	3303      	adds	r3, #3
 8005af0:	089b      	lsrs	r3, r3, #2
 8005af2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005af4:	2300      	movs	r3, #0
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	e018      	b.n	8005b2c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	031a      	lsls	r2, r3, #12
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b06:	461a      	mov	r2, r3
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d3e2      	bcc.n	8005afa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b08b      	sub	sp, #44	; 0x2c
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	089b      	lsrs	r3, r3, #2
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	e014      	b.n	8005b98 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	3301      	adds	r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	3301      	adds	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	3301      	adds	r3, #1
 8005b96:	623b      	str	r3, [r7, #32]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d3e6      	bcc.n	8005b6e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ba0:	8bfb      	ldrh	r3, [r7, #30]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01e      	beq.n	8005be4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f107 0310 	add.w	r3, r7, #16
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	701a      	strb	r2, [r3, #0]
      i++;
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bd8:	8bfb      	ldrh	r3, [r7, #30]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bde:	8bfb      	ldrh	r3, [r7, #30]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ea      	bne.n	8005bba <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	372c      	adds	r7, #44	; 0x2c
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d12c      	bne.n	8005c68 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	db12      	blt.n	8005c46 <USB_EPSetStall+0x54>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c44:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e02b      	b.n	8005cc0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	db12      	blt.n	8005ca0 <USB_EPSetStall+0xae>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00f      	beq.n	8005ca0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c9e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d128      	bne.n	8005d3c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	78db      	ldrb	r3, [r3, #3]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d003      	beq.n	8005d1a <USB_EPClearStall+0x4c>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d138      	bne.n	8005d8c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e027      	b.n	8005d8c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	78db      	ldrb	r3, [r3, #3]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d003      	beq.n	8005d6c <USB_EPClearStall+0x9e>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	78db      	ldrb	r3, [r3, #3]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d10f      	bne.n	8005d8c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dbc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e00:	f023 0303 	bic.w	r3, r3, #3
 8005e04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e14:	f023 0302 	bic.w	r3, r3, #2
 8005e18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e56:	f043 0302 	orr.w	r3, r3, #2
 8005e5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e82:	68fb      	ldr	r3, [r7, #12]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	0c1b      	lsrs	r3, r3, #16
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	b29b      	uxth	r3, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f26:	68bb      	ldr	r3, [r7, #8]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f56:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	01db      	lsls	r3, r3, #7
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f82:	68bb      	ldr	r3, [r7, #8]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fca:	f023 0307 	bic.w	r3, r3, #7
 8005fce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	333c      	adds	r3, #60	; 0x3c
 800600a:	3304      	adds	r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4a26      	ldr	r2, [pc, #152]	; (80060ac <USB_EP0_OutStart+0xb8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d90a      	bls.n	800602e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006028:	d101      	bne.n	800602e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e037      	b.n	800609e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	461a      	mov	r2, r3
 8006036:	2300      	movs	r3, #0
 8006038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f043 0318 	orr.w	r3, r3, #24
 8006060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006074:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10f      	bne.n	800609c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	461a      	mov	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006096:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800609a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	4f54300a 	.word	0x4f54300a

080060b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	4a13      	ldr	r2, [pc, #76]	; (8006110 <USB_CoreReset+0x60>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d901      	bls.n	80060cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e01a      	b.n	8006102 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	daf3      	bge.n	80060bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	4a09      	ldr	r2, [pc, #36]	; (8006110 <USB_CoreReset+0x60>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d0f1      	beq.n	80060e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	00030d40 	.word	0x00030d40

08006114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006120:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006124:	f004 ff14 	bl	800af50 <USBD_static_malloc>
 8006128:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006138:	2302      	movs	r3, #2
 800613a:	e066      	b.n	800620a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7c1b      	ldrb	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d119      	bne.n	8006180 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800614c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006150:	2202      	movs	r2, #2
 8006152:	2181      	movs	r1, #129	; 0x81
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f004 fdd8 	bl	800ad0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006164:	2202      	movs	r2, #2
 8006166:	2101      	movs	r1, #1
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f004 fdce 	bl	800ad0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2210      	movs	r2, #16
 800617a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800617e:	e016      	b.n	80061ae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006180:	2340      	movs	r3, #64	; 0x40
 8006182:	2202      	movs	r2, #2
 8006184:	2181      	movs	r1, #129	; 0x81
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f004 fdbf 	bl	800ad0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006192:	2340      	movs	r3, #64	; 0x40
 8006194:	2202      	movs	r2, #2
 8006196:	2101      	movs	r1, #1
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f004 fdb6 	bl	800ad0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2210      	movs	r2, #16
 80061aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061ae:	2308      	movs	r3, #8
 80061b0:	2203      	movs	r2, #3
 80061b2:	2182      	movs	r1, #130	; 0x82
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f004 fda8 	bl	800ad0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7c1b      	ldrb	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061ee:	2101      	movs	r1, #1
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f004 fe79 	bl	800aee8 <USBD_LL_PrepareReceive>
 80061f6:	e007      	b.n	8006208 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	2101      	movs	r1, #1
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f004 fe70 	bl	800aee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800621e:	2181      	movs	r1, #129	; 0x81
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f004 fd98 	bl	800ad56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800622c:	2101      	movs	r1, #1
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f004 fd91 	bl	800ad56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800623c:	2182      	movs	r1, #130	; 0x82
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f004 fd89 	bl	800ad56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626e:	4618      	mov	r0, r3
 8006270:	f004 fe7c 	bl	800af6c <USBD_static_free>
    pdev->pClassData = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006298:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e0af      	b.n	8006410 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03f      	beq.n	800633c <USBD_CDC_Setup+0xb4>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	f040 809f 	bne.w	8006400 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d02e      	beq.n	8006328 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da16      	bge.n	8006302 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80062e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	88d2      	ldrh	r2, [r2, #6]
 80062e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	88db      	ldrh	r3, [r3, #6]
 80062ec:	2b07      	cmp	r3, #7
 80062ee:	bf28      	it	cs
 80062f0:	2307      	movcs	r3, #7
 80062f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	89fa      	ldrh	r2, [r7, #14]
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 fb19 	bl	8007932 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006300:	e085      	b.n	800640e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	785a      	ldrb	r2, [r3, #1]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	88db      	ldrh	r3, [r3, #6]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006318:	6939      	ldr	r1, [r7, #16]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	461a      	mov	r2, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 fb32 	bl	800798a <USBD_CtlPrepareRx>
      break;
 8006326:	e072      	b.n	800640e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	7850      	ldrb	r0, [r2, #1]
 8006334:	2200      	movs	r2, #0
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	4798      	blx	r3
      break;
 800633a:	e068      	b.n	800640e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b0b      	cmp	r3, #11
 8006342:	d852      	bhi.n	80063ea <USBD_CDC_Setup+0x162>
 8006344:	a201      	add	r2, pc, #4	; (adr r2, 800634c <USBD_CDC_Setup+0xc4>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	0800637d 	.word	0x0800637d
 8006350:	080063f9 	.word	0x080063f9
 8006354:	080063eb 	.word	0x080063eb
 8006358:	080063eb 	.word	0x080063eb
 800635c:	080063eb 	.word	0x080063eb
 8006360:	080063eb 	.word	0x080063eb
 8006364:	080063eb 	.word	0x080063eb
 8006368:	080063eb 	.word	0x080063eb
 800636c:	080063eb 	.word	0x080063eb
 8006370:	080063eb 	.word	0x080063eb
 8006374:	080063a7 	.word	0x080063a7
 8006378:	080063d1 	.word	0x080063d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b03      	cmp	r3, #3
 8006386:	d107      	bne.n	8006398 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006388:	f107 030a 	add.w	r3, r7, #10
 800638c:	2202      	movs	r2, #2
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 face 	bl	8007932 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006396:	e032      	b.n	80063fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 fa58 	bl	8007850 <USBD_CtlError>
            ret = USBD_FAIL;
 80063a0:	2303      	movs	r3, #3
 80063a2:	75fb      	strb	r3, [r7, #23]
          break;
 80063a4:	e02b      	b.n	80063fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d107      	bne.n	80063c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063b2:	f107 030d 	add.w	r3, r7, #13
 80063b6:	2201      	movs	r2, #1
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 fab9 	bl	8007932 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063c0:	e01d      	b.n	80063fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fa43 	bl	8007850 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ca:	2303      	movs	r3, #3
 80063cc:	75fb      	strb	r3, [r7, #23]
          break;
 80063ce:	e016      	b.n	80063fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d00f      	beq.n	80063fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fa36 	bl	8007850 <USBD_CtlError>
            ret = USBD_FAIL;
 80063e4:	2303      	movs	r3, #3
 80063e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063e8:	e008      	b.n	80063fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fa2f 	bl	8007850 <USBD_CtlError>
          ret = USBD_FAIL;
 80063f2:	2303      	movs	r3, #3
 80063f4:	75fb      	strb	r3, [r7, #23]
          break;
 80063f6:	e002      	b.n	80063fe <USBD_CDC_Setup+0x176>
          break;
 80063f8:	bf00      	nop
 80063fa:	e008      	b.n	800640e <USBD_CDC_Setup+0x186>
          break;
 80063fc:	bf00      	nop
      }
      break;
 80063fe:	e006      	b.n	800640e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fa24 	bl	8007850 <USBD_CtlError>
      ret = USBD_FAIL;
 8006408:	2303      	movs	r3, #3
 800640a:	75fb      	strb	r3, [r7, #23]
      break;
 800640c:	bf00      	nop
  }

  return (uint8_t)ret;
 800640e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800642a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	e04f      	b.n	80064da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	3318      	adds	r3, #24
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d029      	beq.n	80064ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	3318      	adds	r3, #24
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	78f9      	ldrb	r1, [r7, #3]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	460b      	mov	r3, r1
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	1a5b      	subs	r3, r3, r1
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4403      	add	r3, r0
 8006478:	3344      	adds	r3, #68	; 0x44
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006480:	fb03 f301 	mul.w	r3, r3, r1
 8006484:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006486:	2b00      	cmp	r3, #0
 8006488:	d110      	bne.n	80064ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	3318      	adds	r3, #24
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800649e:	78f9      	ldrb	r1, [r7, #3]
 80064a0:	2300      	movs	r3, #0
 80064a2:	2200      	movs	r2, #0
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f004 fcfe 	bl	800aea6 <USBD_LL_Transmit>
 80064aa:	e015      	b.n	80064d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	e015      	b.n	8006530 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f004 fd0e 	bl	800af2a <USBD_LL_GetRxDataSize>
 800650e:	4602      	mov	r2, r0
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800652a:	4611      	mov	r1, r2
 800652c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006546:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	e01b      	b.n	800658a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d015      	beq.n	8006588 <USBD_CDC_EP0_RxReady+0x50>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006562:	2bff      	cmp	r3, #255	; 0xff
 8006564:	d010      	beq.n	8006588 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006574:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800657c:	b292      	uxth	r2, r2
 800657e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	22ff      	movs	r2, #255	; 0xff
 8006584:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2243      	movs	r2, #67	; 0x43
 80065a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80065a2:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	20000094 	.word	0x20000094

080065b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2243      	movs	r2, #67	; 0x43
 80065c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80065c2:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	20000050 	.word	0x20000050

080065d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2243      	movs	r2, #67	; 0x43
 80065e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80065e2:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	200000d8 	.word	0x200000d8

080065f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	220a      	movs	r2, #10
 8006600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006602:	4b03      	ldr	r3, [pc, #12]	; (8006610 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	2000000c 	.word	0x2000000c

08006614 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006624:	2303      	movs	r3, #3
 8006626:	e004      	b.n	8006632 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006650:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	e008      	b.n	800666e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	e004      	b.n	80066a0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80066bc:	2301      	movs	r3, #1
 80066be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e01a      	b.n	8006704 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d114      	bne.n	8006702 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2201      	movs	r2, #1
 80066dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066f6:	2181      	movs	r1, #129	; 0x81
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f004 fbd4 	bl	800aea6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006726:	2303      	movs	r3, #3
 8006728:	e016      	b.n	8006758 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7c1b      	ldrb	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800673c:	2101      	movs	r1, #1
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f004 fbd2 	bl	800aee8 <USBD_LL_PrepareReceive>
 8006744:	e007      	b.n	8006756 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800674c:	2340      	movs	r3, #64	; 0x40
 800674e:	2101      	movs	r1, #1
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f004 fbc9 	bl	800aee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	e01f      	b.n	80067b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	79fa      	ldrb	r2, [r7, #7]
 80067aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f004 fa45 	bl	800ac3c <USBD_LL_Init>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e016      	b.n	8006806 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	f107 020e 	add.w	r2, r7, #14
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	4602      	mov	r2, r0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f004 fa5c 	bl	800acd4 <USBD_LL_Start>
 800681c:	4603      	mov	r3, r0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006848:	2303      	movs	r3, #3
 800684a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	4611      	mov	r1, r2
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d007      	beq.n	800689a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	4611      	mov	r1, r2
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
  }

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 ff90 	bl	80077dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d01a      	beq.n	8006916 <USBD_LL_SetupStage+0x72>
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d822      	bhi.n	800692a <USBD_LL_SetupStage+0x86>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <USBD_LL_SetupStage+0x4a>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d00a      	beq.n	8006902 <USBD_LL_SetupStage+0x5e>
 80068ec:	e01d      	b.n	800692a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fa62 	bl	8006dc0 <USBD_StdDevReq>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006900:	e020      	b.n	8006944 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fac6 	bl	8006e9c <USBD_StdItfReq>
 8006910:	4603      	mov	r3, r0
 8006912:	73fb      	strb	r3, [r7, #15]
      break;
 8006914:	e016      	b.n	8006944 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fb05 	bl	8006f2e <USBD_StdEPReq>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]
      break;
 8006928:	e00c      	b.n	8006944 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006930:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006934:	b2db      	uxtb	r3, r3
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f004 fa2b 	bl	800ad94 <USBD_LL_StallEP>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
      break;
 8006942:	bf00      	nop
  }

  return ret;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b086      	sub	sp, #24
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	460b      	mov	r3, r1
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800695c:	7afb      	ldrb	r3, [r7, #11]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d138      	bne.n	80069d4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006968:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006970:	2b03      	cmp	r3, #3
 8006972:	d14a      	bne.n	8006a0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	429a      	cmp	r2, r3
 800697e:	d913      	bls.n	80069a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	1ad2      	subs	r2, r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	4293      	cmp	r3, r2
 8006998:	bf28      	it	cs
 800699a:	4613      	movcs	r3, r2
 800699c:	461a      	mov	r2, r3
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f001 f80f 	bl	80079c4 <USBD_CtlContinueRx>
 80069a6:	e030      	b.n	8006a0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d10b      	bne.n	80069cc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f001 f80a 	bl	80079e6 <USBD_CtlSendStatus>
 80069d2:	e01a      	b.n	8006a0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d114      	bne.n	8006a0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00e      	beq.n	8006a0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	7afa      	ldrb	r2, [r7, #11]
 80069f6:	4611      	mov	r1, r2
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	4798      	blx	r3
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	e000      	b.n	8006a0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d16b      	bne.n	8006b00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d156      	bne.n	8006ae6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d914      	bls.n	8006a6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	1ad2      	subs	r2, r2, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 ff84 	bl	8007968 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f004 fa3e 	bl	800aee8 <USBD_LL_PrepareReceive>
 8006a6c:	e03b      	b.n	8006ae6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d11c      	bne.n	8006ab4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d316      	bcc.n	8006ab4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d20f      	bcs.n	8006ab4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a94:	2200      	movs	r2, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 ff65 	bl	8007968 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2100      	movs	r1, #0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f004 fa1b 	bl	800aee8 <USBD_LL_PrepareReceive>
 8006ab2:	e018      	b.n	8006ae6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d10b      	bne.n	8006ad8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ad8:	2180      	movs	r1, #128	; 0x80
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f004 f95a 	bl	800ad94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 ff93 	bl	8007a0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d122      	bne.n	8006b36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff fe98 	bl	8006826 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006afe:	e01a      	b.n	8006b36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d114      	bne.n	8006b36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00e      	beq.n	8006b36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	7afa      	ldrb	r2, [r7, #11]
 8006b22:	4611      	mov	r1, r2
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	4798      	blx	r3
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	e000      	b.n	8006b38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e02f      	b.n	8006bd4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00f      	beq.n	8006b9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6852      	ldr	r2, [r2, #4]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	4611      	mov	r1, r2
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b9e:	2340      	movs	r3, #64	; 0x40
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f004 f8b0 	bl	800ad0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2240      	movs	r2, #64	; 0x40
 8006bb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bba:	2340      	movs	r3, #64	; 0x40
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2180      	movs	r1, #128	; 0x80
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f004 f8a2 	bl	800ad0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2240      	movs	r2, #64	; 0x40
 8006bd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2204      	movs	r2, #4
 8006c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d106      	bne.n	8006c4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e012      	b.n	8006c94 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d10b      	bne.n	8006c92 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e014      	b.n	8006ce0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d10d      	bne.n	8006cde <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e014      	b.n	8006d2c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d10d      	bne.n	8006d2a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	4611      	mov	r1, r2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6852      	ldr	r2, [r2, #4]
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	4611      	mov	r1, r2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
  }

  return USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b087      	sub	sp, #28
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	3301      	adds	r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006da0:	8a3b      	ldrh	r3, [r7, #16]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	b21a      	sxth	r2, r3
 8006da6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006db0:	89fb      	ldrh	r3, [r7, #14]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d005      	beq.n	8006de6 <USBD_StdDevReq+0x26>
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d853      	bhi.n	8006e86 <USBD_StdDevReq+0xc6>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <USBD_StdDevReq+0x3a>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d14f      	bne.n	8006e86 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]
      break;
 8006df8:	e04a      	b.n	8006e90 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d83b      	bhi.n	8006e7a <USBD_StdDevReq+0xba>
 8006e02:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <USBD_StdDevReq+0x48>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006e71 	.word	0x08006e71
 8006e10:	08006e7b 	.word	0x08006e7b
 8006e14:	08006e67 	.word	0x08006e67
 8006e18:	08006e7b 	.word	0x08006e7b
 8006e1c:	08006e3b 	.word	0x08006e3b
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e7b 	.word	0x08006e7b
 8006e28:	08006e53 	.word	0x08006e53
 8006e2c:	08006e45 	.word	0x08006e45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9de 	bl	80071f4 <USBD_GetDescriptor>
          break;
 8006e38:	e024      	b.n	8006e84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fb43 	bl	80074c8 <USBD_SetAddress>
          break;
 8006e42:	e01f      	b.n	8006e84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb82 	bl	8007550 <USBD_SetConfig>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
          break;
 8006e50:	e018      	b.n	8006e84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fc21 	bl	800769c <USBD_GetConfig>
          break;
 8006e5a:	e013      	b.n	8006e84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fc52 	bl	8007708 <USBD_GetStatus>
          break;
 8006e64:	e00e      	b.n	8006e84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fc81 	bl	8007770 <USBD_SetFeature>
          break;
 8006e6e:	e009      	b.n	8006e84 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fc90 	bl	8007798 <USBD_ClrFeature>
          break;
 8006e78:	e004      	b.n	8006e84 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fce7 	bl	8007850 <USBD_CtlError>
          break;
 8006e82:	bf00      	nop
      }
      break;
 8006e84:	e004      	b.n	8006e90 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fce1 	bl	8007850 <USBD_CtlError>
      break;
 8006e8e:	bf00      	nop
  }

  return ret;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop

08006e9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d005      	beq.n	8006ec2 <USBD_StdItfReq+0x26>
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d82f      	bhi.n	8006f1a <USBD_StdItfReq+0x7e>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <USBD_StdItfReq+0x26>
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d12b      	bne.n	8006f1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d81d      	bhi.n	8006f0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	889b      	ldrh	r3, [r3, #4]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d813      	bhi.n	8006f02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	88db      	ldrh	r3, [r3, #6]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d110      	bne.n	8006f16 <USBD_StdItfReq+0x7a>
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fd73 	bl	80079e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f00:	e009      	b.n	8006f16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fca3 	bl	8007850 <USBD_CtlError>
          break;
 8006f0a:	e004      	b.n	8006f16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fc9e 	bl	8007850 <USBD_CtlError>
          break;
 8006f14:	e000      	b.n	8006f18 <USBD_StdItfReq+0x7c>
          break;
 8006f16:	bf00      	nop
      }
      break;
 8006f18:	e004      	b.n	8006f24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fc97 	bl	8007850 <USBD_CtlError>
      break;
 8006f22:	bf00      	nop
  }

  return ret;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	889b      	ldrh	r3, [r3, #4]
 8006f40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d007      	beq.n	8006f5e <USBD_StdEPReq+0x30>
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	f200 8145 	bhi.w	80071de <USBD_StdEPReq+0x2b0>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00c      	beq.n	8006f72 <USBD_StdEPReq+0x44>
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	f040 8140 	bne.w	80071de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e13a      	b.n	80071e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d007      	beq.n	8006f8a <USBD_StdEPReq+0x5c>
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	f300 8129 	bgt.w	80071d2 <USBD_StdEPReq+0x2a4>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d07f      	beq.n	8007084 <USBD_StdEPReq+0x156>
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d03c      	beq.n	8007002 <USBD_StdEPReq+0xd4>
 8006f88:	e123      	b.n	80071d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d002      	beq.n	8006f9c <USBD_StdEPReq+0x6e>
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d016      	beq.n	8006fc8 <USBD_StdEPReq+0x9a>
 8006f9a:	e02c      	b.n	8006ff6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <USBD_StdEPReq+0x90>
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d00a      	beq.n	8006fbe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f003 fef1 	bl	800ad94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fb2:	2180      	movs	r1, #128	; 0x80
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f003 feed 	bl	800ad94 <USBD_LL_StallEP>
 8006fba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fbc:	e020      	b.n	8007000 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fc45 	bl	8007850 <USBD_CtlError>
              break;
 8006fc6:	e01b      	b.n	8007000 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	885b      	ldrh	r3, [r3, #2]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10e      	bne.n	8006fee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <USBD_StdEPReq+0xc0>
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	d008      	beq.n	8006fee <USBD_StdEPReq+0xc0>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	88db      	ldrh	r3, [r3, #6]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f003 fed3 	bl	800ad94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fcf9 	bl	80079e6 <USBD_CtlSendStatus>

              break;
 8006ff4:	e004      	b.n	8007000 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fc29 	bl	8007850 <USBD_CtlError>
              break;
 8006ffe:	bf00      	nop
          }
          break;
 8007000:	e0ec      	b.n	80071dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d002      	beq.n	8007014 <USBD_StdEPReq+0xe6>
 800700e:	2b03      	cmp	r3, #3
 8007010:	d016      	beq.n	8007040 <USBD_StdEPReq+0x112>
 8007012:	e030      	b.n	8007076 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <USBD_StdEPReq+0x108>
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b80      	cmp	r3, #128	; 0x80
 800701e:	d00a      	beq.n	8007036 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f003 feb5 	bl	800ad94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f003 feb1 	bl	800ad94 <USBD_LL_StallEP>
 8007032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007034:	e025      	b.n	8007082 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fc09 	bl	8007850 <USBD_CtlError>
              break;
 800703e:	e020      	b.n	8007082 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	885b      	ldrh	r3, [r3, #2]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11b      	bne.n	8007080 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f003 febb 	bl	800add2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fcc2 	bl	80079e6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007074:	e004      	b.n	8007080 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fbe9 	bl	8007850 <USBD_CtlError>
              break;
 800707e:	e000      	b.n	8007082 <USBD_StdEPReq+0x154>
              break;
 8007080:	bf00      	nop
          }
          break;
 8007082:	e0ab      	b.n	80071dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d002      	beq.n	8007096 <USBD_StdEPReq+0x168>
 8007090:	2b03      	cmp	r3, #3
 8007092:	d032      	beq.n	80070fa <USBD_StdEPReq+0x1cc>
 8007094:	e097      	b.n	80071c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d007      	beq.n	80070ac <USBD_StdEPReq+0x17e>
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	2b80      	cmp	r3, #128	; 0x80
 80070a0:	d004      	beq.n	80070ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fbd3 	bl	8007850 <USBD_CtlError>
                break;
 80070aa:	e091      	b.n	80071d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da0b      	bge.n	80070cc <USBD_StdEPReq+0x19e>
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	3310      	adds	r3, #16
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	4413      	add	r3, r2
 80070c8:	3304      	adds	r3, #4
 80070ca:	e00b      	b.n	80070e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	3304      	adds	r3, #4
 80070e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2202      	movs	r2, #2
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fc1d 	bl	8007932 <USBD_CtlSendData>
              break;
 80070f8:	e06a      	b.n	80071d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da11      	bge.n	8007126 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	3324      	adds	r3, #36	; 0x24
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d117      	bne.n	800714c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fb96 	bl	8007850 <USBD_CtlError>
                  break;
 8007124:	e054      	b.n	80071d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	f003 020f 	and.w	r2, r3, #15
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fb83 	bl	8007850 <USBD_CtlError>
                  break;
 800714a:	e041      	b.n	80071d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800714c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	da0b      	bge.n	800716c <USBD_StdEPReq+0x23e>
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	3310      	adds	r3, #16
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4413      	add	r3, r2
 8007168:	3304      	adds	r3, #4
 800716a:	e00b      	b.n	8007184 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	3304      	adds	r3, #4
 8007184:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <USBD_StdEPReq+0x264>
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b80      	cmp	r3, #128	; 0x80
 8007190:	d103      	bne.n	800719a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e00e      	b.n	80071b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f003 fe36 	bl	800ae10 <USBD_LL_IsStallEP>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2201      	movs	r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e002      	b.n	80071b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2202      	movs	r2, #2
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fbb7 	bl	8007932 <USBD_CtlSendData>
              break;
 80071c4:	e004      	b.n	80071d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fb41 	bl	8007850 <USBD_CtlError>
              break;
 80071ce:	bf00      	nop
          }
          break;
 80071d0:	e004      	b.n	80071dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fb3b 	bl	8007850 <USBD_CtlError>
          break;
 80071da:	bf00      	nop
      }
      break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb35 	bl	8007850 <USBD_CtlError>
      break;
 80071e6:	bf00      	nop
  }

  return ret;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	885b      	ldrh	r3, [r3, #2]
 800720e:	0a1b      	lsrs	r3, r3, #8
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	2b06      	cmp	r3, #6
 8007216:	f200 8128 	bhi.w	800746a <USBD_GetDescriptor+0x276>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <USBD_GetDescriptor+0x2c>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	0800723d 	.word	0x0800723d
 8007224:	08007255 	.word	0x08007255
 8007228:	08007295 	.word	0x08007295
 800722c:	0800746b 	.word	0x0800746b
 8007230:	0800746b 	.word	0x0800746b
 8007234:	0800740b 	.word	0x0800740b
 8007238:	08007437 	.word	0x08007437
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	7c12      	ldrb	r2, [r2, #16]
 8007248:	f107 0108 	add.w	r1, r7, #8
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
      break;
 8007252:	e112      	b.n	800747a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	7c1b      	ldrb	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10d      	bne.n	8007278 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	f107 0208 	add.w	r2, r7, #8
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
 800726c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	2202      	movs	r2, #2
 8007274:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007276:	e100      	b.n	800747a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	f107 0208 	add.w	r2, r7, #8
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	2202      	movs	r2, #2
 8007290:	701a      	strb	r2, [r3, #0]
      break;
 8007292:	e0f2      	b.n	800747a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	885b      	ldrh	r3, [r3, #2]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b05      	cmp	r3, #5
 800729c:	f200 80ac 	bhi.w	80073f8 <USBD_GetDescriptor+0x204>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <USBD_GetDescriptor+0xb4>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	080072c1 	.word	0x080072c1
 80072ac:	080072f5 	.word	0x080072f5
 80072b0:	08007329 	.word	0x08007329
 80072b4:	0800735d 	.word	0x0800735d
 80072b8:	08007391 	.word	0x08007391
 80072bc:	080073c5 	.word	0x080073c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7c12      	ldrb	r2, [r2, #16]
 80072d8:	f107 0108 	add.w	r1, r7, #8
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072e2:	e091      	b.n	8007408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fab2 	bl	8007850 <USBD_CtlError>
            err++;
 80072ec:	7afb      	ldrb	r3, [r7, #11]
 80072ee:	3301      	adds	r3, #1
 80072f0:	72fb      	strb	r3, [r7, #11]
          break;
 80072f2:	e089      	b.n	8007408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7c12      	ldrb	r2, [r2, #16]
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007316:	e077      	b.n	8007408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa98 	bl	8007850 <USBD_CtlError>
            err++;
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	3301      	adds	r3, #1
 8007324:	72fb      	strb	r3, [r7, #11]
          break;
 8007326:	e06f      	b.n	8007408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	7c12      	ldrb	r2, [r2, #16]
 8007340:	f107 0108 	add.w	r1, r7, #8
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
 8007348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800734a:	e05d      	b.n	8007408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa7e 	bl	8007850 <USBD_CtlError>
            err++;
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	3301      	adds	r3, #1
 8007358:	72fb      	strb	r3, [r7, #11]
          break;
 800735a:	e055      	b.n	8007408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7c12      	ldrb	r2, [r2, #16]
 8007374:	f107 0108 	add.w	r1, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800737e:	e043      	b.n	8007408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa64 	bl	8007850 <USBD_CtlError>
            err++;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	3301      	adds	r3, #1
 800738c:	72fb      	strb	r3, [r7, #11]
          break;
 800738e:	e03b      	b.n	8007408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e029      	b.n	8007408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa4a 	bl	8007850 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e021      	b.n	8007408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e00f      	b.n	8007408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa30 	bl	8007850 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e007      	b.n	8007408 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa28 	bl	8007850 <USBD_CtlError>
          err++;
 8007400:	7afb      	ldrb	r3, [r7, #11]
 8007402:	3301      	adds	r3, #1
 8007404:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007406:	bf00      	nop
      }
      break;
 8007408:	e037      	b.n	800747a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7c1b      	ldrb	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	f107 0208 	add.w	r2, r7, #8
 800741e:	4610      	mov	r0, r2
 8007420:	4798      	blx	r3
 8007422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007424:	e029      	b.n	800747a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fa11 	bl	8007850 <USBD_CtlError>
        err++;
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	3301      	adds	r3, #1
 8007432:	72fb      	strb	r3, [r7, #11]
      break;
 8007434:	e021      	b.n	800747a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7c1b      	ldrb	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10d      	bne.n	800745a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	f107 0208 	add.w	r2, r7, #8
 800744a:	4610      	mov	r0, r2
 800744c:	4798      	blx	r3
 800744e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	2207      	movs	r2, #7
 8007456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007458:	e00f      	b.n	800747a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9f7 	bl	8007850 <USBD_CtlError>
        err++;
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	3301      	adds	r3, #1
 8007466:	72fb      	strb	r3, [r7, #11]
      break;
 8007468:	e007      	b.n	800747a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9ef 	bl	8007850 <USBD_CtlError>
      err++;
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	3301      	adds	r3, #1
 8007476:	72fb      	strb	r3, [r7, #11]
      break;
 8007478:	bf00      	nop
  }

  if (err != 0U)
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d11e      	bne.n	80074be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	88db      	ldrh	r3, [r3, #6]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d016      	beq.n	80074b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007488:	893b      	ldrh	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00e      	beq.n	80074ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	88da      	ldrh	r2, [r3, #6]
 8007492:	893b      	ldrh	r3, [r7, #8]
 8007494:	4293      	cmp	r3, r2
 8007496:	bf28      	it	cs
 8007498:	4613      	movcs	r3, r2
 800749a:	b29b      	uxth	r3, r3
 800749c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800749e:	893b      	ldrh	r3, [r7, #8]
 80074a0:	461a      	mov	r2, r3
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa44 	bl	8007932 <USBD_CtlSendData>
 80074aa:	e009      	b.n	80074c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9ce 	bl	8007850 <USBD_CtlError>
 80074b4:	e004      	b.n	80074c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa95 	bl	80079e6 <USBD_CtlSendStatus>
 80074bc:	e000      	b.n	80074c0 <USBD_GetDescriptor+0x2cc>
    return;
 80074be:	bf00      	nop
  }
}
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop

080074c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	889b      	ldrh	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d131      	bne.n	800753e <USBD_SetAddress+0x76>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	88db      	ldrh	r3, [r3, #6]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d12d      	bne.n	800753e <USBD_SetAddress+0x76>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	2b7f      	cmp	r3, #127	; 0x7f
 80074e8:	d829      	bhi.n	800753e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d104      	bne.n	800750c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9a3 	bl	8007850 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750a:	e01d      	b.n	8007548 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	7bfa      	ldrb	r2, [r7, #15]
 8007510:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f003 fca5 	bl	800ae68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa61 	bl	80079e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2202      	movs	r2, #2
 800752e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007532:	e009      	b.n	8007548 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	e004      	b.n	8007548 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f985 	bl	8007850 <USBD_CtlError>
  }
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	885b      	ldrh	r3, [r3, #2]
 8007562:	b2da      	uxtb	r2, r3
 8007564:	4b4c      	ldr	r3, [pc, #304]	; (8007698 <USBD_SetConfig+0x148>)
 8007566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007568:	4b4b      	ldr	r3, [pc, #300]	; (8007698 <USBD_SetConfig+0x148>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d905      	bls.n	800757c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f96c 	bl	8007850 <USBD_CtlError>
    return USBD_FAIL;
 8007578:	2303      	movs	r3, #3
 800757a:	e088      	b.n	800768e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d002      	beq.n	800758e <USBD_SetConfig+0x3e>
 8007588:	2b03      	cmp	r3, #3
 800758a:	d025      	beq.n	80075d8 <USBD_SetConfig+0x88>
 800758c:	e071      	b.n	8007672 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800758e:	4b42      	ldr	r3, [pc, #264]	; (8007698 <USBD_SetConfig+0x148>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01c      	beq.n	80075d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007596:	4b40      	ldr	r3, [pc, #256]	; (8007698 <USBD_SetConfig+0x148>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075a0:	4b3d      	ldr	r3, [pc, #244]	; (8007698 <USBD_SetConfig+0x148>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff f948 	bl	800683c <USBD_SetClassConfig>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f949 	bl	8007850 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075be:	e065      	b.n	800768c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fa10 	bl	80079e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2203      	movs	r2, #3
 80075ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075ce:	e05d      	b.n	800768c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa08 	bl	80079e6 <USBD_CtlSendStatus>
      break;
 80075d6:	e059      	b.n	800768c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075d8:	4b2f      	ldr	r3, [pc, #188]	; (8007698 <USBD_SetConfig+0x148>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d112      	bne.n	8007606 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80075e8:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <USBD_SetConfig+0x148>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075f2:	4b29      	ldr	r3, [pc, #164]	; (8007698 <USBD_SetConfig+0x148>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff f93b 	bl	8006874 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9f1 	bl	80079e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007604:	e042      	b.n	800768c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <USBD_SetConfig+0x148>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d02a      	beq.n	800766a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff f929 	bl	8006874 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007622:	4b1d      	ldr	r3, [pc, #116]	; (8007698 <USBD_SetConfig+0x148>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800762c:	4b1a      	ldr	r3, [pc, #104]	; (8007698 <USBD_SetConfig+0x148>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff f902 	bl	800683c <USBD_SetClassConfig>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00f      	beq.n	8007662 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f903 	bl	8007850 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff f90e 	bl	8006874 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007660:	e014      	b.n	800768c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f9bf 	bl	80079e6 <USBD_CtlSendStatus>
      break;
 8007668:	e010      	b.n	800768c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f9bb 	bl	80079e6 <USBD_CtlSendStatus>
      break;
 8007670:	e00c      	b.n	800768c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f8eb 	bl	8007850 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800767a:	4b07      	ldr	r3, [pc, #28]	; (8007698 <USBD_SetConfig+0x148>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff f8f7 	bl	8006874 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007686:	2303      	movs	r3, #3
 8007688:	73fb      	strb	r3, [r7, #15]
      break;
 800768a:	bf00      	nop
  }

  return ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000204 	.word	0x20000204

0800769c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d004      	beq.n	80076b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f8cd 	bl	8007850 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076b6:	e023      	b.n	8007700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	dc02      	bgt.n	80076ca <USBD_GetConfig+0x2e>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dc03      	bgt.n	80076d0 <USBD_GetConfig+0x34>
 80076c8:	e015      	b.n	80076f6 <USBD_GetConfig+0x5a>
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d00b      	beq.n	80076e6 <USBD_GetConfig+0x4a>
 80076ce:	e012      	b.n	80076f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3308      	adds	r3, #8
 80076da:	2201      	movs	r2, #1
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f927 	bl	8007932 <USBD_CtlSendData>
        break;
 80076e4:	e00c      	b.n	8007700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3304      	adds	r3, #4
 80076ea:	2201      	movs	r2, #1
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f91f 	bl	8007932 <USBD_CtlSendData>
        break;
 80076f4:	e004      	b.n	8007700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f8a9 	bl	8007850 <USBD_CtlError>
        break;
 80076fe:	bf00      	nop
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	2b02      	cmp	r3, #2
 800771e:	d81e      	bhi.n	800775e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	88db      	ldrh	r3, [r3, #6]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d004      	beq.n	8007732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f890 	bl	8007850 <USBD_CtlError>
        break;
 8007730:	e01a      	b.n	8007768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f043 0202 	orr.w	r2, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	330c      	adds	r3, #12
 8007752:	2202      	movs	r2, #2
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f8eb 	bl	8007932 <USBD_CtlSendData>
      break;
 800775c:	e004      	b.n	8007768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f875 	bl	8007850 <USBD_CtlError>
      break;
 8007766:	bf00      	nop
  }
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	885b      	ldrh	r3, [r3, #2]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d106      	bne.n	8007790 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f92b 	bl	80079e6 <USBD_CtlSendStatus>
  }
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d80b      	bhi.n	80077c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	885b      	ldrh	r3, [r3, #2]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d10c      	bne.n	80077d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f910 	bl	80079e6 <USBD_CtlSendStatus>
      }
      break;
 80077c6:	e004      	b.n	80077d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f840 	bl	8007850 <USBD_CtlError>
      break;
 80077d0:	e000      	b.n	80077d4 <USBD_ClrFeature+0x3c>
      break;
 80077d2:	bf00      	nop
  }
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff fabb 	bl	8006d82 <SWAPBYTE>
 800780c:	4603      	mov	r3, r0
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3301      	adds	r3, #1
 800781e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7ff faae 	bl	8006d82 <SWAPBYTE>
 8007826:	4603      	mov	r3, r0
 8007828:	461a      	mov	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3301      	adds	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff faa1 	bl	8006d82 <SWAPBYTE>
 8007840:	4603      	mov	r3, r0
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	80da      	strh	r2, [r3, #6]
}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f003 fa99 	bl	800ad94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007862:	2100      	movs	r1, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f003 fa95 	bl	800ad94 <USBD_LL_StallEP>
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b086      	sub	sp, #24
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d036      	beq.n	80078f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800788c:	6938      	ldr	r0, [r7, #16]
 800788e:	f000 f836 	bl	80078fe <USBD_GetLen>
 8007892:	4603      	mov	r3, r0
 8007894:	3301      	adds	r3, #1
 8007896:	b29b      	uxth	r3, r3
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4413      	add	r3, r2
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	3301      	adds	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	4413      	add	r3, r2
 80078b8:	2203      	movs	r2, #3
 80078ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	3301      	adds	r3, #1
 80078c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80078c2:	e013      	b.n	80078ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	4413      	add	r3, r2
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	3301      	adds	r3, #1
 80078d4:	613b      	str	r3, [r7, #16]
    idx++;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	3301      	adds	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	3301      	adds	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e7      	bne.n	80078c4 <USBD_GetString+0x52>
 80078f4:	e000      	b.n	80078f8 <USBD_GetString+0x86>
    return;
 80078f6:	bf00      	nop
  }
}
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800790e:	e005      	b.n	800791c <USBD_GetLen+0x1e>
  {
    len++;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	3301      	adds	r3, #1
 8007914:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3301      	adds	r3, #1
 800791a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f5      	bne.n	8007910 <USBD_GetLen+0x12>
  }

  return len;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2202      	movs	r2, #2
 8007942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	2100      	movs	r1, #0
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f003 faa4 	bl	800aea6 <USBD_LL_Transmit>

  return USBD_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	2100      	movs	r1, #0
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f003 fa93 	bl	800aea6 <USBD_LL_Transmit>

  return USBD_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2203      	movs	r2, #3
 800799a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	2100      	movs	r1, #0
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f003 fa97 	bl	800aee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	2100      	movs	r1, #0
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f003 fa86 	bl	800aee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2204      	movs	r2, #4
 80079f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079f6:	2300      	movs	r3, #0
 80079f8:	2200      	movs	r2, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f003 fa52 	bl	800aea6 <USBD_LL_Transmit>

  return USBD_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2205      	movs	r2, #5
 8007a18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2100      	movs	r1, #0
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f003 fa60 	bl	800aee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <__NVIC_SetPriority>:
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	6039      	str	r1, [r7, #0]
 8007a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	db0a      	blt.n	8007a5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	490c      	ldr	r1, [pc, #48]	; (8007a80 <__NVIC_SetPriority+0x4c>)
 8007a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a52:	0112      	lsls	r2, r2, #4
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	440b      	add	r3, r1
 8007a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a5c:	e00a      	b.n	8007a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	4908      	ldr	r1, [pc, #32]	; (8007a84 <__NVIC_SetPriority+0x50>)
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	3b04      	subs	r3, #4
 8007a6c:	0112      	lsls	r2, r2, #4
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	440b      	add	r3, r1
 8007a72:	761a      	strb	r2, [r3, #24]
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	e000e100 	.word	0xe000e100
 8007a84:	e000ed00 	.word	0xe000ed00

08007a88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <SysTick_Handler+0x1c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a90:	f001 fd28 	bl	80094e4 <xTaskGetSchedulerState>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d001      	beq.n	8007a9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a9a:	f002 fb0d 	bl	800a0b8 <xPortSysTickHandler>
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	e000e010 	.word	0xe000e010

08007aa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007aac:	2100      	movs	r1, #0
 8007aae:	f06f 0004 	mvn.w	r0, #4
 8007ab2:	f7ff ffbf 	bl	8007a34 <__NVIC_SetPriority>
#endif
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ac2:	f3ef 8305 	mrs	r3, IPSR
 8007ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ace:	f06f 0305 	mvn.w	r3, #5
 8007ad2:	607b      	str	r3, [r7, #4]
 8007ad4:	e00c      	b.n	8007af0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <osKernelInitialize+0x44>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ade:	4b08      	ldr	r3, [pc, #32]	; (8007b00 <osKernelInitialize+0x44>)
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	607b      	str	r3, [r7, #4]
 8007ae8:	e002      	b.n	8007af0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295
 8007aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007af0:	687b      	ldr	r3, [r7, #4]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000208 	.word	0x20000208

08007b04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b0a:	f3ef 8305 	mrs	r3, IPSR
 8007b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b16:	f06f 0305 	mvn.w	r3, #5
 8007b1a:	607b      	str	r3, [r7, #4]
 8007b1c:	e010      	b.n	8007b40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b1e:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <osKernelStart+0x48>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d109      	bne.n	8007b3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b26:	f7ff ffbf 	bl	8007aa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <osKernelStart+0x48>)
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b30:	f001 f87c 	bl	8008c2c <vTaskStartScheduler>
      stat = osOK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	e002      	b.n	8007b40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b40:	687b      	ldr	r3, [r7, #4]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000208 	.word	0x20000208

08007b50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08e      	sub	sp, #56	; 0x38
 8007b54:	af04      	add	r7, sp, #16
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b60:	f3ef 8305 	mrs	r3, IPSR
 8007b64:	617b      	str	r3, [r7, #20]
  return(result);
 8007b66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d17e      	bne.n	8007c6a <osThreadNew+0x11a>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d07b      	beq.n	8007c6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b72:	2380      	movs	r3, #128	; 0x80
 8007b74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b76:	2318      	movs	r3, #24
 8007b78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d045      	beq.n	8007c16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <osThreadNew+0x48>
        name = attr->name;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <osThreadNew+0x6e>
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	2b38      	cmp	r3, #56	; 0x38
 8007bb0:	d805      	bhi.n	8007bbe <osThreadNew+0x6e>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <osThreadNew+0x72>
        return (NULL);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e054      	b.n	8007c6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	089b      	lsrs	r3, r3, #2
 8007bd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <osThreadNew+0xa8>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	2bbb      	cmp	r3, #187	; 0xbb
 8007be0:	d90a      	bls.n	8007bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d006      	beq.n	8007bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <osThreadNew+0xa8>
        mem = 1;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	e010      	b.n	8007c1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10c      	bne.n	8007c1a <osThreadNew+0xca>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d108      	bne.n	8007c1a <osThreadNew+0xca>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <osThreadNew+0xca>
          mem = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	e001      	b.n	8007c1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d110      	bne.n	8007c42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c28:	9202      	str	r2, [sp, #8]
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fe0c 	bl	8008854 <xTaskCreateStatic>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	e013      	b.n	8007c6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d110      	bne.n	8007c6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	f107 0310 	add.w	r3, r7, #16
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fe57 	bl	800890e <xTaskCreate>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d001      	beq.n	8007c6a <osThreadNew+0x11a>
            hTask = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c6a:	693b      	ldr	r3, [r7, #16]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3728      	adds	r7, #40	; 0x28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c7c:	f3ef 8305 	mrs	r3, IPSR
 8007c80:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <osDelay+0x1c>
    stat = osErrorISR;
 8007c88:	f06f 0305 	mvn.w	r3, #5
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	e007      	b.n	8007ca0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 ff92 	bl	8008bc4 <vTaskDelay>
    }
  }

  return (stat);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4a07      	ldr	r2, [pc, #28]	; (8007cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4a06      	ldr	r2, [pc, #24]	; (8007cdc <vApplicationGetIdleTaskMemory+0x30>)
 8007cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2280      	movs	r2, #128	; 0x80
 8007cc8:	601a      	str	r2, [r3, #0]
}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	2000020c 	.word	0x2000020c
 8007cdc:	200002c8 	.word	0x200002c8

08007ce0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a07      	ldr	r2, [pc, #28]	; (8007d0c <vApplicationGetTimerTaskMemory+0x2c>)
 8007cf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4a06      	ldr	r2, [pc, #24]	; (8007d10 <vApplicationGetTimerTaskMemory+0x30>)
 8007cf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cfe:	601a      	str	r2, [r3, #0]
}
 8007d00:	bf00      	nop
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	200004c8 	.word	0x200004c8
 8007d10:	20000584 	.word	0x20000584

08007d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f103 0208 	add.w	r2, r3, #8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f103 0208 	add.w	r2, r3, #8
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f103 0208 	add.w	r2, r3, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dcc:	d103      	bne.n	8007dd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e00c      	b.n	8007df0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e002      	b.n	8007de4 <vListInsert+0x2e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d2f6      	bcs.n	8007dde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6892      	ldr	r2, [r2, #8]
 8007e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6852      	ldr	r2, [r2, #4]
 8007e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d103      	bne.n	8007e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ea6:	f002 f875 	bl	8009f94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007eb6:	fb01 f303 	mul.w	r3, r1, r3
 8007eba:	441a      	add	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	68f9      	ldr	r1, [r7, #12]
 8007eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	22ff      	movs	r2, #255	; 0xff
 8007eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	22ff      	movs	r2, #255	; 0xff
 8007ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d114      	bne.n	8007f26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01a      	beq.n	8007f3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3310      	adds	r3, #16
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 f929 	bl	8009160 <xTaskRemoveFromEventList>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d012      	beq.n	8007f3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <xQueueGenericReset+0xcc>)
 8007f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	e009      	b.n	8007f3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3310      	adds	r3, #16
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fef2 	bl	8007d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3324      	adds	r3, #36	; 0x24
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff feed 	bl	8007d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f3a:	f002 f85b 	bl	8009ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f3e:	2301      	movs	r3, #1
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <xQueueGenericCreateStatic+0x52>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <xQueueGenericCreateStatic+0x56>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <xQueueGenericCreateStatic+0x58>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	623b      	str	r3, [r7, #32]
}
 8007fba:	bf00      	nop
 8007fbc:	e7fe      	b.n	8007fbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <xQueueGenericCreateStatic+0x7e>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <xQueueGenericCreateStatic+0x82>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <xQueueGenericCreateStatic+0x84>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	61fb      	str	r3, [r7, #28]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fea:	2350      	movs	r3, #80	; 0x50
 8007fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b50      	cmp	r3, #80	; 0x50
 8007ff2:	d00a      	beq.n	800800a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	61bb      	str	r3, [r7, #24]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800800a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00d      	beq.n	8008032 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800801e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	4613      	mov	r3, r2
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f805 	bl	800803c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008034:	4618      	mov	r0, r3
 8008036:	3730      	adds	r7, #48	; 0x30
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e002      	b.n	800805e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800806a:	2101      	movs	r1, #1
 800806c:	69b8      	ldr	r0, [r7, #24]
 800806e:	f7ff ff05 	bl	8007e7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800807a:	bf00      	nop
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08e      	sub	sp, #56	; 0x38
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008092:	2300      	movs	r3, #0
 8008094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <xQueueGenericSend+0x32>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <xQueueGenericSend+0x40>
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <xQueueGenericSend+0x44>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <xQueueGenericSend+0x46>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <xQueueGenericSend+0x60>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d103      	bne.n	80080f2 <xQueueGenericSend+0x6e>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <xQueueGenericSend+0x72>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <xQueueGenericSend+0x74>
 80080f6:	2300      	movs	r3, #0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <xQueueGenericSend+0x8e>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	623b      	str	r3, [r7, #32]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008112:	f001 f9e7 	bl	80094e4 <xTaskGetSchedulerState>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <xQueueGenericSend+0x9e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <xQueueGenericSend+0xa2>
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <xQueueGenericSend+0xa4>
 8008126:	2300      	movs	r3, #0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xQueueGenericSend+0xbe>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	61fb      	str	r3, [r7, #28]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008142:	f001 ff27 	bl	8009f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814e:	429a      	cmp	r2, r3
 8008150:	d302      	bcc.n	8008158 <xQueueGenericSend+0xd4>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d129      	bne.n	80081ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800815e:	f000 fa0b 	bl	8008578 <prvCopyDataToQueue>
 8008162:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d010      	beq.n	800818e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	3324      	adds	r3, #36	; 0x24
 8008170:	4618      	mov	r0, r3
 8008172:	f000 fff5 	bl	8009160 <xTaskRemoveFromEventList>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d013      	beq.n	80081a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800817c:	4b3f      	ldr	r3, [pc, #252]	; (800827c <xQueueGenericSend+0x1f8>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	e00a      	b.n	80081a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008194:	4b39      	ldr	r3, [pc, #228]	; (800827c <xQueueGenericSend+0x1f8>)
 8008196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081a4:	f001 ff26 	bl	8009ff4 <vPortExitCritical>
				return pdPASS;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e063      	b.n	8008274 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081b2:	f001 ff1f 	bl	8009ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e05c      	b.n	8008274 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d106      	bne.n	80081ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081c0:	f107 0314 	add.w	r3, r7, #20
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 f82f 	bl	8009228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ce:	f001 ff11 	bl	8009ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081d2:	f000 fd9b 	bl	8008d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081d6:	f001 fedd 	bl	8009f94 <vPortEnterCritical>
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d103      	bne.n	80081f0 <xQueueGenericSend+0x16c>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081f6:	b25b      	sxtb	r3, r3
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d103      	bne.n	8008206 <xQueueGenericSend+0x182>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008206:	f001 fef5 	bl	8009ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800820a:	1d3a      	adds	r2, r7, #4
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f001 f81e 	bl	8009254 <xTaskCheckForTimeOut>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d124      	bne.n	8008268 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800821e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008220:	f000 faa2 	bl	8008768 <prvIsQueueFull>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	3310      	adds	r3, #16
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f000 ff44 	bl	80090c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800823a:	f000 fa2d 	bl	8008698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800823e:	f000 fd73 	bl	8008d28 <xTaskResumeAll>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	f47f af7c 	bne.w	8008142 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <xQueueGenericSend+0x1f8>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	e772      	b.n	8008142 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800825c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825e:	f000 fa1b 	bl	8008698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008262:	f000 fd61 	bl	8008d28 <xTaskResumeAll>
 8008266:	e76c      	b.n	8008142 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800826a:	f000 fa15 	bl	8008698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800826e:	f000 fd5b 	bl	8008d28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008274:	4618      	mov	r0, r3
 8008276:	3738      	adds	r7, #56	; 0x38
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	e000ed04 	.word	0xe000ed04

08008280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b090      	sub	sp, #64	; 0x40
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <xQueueGenericSendFromISR+0x3c>
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <xQueueGenericSendFromISR+0x40>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <xQueueGenericSendFromISR+0x42>
 80082c0:	2300      	movs	r3, #0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d103      	bne.n	80082ea <xQueueGenericSendFromISR+0x6a>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d101      	bne.n	80082ee <xQueueGenericSendFromISR+0x6e>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <xQueueGenericSendFromISR+0x70>
 80082ee:	2300      	movs	r3, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	623b      	str	r3, [r7, #32]
}
 8008306:	bf00      	nop
 8008308:	e7fe      	b.n	8008308 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800830a:	f001 ff25 	bl	800a158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800830e:	f3ef 8211 	mrs	r2, BASEPRI
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	61fa      	str	r2, [r7, #28]
 8008324:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008326:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	429a      	cmp	r2, r3
 8008334:	d302      	bcc.n	800833c <xQueueGenericSendFromISR+0xbc>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d12f      	bne.n	800839c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008352:	f000 f911 	bl	8008578 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008356:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835e:	d112      	bne.n	8008386 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d016      	beq.n	8008396 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	3324      	adds	r3, #36	; 0x24
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fef7 	bl	8009160 <xTaskRemoveFromEventList>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00e      	beq.n	8008396 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e007      	b.n	8008396 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800838a:	3301      	adds	r3, #1
 800838c:	b2db      	uxtb	r3, r3
 800838e:	b25a      	sxtb	r2, r3
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008396:	2301      	movs	r3, #1
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800839a:	e001      	b.n	80083a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3740      	adds	r7, #64	; 0x40
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08c      	sub	sp, #48	; 0x30
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <xQueueReceive+0x30>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	623b      	str	r3, [r7, #32]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <xQueueReceive+0x3e>
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <xQueueReceive+0x42>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e000      	b.n	80083fc <xQueueReceive+0x44>
 80083fa:	2300      	movs	r3, #0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <xQueueReceive+0x5e>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	61fb      	str	r3, [r7, #28]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008416:	f001 f865 	bl	80094e4 <xTaskGetSchedulerState>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <xQueueReceive+0x6e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <xQueueReceive+0x72>
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <xQueueReceive+0x74>
 800842a:	2300      	movs	r3, #0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <xQueueReceive+0x8e>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	61bb      	str	r3, [r7, #24]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008446:	f001 fda5 	bl	8009f94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01f      	beq.n	8008496 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800845a:	f000 f8f7 	bl	800864c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	1e5a      	subs	r2, r3, #1
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00f      	beq.n	800848e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	3310      	adds	r3, #16
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fe74 	bl	8009160 <xTaskRemoveFromEventList>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800847e:	4b3d      	ldr	r3, [pc, #244]	; (8008574 <xQueueReceive+0x1bc>)
 8008480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800848e:	f001 fdb1 	bl	8009ff4 <vPortExitCritical>
				return pdPASS;
 8008492:	2301      	movs	r3, #1
 8008494:	e069      	b.n	800856a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800849c:	f001 fdaa 	bl	8009ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e062      	b.n	800856a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084aa:	f107 0310 	add.w	r3, r7, #16
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 feba 	bl	8009228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084b4:	2301      	movs	r3, #1
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084b8:	f001 fd9c 	bl	8009ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084bc:	f000 fc26 	bl	8008d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c0:	f001 fd68 	bl	8009f94 <vPortEnterCritical>
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ca:	b25b      	sxtb	r3, r3
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d103      	bne.n	80084da <xQueueReceive+0x122>
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e0:	b25b      	sxtb	r3, r3
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e6:	d103      	bne.n	80084f0 <xQueueReceive+0x138>
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f0:	f001 fd80 	bl	8009ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084f4:	1d3a      	adds	r2, r7, #4
 80084f6:	f107 0310 	add.w	r3, r7, #16
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fea9 	bl	8009254 <xTaskCheckForTimeOut>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d123      	bne.n	8008550 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800850a:	f000 f917 	bl	800873c <prvIsQueueEmpty>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d017      	beq.n	8008544 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	3324      	adds	r3, #36	; 0x24
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fdcf 	bl	80090c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008524:	f000 f8b8 	bl	8008698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008528:	f000 fbfe 	bl	8008d28 <xTaskResumeAll>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d189      	bne.n	8008446 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <xQueueReceive+0x1bc>)
 8008534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	e780      	b.n	8008446 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008546:	f000 f8a7 	bl	8008698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800854a:	f000 fbed 	bl	8008d28 <xTaskResumeAll>
 800854e:	e77a      	b.n	8008446 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008552:	f000 f8a1 	bl	8008698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008556:	f000 fbe7 	bl	8008d28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800855a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855c:	f000 f8ee 	bl	800873c <prvIsQueueEmpty>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	f43f af6f 	beq.w	8008446 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800856a:	4618      	mov	r0, r3
 800856c:	3730      	adds	r7, #48	; 0x30
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	e000ed04 	.word	0xe000ed04

08008578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10d      	bne.n	80085b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d14d      	bne.n	800863a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 ffbc 	bl	8009520 <xTaskPriorityDisinherit>
 80085a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	609a      	str	r2, [r3, #8]
 80085b0:	e043      	b.n	800863a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d119      	bne.n	80085ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6858      	ldr	r0, [r3, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	461a      	mov	r2, r3
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	f003 f8be 	bl	800b744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d32b      	bcc.n	800863a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	605a      	str	r2, [r3, #4]
 80085ea:	e026      	b.n	800863a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	68d8      	ldr	r0, [r3, #12]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	461a      	mov	r2, r3
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	f003 f8a4 	bl	800b744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	425b      	negs	r3, r3
 8008606:	441a      	add	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d207      	bcs.n	8008628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	425b      	negs	r3, r3
 8008622:	441a      	add	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d105      	bne.n	800863a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	3b01      	subs	r3, #1
 8008638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008642:	697b      	ldr	r3, [r7, #20]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d018      	beq.n	8008690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	441a      	add	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	429a      	cmp	r2, r3
 8008676:	d303      	bcc.n	8008680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68d9      	ldr	r1, [r3, #12]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	461a      	mov	r2, r3
 800868a:	6838      	ldr	r0, [r7, #0]
 800868c:	f003 f85a 	bl	800b744 <memcpy>
	}
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086a0:	f001 fc78 	bl	8009f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086ac:	e011      	b.n	80086d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d012      	beq.n	80086dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3324      	adds	r3, #36	; 0x24
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fd50 	bl	8009160 <xTaskRemoveFromEventList>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086c6:	f000 fe27 	bl	8009318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	dce9      	bgt.n	80086ae <prvUnlockQueue+0x16>
 80086da:	e000      	b.n	80086de <prvUnlockQueue+0x46>
					break;
 80086dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086e6:	f001 fc85 	bl	8009ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086ea:	f001 fc53 	bl	8009f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086f6:	e011      	b.n	800871c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d012      	beq.n	8008726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3310      	adds	r3, #16
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fd2b 	bl	8009160 <xTaskRemoveFromEventList>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008710:	f000 fe02 	bl	8009318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	3b01      	subs	r3, #1
 8008718:	b2db      	uxtb	r3, r3
 800871a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800871c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008720:	2b00      	cmp	r3, #0
 8008722:	dce9      	bgt.n	80086f8 <prvUnlockQueue+0x60>
 8008724:	e000      	b.n	8008728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	22ff      	movs	r2, #255	; 0xff
 800872c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008730:	f001 fc60 	bl	8009ff4 <vPortExitCritical>
}
 8008734:	bf00      	nop
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008744:	f001 fc26 	bl	8009f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008750:	2301      	movs	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	e001      	b.n	800875a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800875a:	f001 fc4b 	bl	8009ff4 <vPortExitCritical>

	return xReturn;
 800875e:	68fb      	ldr	r3, [r7, #12]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008770:	f001 fc10 	bl	8009f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877c:	429a      	cmp	r2, r3
 800877e:	d102      	bne.n	8008786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008780:	2301      	movs	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	e001      	b.n	800878a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800878a:	f001 fc33 	bl	8009ff4 <vPortExitCritical>

	return xReturn;
 800878e:	68fb      	ldr	r3, [r7, #12]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	e014      	b.n	80087d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087a8:	4a0f      	ldr	r2, [pc, #60]	; (80087e8 <vQueueAddToRegistry+0x50>)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087b4:	490c      	ldr	r1, [pc, #48]	; (80087e8 <vQueueAddToRegistry+0x50>)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087be:	4a0a      	ldr	r2, [pc, #40]	; (80087e8 <vQueueAddToRegistry+0x50>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	4413      	add	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087ca:	e006      	b.n	80087da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b07      	cmp	r3, #7
 80087d6:	d9e7      	bls.n	80087a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20004f4c 	.word	0x20004f4c

080087ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087fc:	f001 fbca 	bl	8009f94 <vPortEnterCritical>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008806:	b25b      	sxtb	r3, r3
 8008808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880c:	d103      	bne.n	8008816 <vQueueWaitForMessageRestricted+0x2a>
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800881c:	b25b      	sxtb	r3, r3
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d103      	bne.n	800882c <vQueueWaitForMessageRestricted+0x40>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800882c:	f001 fbe2 	bl	8009ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	3324      	adds	r3, #36	; 0x24
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fc61 	bl	8009108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008846:	6978      	ldr	r0, [r7, #20]
 8008848:	f7ff ff26 	bl	8008698 <prvUnlockQueue>
	}
 800884c:	bf00      	nop
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08e      	sub	sp, #56	; 0x38
 8008858:	af04      	add	r7, sp, #16
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10a      	bne.n	800887e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	623b      	str	r3, [r7, #32]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <xTaskCreateStatic+0x46>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	61fb      	str	r3, [r7, #28]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800889a:	23bc      	movs	r3, #188	; 0xbc
 800889c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2bbc      	cmp	r3, #188	; 0xbc
 80088a2:	d00a      	beq.n	80088ba <xTaskCreateStatic+0x66>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	61bb      	str	r3, [r7, #24]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80088ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01e      	beq.n	8008900 <xTaskCreateStatic+0xac>
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01b      	beq.n	8008900 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	2202      	movs	r2, #2
 80088d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088da:	2300      	movs	r3, #0
 80088dc:	9303      	str	r3, [sp, #12]
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	9302      	str	r3, [sp, #8]
 80088e2:	f107 0314 	add.w	r3, r7, #20
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	68b9      	ldr	r1, [r7, #8]
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f850 	bl	8008998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088fa:	f000 f8f3 	bl	8008ae4 <prvAddNewTaskToReadyList>
 80088fe:	e001      	b.n	8008904 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008904:	697b      	ldr	r3, [r7, #20]
	}
 8008906:	4618      	mov	r0, r3
 8008908:	3728      	adds	r7, #40	; 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800890e:	b580      	push	{r7, lr}
 8008910:	b08c      	sub	sp, #48	; 0x30
 8008912:	af04      	add	r7, sp, #16
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	603b      	str	r3, [r7, #0]
 800891a:	4613      	mov	r3, r2
 800891c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fc58 	bl	800a1d8 <pvPortMalloc>
 8008928:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00e      	beq.n	800894e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008930:	20bc      	movs	r0, #188	; 0xbc
 8008932:	f001 fc51 	bl	800a1d8 <pvPortMalloc>
 8008936:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	631a      	str	r2, [r3, #48]	; 0x30
 8008944:	e005      	b.n	8008952 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008946:	6978      	ldr	r0, [r7, #20]
 8008948:	f001 fd12 	bl	800a370 <vPortFree>
 800894c:	e001      	b.n	8008952 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d017      	beq.n	8008988 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008960:	88fa      	ldrh	r2, [r7, #6]
 8008962:	2300      	movs	r3, #0
 8008964:	9303      	str	r3, [sp, #12]
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f80e 	bl	8008998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800897c:	69f8      	ldr	r0, [r7, #28]
 800897e:	f000 f8b1 	bl	8008ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008982:	2301      	movs	r3, #1
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	e002      	b.n	800898e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008988:	f04f 33ff 	mov.w	r3, #4294967295
 800898c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800898e:	69bb      	ldr	r3, [r7, #24]
	}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	461a      	mov	r2, r3
 80089b0:	21a5      	movs	r1, #165	; 0xa5
 80089b2:	f002 fed5 	bl	800b760 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089c0:	3b01      	subs	r3, #1
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	f023 0307 	bic.w	r3, r3, #7
 80089ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	617b      	str	r3, [r7, #20]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d01f      	beq.n	8008a36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]
 80089fa:	e012      	b.n	8008a22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4413      	add	r3, r2
 8008a02:	7819      	ldrb	r1, [r3, #0]
 8008a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	4413      	add	r3, r2
 8008a0a:	3334      	adds	r3, #52	; 0x34
 8008a0c:	460a      	mov	r2, r1
 8008a0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4413      	add	r3, r2
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d006      	beq.n	8008a2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	61fb      	str	r3, [r7, #28]
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	2b0f      	cmp	r3, #15
 8008a26:	d9e9      	bls.n	80089fc <prvInitialiseNewTask+0x64>
 8008a28:	e000      	b.n	8008a2c <prvInitialiseNewTask+0x94>
			{
				break;
 8008a2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a34:	e003      	b.n	8008a3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	2b37      	cmp	r3, #55	; 0x37
 8008a42:	d901      	bls.n	8008a48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a44:	2337      	movs	r3, #55	; 0x37
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	2200      	movs	r2, #0
 8008a58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff f978 	bl	8007d54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	3318      	adds	r3, #24
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff f973 	bl	8007d54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	3354      	adds	r3, #84	; 0x54
 8008a98:	2260      	movs	r2, #96	; 0x60
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f002 fe5f 	bl	800b760 <memset>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	4a0c      	ldr	r2, [pc, #48]	; (8008ad8 <prvInitialiseNewTask+0x140>)
 8008aa6:	659a      	str	r2, [r3, #88]	; 0x58
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	; (8008adc <prvInitialiseNewTask+0x144>)
 8008aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	4a0b      	ldr	r2, [pc, #44]	; (8008ae0 <prvInitialiseNewTask+0x148>)
 8008ab2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	68f9      	ldr	r1, [r7, #12]
 8008ab8:	69b8      	ldr	r0, [r7, #24]
 8008aba:	f001 f941 	bl	8009d40 <pxPortInitialiseStack>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ace:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ad0:	bf00      	nop
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	0800b9e4 	.word	0x0800b9e4
 8008adc:	0800ba04 	.word	0x0800ba04
 8008ae0:	0800b9c4 	.word	0x0800b9c4

08008ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008aec:	f001 fa52 	bl	8009f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008af0:	4b2d      	ldr	r3, [pc, #180]	; (8008ba8 <prvAddNewTaskToReadyList+0xc4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	4a2c      	ldr	r2, [pc, #176]	; (8008ba8 <prvAddNewTaskToReadyList+0xc4>)
 8008af8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008afa:	4b2c      	ldr	r3, [pc, #176]	; (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b02:	4a2a      	ldr	r2, [pc, #168]	; (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b08:	4b27      	ldr	r3, [pc, #156]	; (8008ba8 <prvAddNewTaskToReadyList+0xc4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d110      	bne.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b10:	f000 fc26 	bl	8009360 <prvInitialiseTaskLists>
 8008b14:	e00d      	b.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b16:	4b26      	ldr	r3, [pc, #152]	; (8008bb0 <prvAddNewTaskToReadyList+0xcc>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b1e:	4b23      	ldr	r3, [pc, #140]	; (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d802      	bhi.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b2c:	4a1f      	ldr	r2, [pc, #124]	; (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b32:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <prvAddNewTaskToReadyList+0xd0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3301      	adds	r3, #1
 8008b38:	4a1e      	ldr	r2, [pc, #120]	; (8008bb4 <prvAddNewTaskToReadyList+0xd0>)
 8008b3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b3c:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <prvAddNewTaskToReadyList+0xd0>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b48:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <prvAddNewTaskToReadyList+0xd4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d903      	bls.n	8008b58 <prvAddNewTaskToReadyList+0x74>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <prvAddNewTaskToReadyList+0xd4>)
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4a15      	ldr	r2, [pc, #84]	; (8008bbc <prvAddNewTaskToReadyList+0xd8>)
 8008b66:	441a      	add	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f7ff f8fd 	bl	8007d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b74:	f001 fa3e 	bl	8009ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b78:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <prvAddNewTaskToReadyList+0xcc>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00e      	beq.n	8008b9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d207      	bcs.n	8008b9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <prvAddNewTaskToReadyList+0xdc>)
 8008b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000e58 	.word	0x20000e58
 8008bac:	20000984 	.word	0x20000984
 8008bb0:	20000e64 	.word	0x20000e64
 8008bb4:	20000e74 	.word	0x20000e74
 8008bb8:	20000e60 	.word	0x20000e60
 8008bbc:	20000988 	.word	0x20000988
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d017      	beq.n	8008c06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bd6:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <vTaskDelay+0x60>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <vTaskDelay+0x30>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	60bb      	str	r3, [r7, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bf4:	f000 f88a 	bl	8008d0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fcfe 	bl	80095fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c00:	f000 f892 	bl	8008d28 <xTaskResumeAll>
 8008c04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d107      	bne.n	8008c1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <vTaskDelay+0x64>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c1c:	bf00      	nop
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20000e80 	.word	0x20000e80
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	; 0x28
 8008c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	1d39      	adds	r1, r7, #4
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff f832 	bl	8007cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	9202      	str	r2, [sp, #8]
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	2300      	movs	r3, #0
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	460a      	mov	r2, r1
 8008c5a:	4924      	ldr	r1, [pc, #144]	; (8008cec <vTaskStartScheduler+0xc0>)
 8008c5c:	4824      	ldr	r0, [pc, #144]	; (8008cf0 <vTaskStartScheduler+0xc4>)
 8008c5e:	f7ff fdf9 	bl	8008854 <xTaskCreateStatic>
 8008c62:	4603      	mov	r3, r0
 8008c64:	4a23      	ldr	r2, [pc, #140]	; (8008cf4 <vTaskStartScheduler+0xc8>)
 8008c66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c68:	4b22      	ldr	r3, [pc, #136]	; (8008cf4 <vTaskStartScheduler+0xc8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c70:	2301      	movs	r3, #1
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	e001      	b.n	8008c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d102      	bne.n	8008c86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c80:	f000 fd10 	bl	80096a4 <xTimerCreateTimerTask>
 8008c84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d11b      	bne.n	8008cc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	613b      	str	r3, [r7, #16]
}
 8008c9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ca0:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <vTaskStartScheduler+0xcc>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3354      	adds	r3, #84	; 0x54
 8008ca6:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <vTaskStartScheduler+0xd0>)
 8008ca8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008caa:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <vTaskStartScheduler+0xd4>)
 8008cac:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cb2:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <vTaskStartScheduler+0xd8>)
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cb8:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <vTaskStartScheduler+0xdc>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cbe:	f001 f8c7 	bl	8009e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cc2:	e00e      	b.n	8008ce2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d10a      	bne.n	8008ce2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	60fb      	str	r3, [r7, #12]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <vTaskStartScheduler+0xb4>
}
 8008ce2:	bf00      	nop
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	0800b920 	.word	0x0800b920
 8008cf0:	08009331 	.word	0x08009331
 8008cf4:	20000e7c 	.word	0x20000e7c
 8008cf8:	20000984 	.word	0x20000984
 8008cfc:	20000184 	.word	0x20000184
 8008d00:	20000e78 	.word	0x20000e78
 8008d04:	20000e64 	.word	0x20000e64
 8008d08:	20000e5c 	.word	0x20000e5c

08008d0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <vTaskSuspendAll+0x18>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3301      	adds	r3, #1
 8008d16:	4a03      	ldr	r2, [pc, #12]	; (8008d24 <vTaskSuspendAll+0x18>)
 8008d18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d1a:	bf00      	nop
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	20000e80 	.word	0x20000e80

08008d28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d36:	4b42      	ldr	r3, [pc, #264]	; (8008e40 <xTaskResumeAll+0x118>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10a      	bne.n	8008d54 <xTaskResumeAll+0x2c>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	603b      	str	r3, [r7, #0]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d54:	f001 f91e 	bl	8009f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d58:	4b39      	ldr	r3, [pc, #228]	; (8008e40 <xTaskResumeAll+0x118>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	4a38      	ldr	r2, [pc, #224]	; (8008e40 <xTaskResumeAll+0x118>)
 8008d60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d62:	4b37      	ldr	r3, [pc, #220]	; (8008e40 <xTaskResumeAll+0x118>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d162      	bne.n	8008e30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d6a:	4b36      	ldr	r3, [pc, #216]	; (8008e44 <xTaskResumeAll+0x11c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d05e      	beq.n	8008e30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d72:	e02f      	b.n	8008dd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d74:	4b34      	ldr	r3, [pc, #208]	; (8008e48 <xTaskResumeAll+0x120>)
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3318      	adds	r3, #24
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff f851 	bl	8007e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7ff f84c 	bl	8007e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d94:	4b2d      	ldr	r3, [pc, #180]	; (8008e4c <xTaskResumeAll+0x124>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d903      	bls.n	8008da4 <xTaskResumeAll+0x7c>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	4a2a      	ldr	r2, [pc, #168]	; (8008e4c <xTaskResumeAll+0x124>)
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da8:	4613      	mov	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4a27      	ldr	r2, [pc, #156]	; (8008e50 <xTaskResumeAll+0x128>)
 8008db2:	441a      	add	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	f7fe ffd7 	bl	8007d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc4:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <xTaskResumeAll+0x12c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d302      	bcc.n	8008dd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008dce:	4b22      	ldr	r3, [pc, #136]	; (8008e58 <xTaskResumeAll+0x130>)
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dd4:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <xTaskResumeAll+0x120>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1cb      	bne.n	8008d74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008de2:	f000 fb5f 	bl	80094a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008de6:	4b1d      	ldr	r3, [pc, #116]	; (8008e5c <xTaskResumeAll+0x134>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d010      	beq.n	8008e14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008df2:	f000 f847 	bl	8008e84 <xTaskIncrementTick>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008dfc:	4b16      	ldr	r3, [pc, #88]	; (8008e58 <xTaskResumeAll+0x130>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f1      	bne.n	8008df2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <xTaskResumeAll+0x134>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e14:	4b10      	ldr	r3, [pc, #64]	; (8008e58 <xTaskResumeAll+0x130>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e20:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <xTaskResumeAll+0x138>)
 8008e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e30:	f001 f8e0 	bl	8009ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8008e34:	68bb      	ldr	r3, [r7, #8]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000e80 	.word	0x20000e80
 8008e44:	20000e58 	.word	0x20000e58
 8008e48:	20000e18 	.word	0x20000e18
 8008e4c:	20000e60 	.word	0x20000e60
 8008e50:	20000988 	.word	0x20000988
 8008e54:	20000984 	.word	0x20000984
 8008e58:	20000e6c 	.word	0x20000e6c
 8008e5c:	20000e68 	.word	0x20000e68
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <xTaskGetTickCount+0x1c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e70:	687b      	ldr	r3, [r7, #4]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000e5c 	.word	0x20000e5c

08008e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e8e:	4b4f      	ldr	r3, [pc, #316]	; (8008fcc <xTaskIncrementTick+0x148>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f040 808f 	bne.w	8008fb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e98:	4b4d      	ldr	r3, [pc, #308]	; (8008fd0 <xTaskIncrementTick+0x14c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ea0:	4a4b      	ldr	r2, [pc, #300]	; (8008fd0 <xTaskIncrementTick+0x14c>)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d120      	bne.n	8008eee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008eac:	4b49      	ldr	r3, [pc, #292]	; (8008fd4 <xTaskIncrementTick+0x150>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <xTaskIncrementTick+0x48>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	603b      	str	r3, [r7, #0]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <xTaskIncrementTick+0x46>
 8008ecc:	4b41      	ldr	r3, [pc, #260]	; (8008fd4 <xTaskIncrementTick+0x150>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	4b41      	ldr	r3, [pc, #260]	; (8008fd8 <xTaskIncrementTick+0x154>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a3f      	ldr	r2, [pc, #252]	; (8008fd4 <xTaskIncrementTick+0x150>)
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	4a3f      	ldr	r2, [pc, #252]	; (8008fd8 <xTaskIncrementTick+0x154>)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	4b3e      	ldr	r3, [pc, #248]	; (8008fdc <xTaskIncrementTick+0x158>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	4a3d      	ldr	r2, [pc, #244]	; (8008fdc <xTaskIncrementTick+0x158>)
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	f000 fadb 	bl	80094a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008eee:	4b3c      	ldr	r3, [pc, #240]	; (8008fe0 <xTaskIncrementTick+0x15c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d349      	bcc.n	8008f8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ef8:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <xTaskIncrementTick+0x150>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f02:	4b37      	ldr	r3, [pc, #220]	; (8008fe0 <xTaskIncrementTick+0x15c>)
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295
 8008f08:	601a      	str	r2, [r3, #0]
					break;
 8008f0a:	e03f      	b.n	8008f8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0c:	4b31      	ldr	r3, [pc, #196]	; (8008fd4 <xTaskIncrementTick+0x150>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d203      	bcs.n	8008f2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f24:	4a2e      	ldr	r2, [pc, #184]	; (8008fe0 <xTaskIncrementTick+0x15c>)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f2a:	e02f      	b.n	8008f8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe ff79 	bl	8007e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	3318      	adds	r3, #24
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe ff70 	bl	8007e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4c:	4b25      	ldr	r3, [pc, #148]	; (8008fe4 <xTaskIncrementTick+0x160>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d903      	bls.n	8008f5c <xTaskIncrementTick+0xd8>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	4a22      	ldr	r2, [pc, #136]	; (8008fe4 <xTaskIncrementTick+0x160>)
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4a1f      	ldr	r2, [pc, #124]	; (8008fe8 <xTaskIncrementTick+0x164>)
 8008f6a:	441a      	add	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7fe fefb 	bl	8007d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <xTaskIncrementTick+0x168>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d3b8      	bcc.n	8008ef8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f86:	2301      	movs	r3, #1
 8008f88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8a:	e7b5      	b.n	8008ef8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f8c:	4b17      	ldr	r3, [pc, #92]	; (8008fec <xTaskIncrementTick+0x168>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f92:	4915      	ldr	r1, [pc, #84]	; (8008fe8 <xTaskIncrementTick+0x164>)
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d901      	bls.n	8008fa8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008fa8:	4b11      	ldr	r3, [pc, #68]	; (8008ff0 <xTaskIncrementTick+0x16c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	e004      	b.n	8008fc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <xTaskIncrementTick+0x170>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <xTaskIncrementTick+0x170>)
 8008fbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008fc0:	697b      	ldr	r3, [r7, #20]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000e80 	.word	0x20000e80
 8008fd0:	20000e5c 	.word	0x20000e5c
 8008fd4:	20000e10 	.word	0x20000e10
 8008fd8:	20000e14 	.word	0x20000e14
 8008fdc:	20000e70 	.word	0x20000e70
 8008fe0:	20000e78 	.word	0x20000e78
 8008fe4:	20000e60 	.word	0x20000e60
 8008fe8:	20000988 	.word	0x20000988
 8008fec:	20000984 	.word	0x20000984
 8008ff0:	20000e6c 	.word	0x20000e6c
 8008ff4:	20000e68 	.word	0x20000e68

08008ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ffe:	4b2a      	ldr	r3, [pc, #168]	; (80090a8 <vTaskSwitchContext+0xb0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009006:	4b29      	ldr	r3, [pc, #164]	; (80090ac <vTaskSwitchContext+0xb4>)
 8009008:	2201      	movs	r2, #1
 800900a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800900c:	e046      	b.n	800909c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800900e:	4b27      	ldr	r3, [pc, #156]	; (80090ac <vTaskSwitchContext+0xb4>)
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009014:	4b26      	ldr	r3, [pc, #152]	; (80090b0 <vTaskSwitchContext+0xb8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	e010      	b.n	800903e <vTaskSwitchContext+0x46>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <vTaskSwitchContext+0x40>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	607b      	str	r3, [r7, #4]
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <vTaskSwitchContext+0x3e>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3b01      	subs	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	491d      	ldr	r1, [pc, #116]	; (80090b4 <vTaskSwitchContext+0xbc>)
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0e4      	beq.n	800901c <vTaskSwitchContext+0x24>
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4a15      	ldr	r2, [pc, #84]	; (80090b4 <vTaskSwitchContext+0xbc>)
 800905e:	4413      	add	r3, r2
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	605a      	str	r2, [r3, #4]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3308      	adds	r3, #8
 8009074:	429a      	cmp	r2, r3
 8009076:	d104      	bne.n	8009082 <vTaskSwitchContext+0x8a>
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	605a      	str	r2, [r3, #4]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4a0b      	ldr	r2, [pc, #44]	; (80090b8 <vTaskSwitchContext+0xc0>)
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <vTaskSwitchContext+0xb8>)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009092:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <vTaskSwitchContext+0xc0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3354      	adds	r3, #84	; 0x54
 8009098:	4a08      	ldr	r2, [pc, #32]	; (80090bc <vTaskSwitchContext+0xc4>)
 800909a:	6013      	str	r3, [r2, #0]
}
 800909c:	bf00      	nop
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	20000e80 	.word	0x20000e80
 80090ac:	20000e6c 	.word	0x20000e6c
 80090b0:	20000e60 	.word	0x20000e60
 80090b4:	20000988 	.word	0x20000988
 80090b8:	20000984 	.word	0x20000984
 80090bc:	20000184 	.word	0x20000184

080090c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	60fb      	str	r3, [r7, #12]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090e6:	4b07      	ldr	r3, [pc, #28]	; (8009104 <vTaskPlaceOnEventList+0x44>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3318      	adds	r3, #24
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7fe fe61 	bl	8007db6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090f4:	2101      	movs	r1, #1
 80090f6:	6838      	ldr	r0, [r7, #0]
 80090f8:	f000 fa80 	bl	80095fc <prvAddCurrentTaskToDelayedList>
}
 80090fc:	bf00      	nop
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	20000984 	.word	0x20000984

08009108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	617b      	str	r3, [r7, #20]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009130:	4b0a      	ldr	r3, [pc, #40]	; (800915c <vTaskPlaceOnEventListRestricted+0x54>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3318      	adds	r3, #24
 8009136:	4619      	mov	r1, r3
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f7fe fe18 	bl	8007d6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009144:	f04f 33ff 	mov.w	r3, #4294967295
 8009148:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68b8      	ldr	r0, [r7, #8]
 800914e:	f000 fa55 	bl	80095fc <prvAddCurrentTaskToDelayedList>
	}
 8009152:	bf00      	nop
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000984 	.word	0x20000984

08009160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60fb      	str	r3, [r7, #12]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	3318      	adds	r3, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fe49 	bl	8007e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009196:	4b1e      	ldr	r3, [pc, #120]	; (8009210 <xTaskRemoveFromEventList+0xb0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d11d      	bne.n	80091da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fe40 	bl	8007e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ac:	4b19      	ldr	r3, [pc, #100]	; (8009214 <xTaskRemoveFromEventList+0xb4>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d903      	bls.n	80091bc <xTaskRemoveFromEventList+0x5c>
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	4a16      	ldr	r2, [pc, #88]	; (8009214 <xTaskRemoveFromEventList+0xb4>)
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4a13      	ldr	r2, [pc, #76]	; (8009218 <xTaskRemoveFromEventList+0xb8>)
 80091ca:	441a      	add	r2, r3
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f7fe fdcb 	bl	8007d6e <vListInsertEnd>
 80091d8:	e005      	b.n	80091e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	3318      	adds	r3, #24
 80091de:	4619      	mov	r1, r3
 80091e0:	480e      	ldr	r0, [pc, #56]	; (800921c <xTaskRemoveFromEventList+0xbc>)
 80091e2:	f7fe fdc4 	bl	8007d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	4b0d      	ldr	r3, [pc, #52]	; (8009220 <xTaskRemoveFromEventList+0xc0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d905      	bls.n	8009200 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091f4:	2301      	movs	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <xTaskRemoveFromEventList+0xc4>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e001      	b.n	8009204 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009200:	2300      	movs	r3, #0
 8009202:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009204:	697b      	ldr	r3, [r7, #20]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000e80 	.word	0x20000e80
 8009214:	20000e60 	.word	0x20000e60
 8009218:	20000988 	.word	0x20000988
 800921c:	20000e18 	.word	0x20000e18
 8009220:	20000984 	.word	0x20000984
 8009224:	20000e6c 	.word	0x20000e6c

08009228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009230:	4b06      	ldr	r3, [pc, #24]	; (800924c <vTaskInternalSetTimeOutState+0x24>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009238:	4b05      	ldr	r3, [pc, #20]	; (8009250 <vTaskInternalSetTimeOutState+0x28>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	605a      	str	r2, [r3, #4]
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	20000e70 	.word	0x20000e70
 8009250:	20000e5c 	.word	0x20000e5c

08009254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	613b      	str	r3, [r7, #16]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	60fb      	str	r3, [r7, #12]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009296:	f000 fe7d 	bl	8009f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <xTaskCheckForTimeOut+0xbc>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d102      	bne.n	80092ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	e023      	b.n	8009302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b15      	ldr	r3, [pc, #84]	; (8009314 <xTaskCheckForTimeOut+0xc0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d007      	beq.n	80092d6 <xTaskCheckForTimeOut+0x82>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d302      	bcc.n	80092d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092d0:	2301      	movs	r3, #1
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	e015      	b.n	8009302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d20b      	bcs.n	80092f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	1ad2      	subs	r2, r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff ff9b 	bl	8009228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	61fb      	str	r3, [r7, #28]
 80092f6:	e004      	b.n	8009302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092fe:	2301      	movs	r3, #1
 8009300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009302:	f000 fe77 	bl	8009ff4 <vPortExitCritical>

	return xReturn;
 8009306:	69fb      	ldr	r3, [r7, #28]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3720      	adds	r7, #32
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20000e5c 	.word	0x20000e5c
 8009314:	20000e70 	.word	0x20000e70

08009318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800931c:	4b03      	ldr	r3, [pc, #12]	; (800932c <vTaskMissedYield+0x14>)
 800931e:	2201      	movs	r2, #1
 8009320:	601a      	str	r2, [r3, #0]
}
 8009322:	bf00      	nop
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	20000e6c 	.word	0x20000e6c

08009330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009338:	f000 f852 	bl	80093e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800933c:	4b06      	ldr	r3, [pc, #24]	; (8009358 <prvIdleTask+0x28>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d9f9      	bls.n	8009338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <prvIdleTask+0x2c>)
 8009346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009354:	e7f0      	b.n	8009338 <prvIdleTask+0x8>
 8009356:	bf00      	nop
 8009358:	20000988 	.word	0x20000988
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009366:	2300      	movs	r3, #0
 8009368:	607b      	str	r3, [r7, #4]
 800936a:	e00c      	b.n	8009386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4a12      	ldr	r2, [pc, #72]	; (80093c0 <prvInitialiseTaskLists+0x60>)
 8009378:	4413      	add	r3, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fcca 	bl	8007d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3301      	adds	r3, #1
 8009384:	607b      	str	r3, [r7, #4]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b37      	cmp	r3, #55	; 0x37
 800938a:	d9ef      	bls.n	800936c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800938c:	480d      	ldr	r0, [pc, #52]	; (80093c4 <prvInitialiseTaskLists+0x64>)
 800938e:	f7fe fcc1 	bl	8007d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009392:	480d      	ldr	r0, [pc, #52]	; (80093c8 <prvInitialiseTaskLists+0x68>)
 8009394:	f7fe fcbe 	bl	8007d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009398:	480c      	ldr	r0, [pc, #48]	; (80093cc <prvInitialiseTaskLists+0x6c>)
 800939a:	f7fe fcbb 	bl	8007d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800939e:	480c      	ldr	r0, [pc, #48]	; (80093d0 <prvInitialiseTaskLists+0x70>)
 80093a0:	f7fe fcb8 	bl	8007d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093a4:	480b      	ldr	r0, [pc, #44]	; (80093d4 <prvInitialiseTaskLists+0x74>)
 80093a6:	f7fe fcb5 	bl	8007d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093aa:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <prvInitialiseTaskLists+0x78>)
 80093ac:	4a05      	ldr	r2, [pc, #20]	; (80093c4 <prvInitialiseTaskLists+0x64>)
 80093ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093b0:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <prvInitialiseTaskLists+0x7c>)
 80093b2:	4a05      	ldr	r2, [pc, #20]	; (80093c8 <prvInitialiseTaskLists+0x68>)
 80093b4:	601a      	str	r2, [r3, #0]
}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000988 	.word	0x20000988
 80093c4:	20000de8 	.word	0x20000de8
 80093c8:	20000dfc 	.word	0x20000dfc
 80093cc:	20000e18 	.word	0x20000e18
 80093d0:	20000e2c 	.word	0x20000e2c
 80093d4:	20000e44 	.word	0x20000e44
 80093d8:	20000e10 	.word	0x20000e10
 80093dc:	20000e14 	.word	0x20000e14

080093e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093e6:	e019      	b.n	800941c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093e8:	f000 fdd4 	bl	8009f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ec:	4b10      	ldr	r3, [pc, #64]	; (8009430 <prvCheckTasksWaitingTermination+0x50>)
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fd15 	bl	8007e28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093fe:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <prvCheckTasksWaitingTermination+0x54>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3b01      	subs	r3, #1
 8009404:	4a0b      	ldr	r2, [pc, #44]	; (8009434 <prvCheckTasksWaitingTermination+0x54>)
 8009406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009408:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <prvCheckTasksWaitingTermination+0x58>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3b01      	subs	r3, #1
 800940e:	4a0a      	ldr	r2, [pc, #40]	; (8009438 <prvCheckTasksWaitingTermination+0x58>)
 8009410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009412:	f000 fdef 	bl	8009ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f810 	bl	800943c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <prvCheckTasksWaitingTermination+0x58>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e1      	bne.n	80093e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000e2c 	.word	0x20000e2c
 8009434:	20000e58 	.word	0x20000e58
 8009438:	20000e40 	.word	0x20000e40

0800943c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3354      	adds	r3, #84	; 0x54
 8009448:	4618      	mov	r0, r3
 800944a:	f002 f99f 	bl	800b78c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009454:	2b00      	cmp	r3, #0
 8009456:	d108      	bne.n	800946a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945c:	4618      	mov	r0, r3
 800945e:	f000 ff87 	bl	800a370 <vPortFree>
				vPortFree( pxTCB );
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 ff84 	bl	800a370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009468:	e018      	b.n	800949c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009470:	2b01      	cmp	r3, #1
 8009472:	d103      	bne.n	800947c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 ff7b 	bl	800a370 <vPortFree>
	}
 800947a:	e00f      	b.n	800949c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009482:	2b02      	cmp	r3, #2
 8009484:	d00a      	beq.n	800949c <prvDeleteTCB+0x60>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <prvDeleteTCB+0x5e>
	}
 800949c:	bf00      	nop
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <prvResetNextTaskUnblockTime+0x38>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094b4:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <prvResetNextTaskUnblockTime+0x3c>)
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094bc:	e008      	b.n	80094d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094be:	4b07      	ldr	r3, [pc, #28]	; (80094dc <prvResetNextTaskUnblockTime+0x38>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4a04      	ldr	r2, [pc, #16]	; (80094e0 <prvResetNextTaskUnblockTime+0x3c>)
 80094ce:	6013      	str	r3, [r2, #0]
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000e10 	.word	0x20000e10
 80094e0:	20000e78 	.word	0x20000e78

080094e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <xTaskGetSchedulerState+0x34>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094f2:	2301      	movs	r3, #1
 80094f4:	607b      	str	r3, [r7, #4]
 80094f6:	e008      	b.n	800950a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f8:	4b08      	ldr	r3, [pc, #32]	; (800951c <xTaskGetSchedulerState+0x38>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009500:	2302      	movs	r3, #2
 8009502:	607b      	str	r3, [r7, #4]
 8009504:	e001      	b.n	800950a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800950a:	687b      	ldr	r3, [r7, #4]
	}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	20000e64 	.word	0x20000e64
 800951c:	20000e80 	.word	0x20000e80

08009520 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800952c:	2300      	movs	r3, #0
 800952e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d056      	beq.n	80095e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <xTaskPriorityDisinherit+0xd0>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	429a      	cmp	r2, r3
 800953e:	d00a      	beq.n	8009556 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10a      	bne.n	8009574 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	60bb      	str	r3, [r7, #8]
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009578:	1e5a      	subs	r2, r3, #1
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009586:	429a      	cmp	r2, r3
 8009588:	d02c      	beq.n	80095e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958e:	2b00      	cmp	r3, #0
 8009590:	d128      	bne.n	80095e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fc46 	bl	8007e28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4b0f      	ldr	r3, [pc, #60]	; (80095f4 <xTaskPriorityDisinherit+0xd4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d903      	bls.n	80095c4 <xTaskPriorityDisinherit+0xa4>
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	4a0c      	ldr	r2, [pc, #48]	; (80095f4 <xTaskPriorityDisinherit+0xd4>)
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <xTaskPriorityDisinherit+0xd8>)
 80095d2:	441a      	add	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fbc7 	bl	8007d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095e0:	2301      	movs	r3, #1
 80095e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095e4:	697b      	ldr	r3, [r7, #20]
	}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000984 	.word	0x20000984
 80095f4:	20000e60 	.word	0x20000e60
 80095f8:	20000988 	.word	0x20000988

080095fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009606:	4b21      	ldr	r3, [pc, #132]	; (800968c <prvAddCurrentTaskToDelayedList+0x90>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800960c:	4b20      	ldr	r3, [pc, #128]	; (8009690 <prvAddCurrentTaskToDelayedList+0x94>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3304      	adds	r3, #4
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fc08 	bl	8007e28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961e:	d10a      	bne.n	8009636 <prvAddCurrentTaskToDelayedList+0x3a>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009626:	4b1a      	ldr	r3, [pc, #104]	; (8009690 <prvAddCurrentTaskToDelayedList+0x94>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3304      	adds	r3, #4
 800962c:	4619      	mov	r1, r3
 800962e:	4819      	ldr	r0, [pc, #100]	; (8009694 <prvAddCurrentTaskToDelayedList+0x98>)
 8009630:	f7fe fb9d 	bl	8007d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009634:	e026      	b.n	8009684 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4413      	add	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800963e:	4b14      	ldr	r3, [pc, #80]	; (8009690 <prvAddCurrentTaskToDelayedList+0x94>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	429a      	cmp	r2, r3
 800964c:	d209      	bcs.n	8009662 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <prvAddCurrentTaskToDelayedList+0x94>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f7fe fbab 	bl	8007db6 <vListInsert>
}
 8009660:	e010      	b.n	8009684 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009662:	4b0e      	ldr	r3, [pc, #56]	; (800969c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <prvAddCurrentTaskToDelayedList+0x94>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe fba1 	bl	8007db6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009674:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	429a      	cmp	r2, r3
 800967c:	d202      	bcs.n	8009684 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800967e:	4a08      	ldr	r2, [pc, #32]	; (80096a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6013      	str	r3, [r2, #0]
}
 8009684:	bf00      	nop
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000e5c 	.word	0x20000e5c
 8009690:	20000984 	.word	0x20000984
 8009694:	20000e44 	.word	0x20000e44
 8009698:	20000e14 	.word	0x20000e14
 800969c:	20000e10 	.word	0x20000e10
 80096a0:	20000e78 	.word	0x20000e78

080096a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08a      	sub	sp, #40	; 0x28
 80096a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096ae:	f000 fb07 	bl	8009cc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096b2:	4b1c      	ldr	r3, [pc, #112]	; (8009724 <xTimerCreateTimerTask+0x80>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d021      	beq.n	80096fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096c2:	1d3a      	adds	r2, r7, #4
 80096c4:	f107 0108 	add.w	r1, r7, #8
 80096c8:	f107 030c 	add.w	r3, r7, #12
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fe fb07 	bl	8007ce0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096d2:	6879      	ldr	r1, [r7, #4]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	9202      	str	r2, [sp, #8]
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	2302      	movs	r3, #2
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	2300      	movs	r3, #0
 80096e2:	460a      	mov	r2, r1
 80096e4:	4910      	ldr	r1, [pc, #64]	; (8009728 <xTimerCreateTimerTask+0x84>)
 80096e6:	4811      	ldr	r0, [pc, #68]	; (800972c <xTimerCreateTimerTask+0x88>)
 80096e8:	f7ff f8b4 	bl	8008854 <xTaskCreateStatic>
 80096ec:	4603      	mov	r3, r0
 80096ee:	4a10      	ldr	r2, [pc, #64]	; (8009730 <xTimerCreateTimerTask+0x8c>)
 80096f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <xTimerCreateTimerTask+0x8c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096fa:	2301      	movs	r3, #1
 80096fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	613b      	str	r3, [r7, #16]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800971a:	697b      	ldr	r3, [r7, #20]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20000eb4 	.word	0x20000eb4
 8009728:	0800b928 	.word	0x0800b928
 800972c:	08009869 	.word	0x08009869
 8009730:	20000eb8 	.word	0x20000eb8

08009734 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	; 0x28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009742:	2300      	movs	r3, #0
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xTimerGenericCommand+0x2e>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	623b      	str	r3, [r7, #32]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009762:	4b1a      	ldr	r3, [pc, #104]	; (80097cc <xTimerGenericCommand+0x98>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d02a      	beq.n	80097c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b05      	cmp	r3, #5
 800977a:	dc18      	bgt.n	80097ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800977c:	f7ff feb2 	bl	80094e4 <xTaskGetSchedulerState>
 8009780:	4603      	mov	r3, r0
 8009782:	2b02      	cmp	r3, #2
 8009784:	d109      	bne.n	800979a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009786:	4b11      	ldr	r3, [pc, #68]	; (80097cc <xTimerGenericCommand+0x98>)
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	f107 0110 	add.w	r1, r7, #16
 800978e:	2300      	movs	r3, #0
 8009790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009792:	f7fe fc77 	bl	8008084 <xQueueGenericSend>
 8009796:	6278      	str	r0, [r7, #36]	; 0x24
 8009798:	e012      	b.n	80097c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800979a:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <xTimerGenericCommand+0x98>)
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	f107 0110 	add.w	r1, r7, #16
 80097a2:	2300      	movs	r3, #0
 80097a4:	2200      	movs	r2, #0
 80097a6:	f7fe fc6d 	bl	8008084 <xQueueGenericSend>
 80097aa:	6278      	str	r0, [r7, #36]	; 0x24
 80097ac:	e008      	b.n	80097c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097ae:	4b07      	ldr	r3, [pc, #28]	; (80097cc <xTimerGenericCommand+0x98>)
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f107 0110 	add.w	r1, r7, #16
 80097b6:	2300      	movs	r3, #0
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	f7fe fd61 	bl	8008280 <xQueueGenericSendFromISR>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3728      	adds	r7, #40	; 0x28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000eb4 	.word	0x20000eb4

080097d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097da:	4b22      	ldr	r3, [pc, #136]	; (8009864 <prvProcessExpiredTimer+0x94>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fe fb1d 	bl	8007e28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d022      	beq.n	8009842 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	699a      	ldr	r2, [r3, #24]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	18d1      	adds	r1, r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	6978      	ldr	r0, [r7, #20]
 800980a:	f000 f8d1 	bl	80099b0 <prvInsertTimerInActiveList>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01f      	beq.n	8009854 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009814:	2300      	movs	r3, #0
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	2300      	movs	r3, #0
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	2100      	movs	r1, #0
 800981e:	6978      	ldr	r0, [r7, #20]
 8009820:	f7ff ff88 	bl	8009734 <xTimerGenericCommand>
 8009824:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d113      	bne.n	8009854 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	60fb      	str	r3, [r7, #12]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	b2da      	uxtb	r2, r3
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	6978      	ldr	r0, [r7, #20]
 800985a:	4798      	blx	r3
}
 800985c:	bf00      	nop
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20000eac 	.word	0x20000eac

08009868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009870:	f107 0308 	add.w	r3, r7, #8
 8009874:	4618      	mov	r0, r3
 8009876:	f000 f857 	bl	8009928 <prvGetNextExpireTime>
 800987a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4619      	mov	r1, r3
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 f803 	bl	800988c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009886:	f000 f8d5 	bl	8009a34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800988a:	e7f1      	b.n	8009870 <prvTimerTask+0x8>

0800988c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009896:	f7ff fa39 	bl	8008d0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800989a:	f107 0308 	add.w	r3, r7, #8
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f866 	bl	8009970 <prvSampleTimeNow>
 80098a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d130      	bne.n	800990e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <prvProcessTimerOrBlockTask+0x3c>
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d806      	bhi.n	80098c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098ba:	f7ff fa35 	bl	8008d28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098be:	68f9      	ldr	r1, [r7, #12]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ff85 	bl	80097d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098c6:	e024      	b.n	8009912 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <prvProcessTimerOrBlockTask+0x90>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <prvProcessTimerOrBlockTask+0x50>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <prvProcessTimerOrBlockTask+0x52>
 80098dc:	2300      	movs	r3, #0
 80098de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098e0:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <prvProcessTimerOrBlockTask+0x94>)
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4619      	mov	r1, r3
 80098ee:	f7fe ff7d 	bl	80087ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098f2:	f7ff fa19 	bl	8008d28 <xTaskResumeAll>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098fc:	4b09      	ldr	r3, [pc, #36]	; (8009924 <prvProcessTimerOrBlockTask+0x98>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy
}
 800990c:	e001      	b.n	8009912 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800990e:	f7ff fa0b 	bl	8008d28 <xTaskResumeAll>
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000eb0 	.word	0x20000eb0
 8009920:	20000eb4 	.word	0x20000eb4
 8009924:	e000ed04 	.word	0xe000ed04

08009928 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009930:	4b0e      	ldr	r3, [pc, #56]	; (800996c <prvGetNextExpireTime+0x44>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <prvGetNextExpireTime+0x16>
 800993a:	2201      	movs	r2, #1
 800993c:	e000      	b.n	8009940 <prvGetNextExpireTime+0x18>
 800993e:	2200      	movs	r2, #0
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d105      	bne.n	8009958 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800994c:	4b07      	ldr	r3, [pc, #28]	; (800996c <prvGetNextExpireTime+0x44>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	e001      	b.n	800995c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800995c:	68fb      	ldr	r3, [r7, #12]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	20000eac 	.word	0x20000eac

08009970 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009978:	f7ff fa74 	bl	8008e64 <xTaskGetTickCount>
 800997c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800997e:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <prvSampleTimeNow+0x3c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	429a      	cmp	r2, r3
 8009986:	d205      	bcs.n	8009994 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009988:	f000 f936 	bl	8009bf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e002      	b.n	800999a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800999a:	4a04      	ldr	r2, [pc, #16]	; (80099ac <prvSampleTimeNow+0x3c>)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099a0:	68fb      	ldr	r3, [r7, #12]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20000ebc 	.word	0x20000ebc

080099b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d812      	bhi.n	80099fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	1ad2      	subs	r2, r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d302      	bcc.n	80099ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099e4:	2301      	movs	r3, #1
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	e01b      	b.n	8009a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099ea:	4b10      	ldr	r3, [pc, #64]	; (8009a2c <prvInsertTimerInActiveList+0x7c>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7fe f9de 	bl	8007db6 <vListInsert>
 80099fa:	e012      	b.n	8009a22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d206      	bcs.n	8009a12 <prvInsertTimerInActiveList+0x62>
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d302      	bcc.n	8009a12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e007      	b.n	8009a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a12:	4b07      	ldr	r3, [pc, #28]	; (8009a30 <prvInsertTimerInActiveList+0x80>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f7fe f9ca 	bl	8007db6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a22:	697b      	ldr	r3, [r7, #20]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20000eb0 	.word	0x20000eb0
 8009a30:	20000eac 	.word	0x20000eac

08009a34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08e      	sub	sp, #56	; 0x38
 8009a38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a3a:	e0ca      	b.n	8009bd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	da18      	bge.n	8009a74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a42:	1d3b      	adds	r3, r7, #4
 8009a44:	3304      	adds	r3, #4
 8009a46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	61fb      	str	r3, [r7, #28]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a6a:	6850      	ldr	r0, [r2, #4]
 8009a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a6e:	6892      	ldr	r2, [r2, #8]
 8009a70:	4611      	mov	r1, r2
 8009a72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f2c0 80aa 	blt.w	8009bd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe f9cb 	bl	8007e28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a92:	463b      	mov	r3, r7
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff ff6b 	bl	8009970 <prvSampleTimeNow>
 8009a9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b09      	cmp	r3, #9
 8009aa0:	f200 8097 	bhi.w	8009bd2 <prvProcessReceivedCommands+0x19e>
 8009aa4:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <prvProcessReceivedCommands+0x78>)
 8009aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aaa:	bf00      	nop
 8009aac:	08009ad5 	.word	0x08009ad5
 8009ab0:	08009ad5 	.word	0x08009ad5
 8009ab4:	08009ad5 	.word	0x08009ad5
 8009ab8:	08009b49 	.word	0x08009b49
 8009abc:	08009b5d 	.word	0x08009b5d
 8009ac0:	08009ba7 	.word	0x08009ba7
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009ad5 	.word	0x08009ad5
 8009acc:	08009b49 	.word	0x08009b49
 8009ad0:	08009b5d 	.word	0x08009b5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ada:	f043 0301 	orr.w	r3, r3, #1
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	18d1      	adds	r1, r2, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af4:	f7ff ff5c 	bl	80099b0 <prvInsertTimerInActiveList>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d069      	beq.n	8009bd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d05e      	beq.n	8009bd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	441a      	add	r2, r3
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	2300      	movs	r3, #0
 8009b22:	2100      	movs	r1, #0
 8009b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b26:	f7ff fe05 	bl	8009734 <xTimerGenericCommand>
 8009b2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d14f      	bne.n	8009bd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	61bb      	str	r3, [r7, #24]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b4e:	f023 0301 	bic.w	r3, r3, #1
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009b5a:	e03a      	b.n	8009bd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b62:	f043 0301 	orr.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	617b      	str	r3, [r7, #20]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	699a      	ldr	r2, [r3, #24]
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	18d1      	adds	r1, r2, r3
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba0:	f7ff ff06 	bl	80099b0 <prvInsertTimerInActiveList>
					break;
 8009ba4:	e015      	b.n	8009bd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d103      	bne.n	8009bbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb6:	f000 fbdb 	bl	800a370 <vPortFree>
 8009bba:	e00a      	b.n	8009bd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bc2:	f023 0301 	bic.w	r3, r3, #1
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009bce:	e000      	b.n	8009bd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009bd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bd2:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <prvProcessReceivedCommands+0x1c0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	1d39      	adds	r1, r7, #4
 8009bd8:	2200      	movs	r2, #0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe fbec 	bl	80083b8 <xQueueReceive>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f47f af2a 	bne.w	8009a3c <prvProcessReceivedCommands+0x8>
	}
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	3730      	adds	r7, #48	; 0x30
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000eb4 	.word	0x20000eb4

08009bf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bfe:	e048      	b.n	8009c92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c00:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <prvSwitchTimerLists+0xc0>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0a:	4b2b      	ldr	r3, [pc, #172]	; (8009cb8 <prvSwitchTimerLists+0xc0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3304      	adds	r3, #4
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe f905 	bl	8007e28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d02e      	beq.n	8009c92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d90e      	bls.n	8009c64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c52:	4b19      	ldr	r3, [pc, #100]	; (8009cb8 <prvSwitchTimerLists+0xc0>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7fe f8aa 	bl	8007db6 <vListInsert>
 8009c62:	e016      	b.n	8009c92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c64:	2300      	movs	r3, #0
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7ff fd60 	bl	8009734 <xTimerGenericCommand>
 8009c74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	603b      	str	r3, [r7, #0]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c92:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <prvSwitchTimerLists+0xc0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1b1      	bne.n	8009c00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c9c:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <prvSwitchTimerLists+0xc0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ca2:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <prvSwitchTimerLists+0xc4>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a04      	ldr	r2, [pc, #16]	; (8009cb8 <prvSwitchTimerLists+0xc0>)
 8009ca8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009caa:	4a04      	ldr	r2, [pc, #16]	; (8009cbc <prvSwitchTimerLists+0xc4>)
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	6013      	str	r3, [r2, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20000eac 	.word	0x20000eac
 8009cbc:	20000eb0 	.word	0x20000eb0

08009cc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cc6:	f000 f965 	bl	8009f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cca:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d120      	bne.n	8009d14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cd2:	4814      	ldr	r0, [pc, #80]	; (8009d24 <prvCheckForValidListAndQueue+0x64>)
 8009cd4:	f7fe f81e 	bl	8007d14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cd8:	4813      	ldr	r0, [pc, #76]	; (8009d28 <prvCheckForValidListAndQueue+0x68>)
 8009cda:	f7fe f81b 	bl	8007d14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cde:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <prvCheckForValidListAndQueue+0x6c>)
 8009ce0:	4a10      	ldr	r2, [pc, #64]	; (8009d24 <prvCheckForValidListAndQueue+0x64>)
 8009ce2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ce4:	4b12      	ldr	r3, [pc, #72]	; (8009d30 <prvCheckForValidListAndQueue+0x70>)
 8009ce6:	4a10      	ldr	r2, [pc, #64]	; (8009d28 <prvCheckForValidListAndQueue+0x68>)
 8009ce8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cea:	2300      	movs	r3, #0
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	4b11      	ldr	r3, [pc, #68]	; (8009d34 <prvCheckForValidListAndQueue+0x74>)
 8009cf0:	4a11      	ldr	r2, [pc, #68]	; (8009d38 <prvCheckForValidListAndQueue+0x78>)
 8009cf2:	2110      	movs	r1, #16
 8009cf4:	200a      	movs	r0, #10
 8009cf6:	f7fe f929 	bl	8007f4c <xQueueGenericCreateStatic>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4a08      	ldr	r2, [pc, #32]	; (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009cfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	490b      	ldr	r1, [pc, #44]	; (8009d3c <prvCheckForValidListAndQueue+0x7c>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fd42 	bl	8008798 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d14:	f000 f96e 	bl	8009ff4 <vPortExitCritical>
}
 8009d18:	bf00      	nop
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20000eb4 	.word	0x20000eb4
 8009d24:	20000e84 	.word	0x20000e84
 8009d28:	20000e98 	.word	0x20000e98
 8009d2c:	20000eac 	.word	0x20000eac
 8009d30:	20000eb0 	.word	0x20000eb0
 8009d34:	20000f60 	.word	0x20000f60
 8009d38:	20000ec0 	.word	0x20000ec0
 8009d3c:	0800b930 	.word	0x0800b930

08009d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	3b04      	subs	r3, #4
 8009d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3b04      	subs	r3, #4
 8009d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f023 0201 	bic.w	r2, r3, #1
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3b04      	subs	r3, #4
 8009d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d70:	4a0c      	ldr	r2, [pc, #48]	; (8009da4 <pxPortInitialiseStack+0x64>)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3b14      	subs	r3, #20
 8009d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f06f 0202 	mvn.w	r2, #2
 8009d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3b20      	subs	r3, #32
 8009d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d96:	68fb      	ldr	r3, [r7, #12]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	08009da9 	.word	0x08009da9

08009da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009db2:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <prvTaskExitError+0x54>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	d00a      	beq.n	8009dd2 <prvTaskExitError+0x2a>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	60fb      	str	r3, [r7, #12]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <prvTaskExitError+0x28>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	60bb      	str	r3, [r7, #8]
}
 8009de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009de6:	bf00      	nop
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0fc      	beq.n	8009de8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	2000011c 	.word	0x2000011c

08009e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <pxCurrentTCBConst2>)
 8009e02:	6819      	ldr	r1, [r3, #0]
 8009e04:	6808      	ldr	r0, [r1, #0]
 8009e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	f380 8809 	msr	PSP, r0
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f04f 0000 	mov.w	r0, #0
 8009e16:	f380 8811 	msr	BASEPRI, r0
 8009e1a:	4770      	bx	lr
 8009e1c:	f3af 8000 	nop.w

08009e20 <pxCurrentTCBConst2>:
 8009e20:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop

08009e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e28:	4808      	ldr	r0, [pc, #32]	; (8009e4c <prvPortStartFirstTask+0x24>)
 8009e2a:	6800      	ldr	r0, [r0, #0]
 8009e2c:	6800      	ldr	r0, [r0, #0]
 8009e2e:	f380 8808 	msr	MSP, r0
 8009e32:	f04f 0000 	mov.w	r0, #0
 8009e36:	f380 8814 	msr	CONTROL, r0
 8009e3a:	b662      	cpsie	i
 8009e3c:	b661      	cpsie	f
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	df00      	svc	0
 8009e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e4a:	bf00      	nop
 8009e4c:	e000ed08 	.word	0xe000ed08

08009e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e56:	4b46      	ldr	r3, [pc, #280]	; (8009f70 <xPortStartScheduler+0x120>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a46      	ldr	r2, [pc, #280]	; (8009f74 <xPortStartScheduler+0x124>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d10a      	bne.n	8009e76 <xPortStartScheduler+0x26>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	613b      	str	r3, [r7, #16]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e76:	4b3e      	ldr	r3, [pc, #248]	; (8009f70 <xPortStartScheduler+0x120>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a3f      	ldr	r2, [pc, #252]	; (8009f78 <xPortStartScheduler+0x128>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d10a      	bne.n	8009e96 <xPortStartScheduler+0x46>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	60fb      	str	r3, [r7, #12]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e96:	4b39      	ldr	r3, [pc, #228]	; (8009f7c <xPortStartScheduler+0x12c>)
 8009e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	22ff      	movs	r2, #255	; 0xff
 8009ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	4b31      	ldr	r3, [pc, #196]	; (8009f80 <xPortStartScheduler+0x130>)
 8009ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ebe:	4b31      	ldr	r3, [pc, #196]	; (8009f84 <xPortStartScheduler+0x134>)
 8009ec0:	2207      	movs	r2, #7
 8009ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ec4:	e009      	b.n	8009eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ec6:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <xPortStartScheduler+0x134>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	4a2d      	ldr	r2, [pc, #180]	; (8009f84 <xPortStartScheduler+0x134>)
 8009ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eda:	78fb      	ldrb	r3, [r7, #3]
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee2:	2b80      	cmp	r3, #128	; 0x80
 8009ee4:	d0ef      	beq.n	8009ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ee6:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <xPortStartScheduler+0x134>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f1c3 0307 	rsb	r3, r3, #7
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d00a      	beq.n	8009f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	60bb      	str	r3, [r7, #8]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f08:	4b1e      	ldr	r3, [pc, #120]	; (8009f84 <xPortStartScheduler+0x134>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	4a1d      	ldr	r2, [pc, #116]	; (8009f84 <xPortStartScheduler+0x134>)
 8009f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f12:	4b1c      	ldr	r3, [pc, #112]	; (8009f84 <xPortStartScheduler+0x134>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f1a:	4a1a      	ldr	r2, [pc, #104]	; (8009f84 <xPortStartScheduler+0x134>)
 8009f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f26:	4b18      	ldr	r3, [pc, #96]	; (8009f88 <xPortStartScheduler+0x138>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a17      	ldr	r2, [pc, #92]	; (8009f88 <xPortStartScheduler+0x138>)
 8009f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f32:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <xPortStartScheduler+0x138>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a14      	ldr	r2, [pc, #80]	; (8009f88 <xPortStartScheduler+0x138>)
 8009f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f3e:	f000 f8dd 	bl	800a0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f42:	4b12      	ldr	r3, [pc, #72]	; (8009f8c <xPortStartScheduler+0x13c>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f48:	f000 f8fc 	bl	800a144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f4c:	4b10      	ldr	r3, [pc, #64]	; (8009f90 <xPortStartScheduler+0x140>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a0f      	ldr	r2, [pc, #60]	; (8009f90 <xPortStartScheduler+0x140>)
 8009f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f58:	f7ff ff66 	bl	8009e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f5c:	f7ff f84c 	bl	8008ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8009f60:	f7ff ff22 	bl	8009da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	e000ed00 	.word	0xe000ed00
 8009f74:	410fc271 	.word	0x410fc271
 8009f78:	410fc270 	.word	0x410fc270
 8009f7c:	e000e400 	.word	0xe000e400
 8009f80:	20000fb0 	.word	0x20000fb0
 8009f84:	20000fb4 	.word	0x20000fb4
 8009f88:	e000ed20 	.word	0xe000ed20
 8009f8c:	2000011c 	.word	0x2000011c
 8009f90:	e000ef34 	.word	0xe000ef34

08009f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	607b      	str	r3, [r7, #4]
}
 8009fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fae:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <vPortEnterCritical+0x58>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	4a0d      	ldr	r2, [pc, #52]	; (8009fec <vPortEnterCritical+0x58>)
 8009fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <vPortEnterCritical+0x58>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d10f      	bne.n	8009fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <vPortEnterCritical+0x5c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	603b      	str	r3, [r7, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <vPortEnterCritical+0x4a>
	}
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	2000011c 	.word	0x2000011c
 8009ff0:	e000ed04 	.word	0xe000ed04

08009ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ffa:	4b12      	ldr	r3, [pc, #72]	; (800a044 <vPortExitCritical+0x50>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <vPortExitCritical+0x24>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	607b      	str	r3, [r7, #4]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a018:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <vPortExitCritical+0x50>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	4a09      	ldr	r2, [pc, #36]	; (800a044 <vPortExitCritical+0x50>)
 800a020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <vPortExitCritical+0x50>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d105      	bne.n	800a036 <vPortExitCritical+0x42>
 800a02a:	2300      	movs	r3, #0
 800a02c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	f383 8811 	msr	BASEPRI, r3
}
 800a034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	2000011c 	.word	0x2000011c
	...

0800a050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a050:	f3ef 8009 	mrs	r0, PSP
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <pxCurrentTCBConst>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	f01e 0f10 	tst.w	lr, #16
 800a060:	bf08      	it	eq
 800a062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06a:	6010      	str	r0, [r2, #0]
 800a06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a074:	f380 8811 	msr	BASEPRI, r0
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f7fe ffba 	bl	8008ff8 <vTaskSwitchContext>
 800a084:	f04f 0000 	mov.w	r0, #0
 800a088:	f380 8811 	msr	BASEPRI, r0
 800a08c:	bc09      	pop	{r0, r3}
 800a08e:	6819      	ldr	r1, [r3, #0]
 800a090:	6808      	ldr	r0, [r1, #0]
 800a092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a096:	f01e 0f10 	tst.w	lr, #16
 800a09a:	bf08      	it	eq
 800a09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0a0:	f380 8809 	msr	PSP, r0
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	f3af 8000 	nop.w

0800a0b0 <pxCurrentTCBConst>:
 800a0b0:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop

0800a0b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0d2:	f7fe fed7 	bl	8008e84 <xTaskIncrementTick>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0dc:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <xPortSysTickHandler+0x40>)
 800a0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	f383 8811 	msr	BASEPRI, r3
}
 800a0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	e000ed04 	.word	0xe000ed04

0800a0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <vPortSetupTimerInterrupt+0x34>)
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a106:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <vPortSetupTimerInterrupt+0x38>)
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a10c:	4b0a      	ldr	r3, [pc, #40]	; (800a138 <vPortSetupTimerInterrupt+0x3c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <vPortSetupTimerInterrupt+0x40>)
 800a112:	fba2 2303 	umull	r2, r3, r2, r3
 800a116:	099b      	lsrs	r3, r3, #6
 800a118:	4a09      	ldr	r2, [pc, #36]	; (800a140 <vPortSetupTimerInterrupt+0x44>)
 800a11a:	3b01      	subs	r3, #1
 800a11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a11e:	4b04      	ldr	r3, [pc, #16]	; (800a130 <vPortSetupTimerInterrupt+0x34>)
 800a120:	2207      	movs	r2, #7
 800a122:	601a      	str	r2, [r3, #0]
}
 800a124:	bf00      	nop
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	e000e010 	.word	0xe000e010
 800a134:	e000e018 	.word	0xe000e018
 800a138:	20000000 	.word	0x20000000
 800a13c:	10624dd3 	.word	0x10624dd3
 800a140:	e000e014 	.word	0xe000e014

0800a144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a154 <vPortEnableVFP+0x10>
 800a148:	6801      	ldr	r1, [r0, #0]
 800a14a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a14e:	6001      	str	r1, [r0, #0]
 800a150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a152:	bf00      	nop
 800a154:	e000ed88 	.word	0xe000ed88

0800a158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a15e:	f3ef 8305 	mrs	r3, IPSR
 800a162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b0f      	cmp	r3, #15
 800a168:	d914      	bls.n	800a194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a16a:	4a17      	ldr	r2, [pc, #92]	; (800a1c8 <vPortValidateInterruptPriority+0x70>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a174:	4b15      	ldr	r3, [pc, #84]	; (800a1cc <vPortValidateInterruptPriority+0x74>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	7afa      	ldrb	r2, [r7, #11]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d20a      	bcs.n	800a194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	607b      	str	r3, [r7, #4]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a194:	4b0e      	ldr	r3, [pc, #56]	; (800a1d0 <vPortValidateInterruptPriority+0x78>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a19c:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <vPortValidateInterruptPriority+0x7c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d90a      	bls.n	800a1ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	603b      	str	r3, [r7, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	e7fe      	b.n	800a1b8 <vPortValidateInterruptPriority+0x60>
	}
 800a1ba:	bf00      	nop
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	e000e3f0 	.word	0xe000e3f0
 800a1cc:	20000fb0 	.word	0x20000fb0
 800a1d0:	e000ed0c 	.word	0xe000ed0c
 800a1d4:	20000fb4 	.word	0x20000fb4

0800a1d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	; 0x28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1e4:	f7fe fd92 	bl	8008d0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1e8:	4b5b      	ldr	r3, [pc, #364]	; (800a358 <pvPortMalloc+0x180>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1f0:	f000 f920 	bl	800a434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1f4:	4b59      	ldr	r3, [pc, #356]	; (800a35c <pvPortMalloc+0x184>)
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f040 8093 	bne.w	800a328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d01d      	beq.n	800a244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a208:	2208      	movs	r2, #8
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4413      	add	r3, r2
 800a20e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	2b00      	cmp	r3, #0
 800a218:	d014      	beq.n	800a244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f023 0307 	bic.w	r3, r3, #7
 800a220:	3308      	adds	r3, #8
 800a222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <pvPortMalloc+0x6c>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	617b      	str	r3, [r7, #20]
}
 800a240:	bf00      	nop
 800a242:	e7fe      	b.n	800a242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d06e      	beq.n	800a328 <pvPortMalloc+0x150>
 800a24a:	4b45      	ldr	r3, [pc, #276]	; (800a360 <pvPortMalloc+0x188>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d869      	bhi.n	800a328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a254:	4b43      	ldr	r3, [pc, #268]	; (800a364 <pvPortMalloc+0x18c>)
 800a256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a258:	4b42      	ldr	r3, [pc, #264]	; (800a364 <pvPortMalloc+0x18c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a25e:	e004      	b.n	800a26a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d903      	bls.n	800a27c <pvPortMalloc+0xa4>
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1f1      	bne.n	800a260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a27c:	4b36      	ldr	r3, [pc, #216]	; (800a358 <pvPortMalloc+0x180>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a282:	429a      	cmp	r2, r3
 800a284:	d050      	beq.n	800a328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2208      	movs	r2, #8
 800a28c:	4413      	add	r3, r2
 800a28e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	1ad2      	subs	r2, r2, r3
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d91f      	bls.n	800a2e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	613b      	str	r3, [r7, #16]
}
 800a2cc:	bf00      	nop
 800a2ce:	e7fe      	b.n	800a2ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	1ad2      	subs	r2, r2, r3
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2e2:	69b8      	ldr	r0, [r7, #24]
 800a2e4:	f000 f908 	bl	800a4f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2e8:	4b1d      	ldr	r3, [pc, #116]	; (800a360 <pvPortMalloc+0x188>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	4a1b      	ldr	r2, [pc, #108]	; (800a360 <pvPortMalloc+0x188>)
 800a2f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2f6:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <pvPortMalloc+0x188>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <pvPortMalloc+0x190>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d203      	bcs.n	800a30a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a302:	4b17      	ldr	r3, [pc, #92]	; (800a360 <pvPortMalloc+0x188>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a18      	ldr	r2, [pc, #96]	; (800a368 <pvPortMalloc+0x190>)
 800a308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <pvPortMalloc+0x184>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	431a      	orrs	r2, r3
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a31e:	4b13      	ldr	r3, [pc, #76]	; (800a36c <pvPortMalloc+0x194>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3301      	adds	r3, #1
 800a324:	4a11      	ldr	r2, [pc, #68]	; (800a36c <pvPortMalloc+0x194>)
 800a326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a328:	f7fe fcfe 	bl	8008d28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <pvPortMalloc+0x174>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	60fb      	str	r3, [r7, #12]
}
 800a348:	bf00      	nop
 800a34a:	e7fe      	b.n	800a34a <pvPortMalloc+0x172>
	return pvReturn;
 800a34c:	69fb      	ldr	r3, [r7, #28]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3728      	adds	r7, #40	; 0x28
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20004bc0 	.word	0x20004bc0
 800a35c:	20004bd4 	.word	0x20004bd4
 800a360:	20004bc4 	.word	0x20004bc4
 800a364:	20004bb8 	.word	0x20004bb8
 800a368:	20004bc8 	.word	0x20004bc8
 800a36c:	20004bcc 	.word	0x20004bcc

0800a370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d04d      	beq.n	800a41e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a382:	2308      	movs	r3, #8
 800a384:	425b      	negs	r3, r3
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	4413      	add	r3, r2
 800a38a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	4b24      	ldr	r3, [pc, #144]	; (800a428 <vPortFree+0xb8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4013      	ands	r3, r2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <vPortFree+0x44>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	60fb      	str	r3, [r7, #12]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <vPortFree+0x62>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	60bb      	str	r3, [r7, #8]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	4b14      	ldr	r3, [pc, #80]	; (800a428 <vPortFree+0xb8>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01e      	beq.n	800a41e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11a      	bne.n	800a41e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <vPortFree+0xb8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	43db      	mvns	r3, r3
 800a3f2:	401a      	ands	r2, r3
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3f8:	f7fe fc88 	bl	8008d0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <vPortFree+0xbc>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4413      	add	r3, r2
 800a406:	4a09      	ldr	r2, [pc, #36]	; (800a42c <vPortFree+0xbc>)
 800a408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a40a:	6938      	ldr	r0, [r7, #16]
 800a40c:	f000 f874 	bl	800a4f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <vPortFree+0xc0>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3301      	adds	r3, #1
 800a416:	4a06      	ldr	r2, [pc, #24]	; (800a430 <vPortFree+0xc0>)
 800a418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a41a:	f7fe fc85 	bl	8008d28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a41e:	bf00      	nop
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20004bd4 	.word	0x20004bd4
 800a42c:	20004bc4 	.word	0x20004bc4
 800a430:	20004bd0 	.word	0x20004bd0

0800a434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a43a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a43e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a440:	4b27      	ldr	r3, [pc, #156]	; (800a4e0 <prvHeapInit+0xac>)
 800a442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00c      	beq.n	800a468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3307      	adds	r3, #7
 800a452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f023 0307 	bic.w	r3, r3, #7
 800a45a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	4a1f      	ldr	r2, [pc, #124]	; (800a4e0 <prvHeapInit+0xac>)
 800a464:	4413      	add	r3, r2
 800a466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a46c:	4a1d      	ldr	r2, [pc, #116]	; (800a4e4 <prvHeapInit+0xb0>)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a472:	4b1c      	ldr	r3, [pc, #112]	; (800a4e4 <prvHeapInit+0xb0>)
 800a474:	2200      	movs	r2, #0
 800a476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a480:	2208      	movs	r2, #8
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f023 0307 	bic.w	r3, r3, #7
 800a48e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4a15      	ldr	r2, [pc, #84]	; (800a4e8 <prvHeapInit+0xb4>)
 800a494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a496:	4b14      	ldr	r3, [pc, #80]	; (800a4e8 <prvHeapInit+0xb4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2200      	movs	r2, #0
 800a49c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a49e:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <prvHeapInit+0xb4>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <prvHeapInit+0xb4>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	4a0a      	ldr	r2, [pc, #40]	; (800a4ec <prvHeapInit+0xb8>)
 800a4c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	4a09      	ldr	r2, [pc, #36]	; (800a4f0 <prvHeapInit+0xbc>)
 800a4ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4cc:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <prvHeapInit+0xc0>)
 800a4ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4d2:	601a      	str	r2, [r3, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000fb8 	.word	0x20000fb8
 800a4e4:	20004bb8 	.word	0x20004bb8
 800a4e8:	20004bc0 	.word	0x20004bc0
 800a4ec:	20004bc8 	.word	0x20004bc8
 800a4f0:	20004bc4 	.word	0x20004bc4
 800a4f4:	20004bd4 	.word	0x20004bd4

0800a4f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a500:	4b28      	ldr	r3, [pc, #160]	; (800a5a4 <prvInsertBlockIntoFreeList+0xac>)
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e002      	b.n	800a50c <prvInsertBlockIntoFreeList+0x14>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	429a      	cmp	r2, r3
 800a514:	d8f7      	bhi.n	800a506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	4413      	add	r3, r2
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	429a      	cmp	r2, r3
 800a526:	d108      	bne.n	800a53a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	441a      	add	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	441a      	add	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d118      	bne.n	800a580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d00d      	beq.n	800a576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	441a      	add	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	e008      	b.n	800a588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a576:	4b0c      	ldr	r3, [pc, #48]	; (800a5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	e003      	b.n	800a588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d002      	beq.n	800a596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a596:	bf00      	nop
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20004bb8 	.word	0x20004bb8
 800a5a8:	20004bc0 	.word	0x20004bc0

0800a5ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4912      	ldr	r1, [pc, #72]	; (800a5fc <MX_USB_DEVICE_Init+0x50>)
 800a5b4:	4812      	ldr	r0, [pc, #72]	; (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5b6:	f7fc f8d3 	bl	8006760 <USBD_Init>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5c0:	f7f6 f990 	bl	80008e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5c4:	490f      	ldr	r1, [pc, #60]	; (800a604 <MX_USB_DEVICE_Init+0x58>)
 800a5c6:	480e      	ldr	r0, [pc, #56]	; (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5c8:	f7fc f8fa 	bl	80067c0 <USBD_RegisterClass>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5d2:	f7f6 f987 	bl	80008e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5d6:	490c      	ldr	r1, [pc, #48]	; (800a608 <MX_USB_DEVICE_Init+0x5c>)
 800a5d8:	4809      	ldr	r0, [pc, #36]	; (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5da:	f7fc f81b 	bl	8006614 <USBD_CDC_RegisterInterface>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5e4:	f7f6 f97e 	bl	80008e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5e8:	4805      	ldr	r0, [pc, #20]	; (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5ea:	f7fc f910 	bl	800680e <USBD_Start>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5f4:	f7f6 f976 	bl	80008e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5f8:	bf00      	nop
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20000134 	.word	0x20000134
 800a600:	20004f8c 	.word	0x20004f8c
 800a604:	20000018 	.word	0x20000018
 800a608:	20000120 	.word	0x20000120

0800a60c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a610:	2200      	movs	r2, #0
 800a612:	4905      	ldr	r1, [pc, #20]	; (800a628 <CDC_Init_FS+0x1c>)
 800a614:	4805      	ldr	r0, [pc, #20]	; (800a62c <CDC_Init_FS+0x20>)
 800a616:	f7fc f812 	bl	800663e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a61a:	4905      	ldr	r1, [pc, #20]	; (800a630 <CDC_Init_FS+0x24>)
 800a61c:	4803      	ldr	r0, [pc, #12]	; (800a62c <CDC_Init_FS+0x20>)
 800a61e:	f7fc f82c 	bl	800667a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a622:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a624:	4618      	mov	r0, r3
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20005644 	.word	0x20005644
 800a62c:	20004f8c 	.word	0x20004f8c
 800a630:	2000525c 	.word	0x2000525c

0800a634 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a634:	b480      	push	{r7}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a638:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
 800a650:	4613      	mov	r3, r2
 800a652:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	2b23      	cmp	r3, #35	; 0x23
 800a658:	d84a      	bhi.n	800a6f0 <CDC_Control_FS+0xac>
 800a65a:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <CDC_Control_FS+0x1c>)
 800a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a660:	0800a6f1 	.word	0x0800a6f1
 800a664:	0800a6f1 	.word	0x0800a6f1
 800a668:	0800a6f1 	.word	0x0800a6f1
 800a66c:	0800a6f1 	.word	0x0800a6f1
 800a670:	0800a6f1 	.word	0x0800a6f1
 800a674:	0800a6f1 	.word	0x0800a6f1
 800a678:	0800a6f1 	.word	0x0800a6f1
 800a67c:	0800a6f1 	.word	0x0800a6f1
 800a680:	0800a6f1 	.word	0x0800a6f1
 800a684:	0800a6f1 	.word	0x0800a6f1
 800a688:	0800a6f1 	.word	0x0800a6f1
 800a68c:	0800a6f1 	.word	0x0800a6f1
 800a690:	0800a6f1 	.word	0x0800a6f1
 800a694:	0800a6f1 	.word	0x0800a6f1
 800a698:	0800a6f1 	.word	0x0800a6f1
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a6f1 	.word	0x0800a6f1
 800a6a4:	0800a6f1 	.word	0x0800a6f1
 800a6a8:	0800a6f1 	.word	0x0800a6f1
 800a6ac:	0800a6f1 	.word	0x0800a6f1
 800a6b0:	0800a6f1 	.word	0x0800a6f1
 800a6b4:	0800a6f1 	.word	0x0800a6f1
 800a6b8:	0800a6f1 	.word	0x0800a6f1
 800a6bc:	0800a6f1 	.word	0x0800a6f1
 800a6c0:	0800a6f1 	.word	0x0800a6f1
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	0800a6f1 	.word	0x0800a6f1
 800a6cc:	0800a6f1 	.word	0x0800a6f1
 800a6d0:	0800a6f1 	.word	0x0800a6f1
 800a6d4:	0800a6f1 	.word	0x0800a6f1
 800a6d8:	0800a6f1 	.word	0x0800a6f1
 800a6dc:	0800a6f1 	.word	0x0800a6f1
 800a6e0:	0800a6f1 	.word	0x0800a6f1
 800a6e4:	0800a6f1 	.word	0x0800a6f1
 800a6e8:	0800a6f1 	.word	0x0800a6f1
 800a6ec:	0800a6f1 	.word	0x0800a6f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6f0:	bf00      	nop
  }

  return (USBD_OK);
 800a6f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	4808      	ldr	r0, [pc, #32]	; (800a730 <CDC_Receive_FS+0x30>)
 800a70e:	f7fb ffb4 	bl	800667a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a712:	4807      	ldr	r0, [pc, #28]	; (800a730 <CDC_Receive_FS+0x30>)
 800a714:	f7fb fffa 	bl	800670c <USBD_CDC_ReceivePacket>
  usb_rx_handler(Buf, *Len);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fcfe 	bl	800b120 <usb_rx_handler>
  return (USBD_OK);
 800a724:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20004f8c 	.word	0x20004f8c

0800a734 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <CDC_Transmit_FS+0x48>)
 800a746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a74a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a756:	2301      	movs	r3, #1
 800a758:	e00b      	b.n	800a772 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a75a:	887b      	ldrh	r3, [r7, #2]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4806      	ldr	r0, [pc, #24]	; (800a77c <CDC_Transmit_FS+0x48>)
 800a762:	f7fb ff6c 	bl	800663e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a766:	4805      	ldr	r0, [pc, #20]	; (800a77c <CDC_Transmit_FS+0x48>)
 800a768:	f7fb ffa0 	bl	80066ac <USBD_CDC_TransmitPacket>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20004f8c 	.word	0x20004f8c

0800a780 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a796:	4618      	mov	r0, r3
 800a798:	371c      	adds	r7, #28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2212      	movs	r2, #18
 800a7b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7b6:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	20000150 	.word	0x20000150

0800a7c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2204      	movs	r2, #4
 800a7d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7da:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	20000164 	.word	0x20000164

0800a7ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6039      	str	r1, [r7, #0]
 800a7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d105      	bne.n	800a80a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	4907      	ldr	r1, [pc, #28]	; (800a820 <USBD_FS_ProductStrDescriptor+0x34>)
 800a802:	4808      	ldr	r0, [pc, #32]	; (800a824 <USBD_FS_ProductStrDescriptor+0x38>)
 800a804:	f7fd f835 	bl	8007872 <USBD_GetString>
 800a808:	e004      	b.n	800a814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	4904      	ldr	r1, [pc, #16]	; (800a820 <USBD_FS_ProductStrDescriptor+0x34>)
 800a80e:	4805      	ldr	r0, [pc, #20]	; (800a824 <USBD_FS_ProductStrDescriptor+0x38>)
 800a810:	f7fd f82f 	bl	8007872 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a814:	4b02      	ldr	r3, [pc, #8]	; (800a820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20005a2c 	.word	0x20005a2c
 800a824:	0800b938 	.word	0x0800b938

0800a828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4603      	mov	r3, r0
 800a830:	6039      	str	r1, [r7, #0]
 800a832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	4904      	ldr	r1, [pc, #16]	; (800a848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a838:	4804      	ldr	r0, [pc, #16]	; (800a84c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a83a:	f7fd f81a 	bl	8007872 <USBD_GetString>
  return USBD_StrDesc;
 800a83e:	4b02      	ldr	r3, [pc, #8]	; (800a848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20005a2c 	.word	0x20005a2c
 800a84c:	0800b950 	.word	0x0800b950

0800a850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	6039      	str	r1, [r7, #0]
 800a85a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	221a      	movs	r2, #26
 800a860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a862:	f000 f843 	bl	800a8ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a866:	4b02      	ldr	r3, [pc, #8]	; (800a870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20000168 	.word	0x20000168

0800a874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	4603      	mov	r3, r0
 800a87c:	6039      	str	r1, [r7, #0]
 800a87e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d105      	bne.n	800a892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	4907      	ldr	r1, [pc, #28]	; (800a8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a88a:	4808      	ldr	r0, [pc, #32]	; (800a8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800a88c:	f7fc fff1 	bl	8007872 <USBD_GetString>
 800a890:	e004      	b.n	800a89c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	4904      	ldr	r1, [pc, #16]	; (800a8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a896:	4805      	ldr	r0, [pc, #20]	; (800a8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800a898:	f7fc ffeb 	bl	8007872 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a89c:	4b02      	ldr	r3, [pc, #8]	; (800a8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20005a2c 	.word	0x20005a2c
 800a8ac:	0800b964 	.word	0x0800b964

0800a8b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	6039      	str	r1, [r7, #0]
 800a8ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	4907      	ldr	r1, [pc, #28]	; (800a8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8c6:	4808      	ldr	r0, [pc, #32]	; (800a8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8c8:	f7fc ffd3 	bl	8007872 <USBD_GetString>
 800a8cc:	e004      	b.n	800a8d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4904      	ldr	r1, [pc, #16]	; (800a8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8d2:	4805      	ldr	r0, [pc, #20]	; (800a8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8d4:	f7fc ffcd 	bl	8007872 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8d8:	4b02      	ldr	r3, [pc, #8]	; (800a8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20005a2c 	.word	0x20005a2c
 800a8e8:	0800b970 	.word	0x0800b970

0800a8ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8f2:	4b0f      	ldr	r3, [pc, #60]	; (800a930 <Get_SerialNum+0x44>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8f8:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <Get_SerialNum+0x48>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8fe:	4b0e      	ldr	r3, [pc, #56]	; (800a938 <Get_SerialNum+0x4c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4413      	add	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d009      	beq.n	800a926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a912:	2208      	movs	r2, #8
 800a914:	4909      	ldr	r1, [pc, #36]	; (800a93c <Get_SerialNum+0x50>)
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 f814 	bl	800a944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a91c:	2204      	movs	r2, #4
 800a91e:	4908      	ldr	r1, [pc, #32]	; (800a940 <Get_SerialNum+0x54>)
 800a920:	68b8      	ldr	r0, [r7, #8]
 800a922:	f000 f80f 	bl	800a944 <IntToUnicode>
  }
}
 800a926:	bf00      	nop
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	1fff7a10 	.word	0x1fff7a10
 800a934:	1fff7a14 	.word	0x1fff7a14
 800a938:	1fff7a18 	.word	0x1fff7a18
 800a93c:	2000016a 	.word	0x2000016a
 800a940:	2000017a 	.word	0x2000017a

0800a944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	4613      	mov	r3, r2
 800a950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a956:	2300      	movs	r3, #0
 800a958:	75fb      	strb	r3, [r7, #23]
 800a95a:	e027      	b.n	800a9ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	0f1b      	lsrs	r3, r3, #28
 800a960:	2b09      	cmp	r3, #9
 800a962:	d80b      	bhi.n	800a97c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	0f1b      	lsrs	r3, r3, #28
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	4619      	mov	r1, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	440b      	add	r3, r1
 800a974:	3230      	adds	r2, #48	; 0x30
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e00a      	b.n	800a992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	0f1b      	lsrs	r3, r3, #28
 800a980:	b2da      	uxtb	r2, r3
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	4619      	mov	r1, r3
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	440b      	add	r3, r1
 800a98c:	3237      	adds	r2, #55	; 0x37
 800a98e:	b2d2      	uxtb	r2, r2
 800a990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	011b      	lsls	r3, r3, #4
 800a996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	3301      	adds	r3, #1
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	75fb      	strb	r3, [r7, #23]
 800a9ac:	7dfa      	ldrb	r2, [r7, #23]
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d3d3      	bcc.n	800a95c <IntToUnicode+0x18>
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	371c      	adds	r7, #28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08a      	sub	sp, #40	; 0x28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9cc:	f107 0314 	add.w	r3, r7, #20
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	605a      	str	r2, [r3, #4]
 800a9d6:	609a      	str	r2, [r3, #8]
 800a9d8:	60da      	str	r2, [r3, #12]
 800a9da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9e4:	d13a      	bne.n	800aa5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	613b      	str	r3, [r7, #16]
 800a9ea:	4b1e      	ldr	r3, [pc, #120]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800a9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ee:	4a1d      	ldr	r2, [pc, #116]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800a9f0:	f043 0301 	orr.w	r3, r3, #1
 800a9f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a9f6:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa10:	2303      	movs	r3, #3
 800aa12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa14:	230a      	movs	r3, #10
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa18:	f107 0314 	add.w	r3, r7, #20
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4812      	ldr	r0, [pc, #72]	; (800aa68 <HAL_PCD_MspInit+0xa4>)
 800aa20:	f7f6 fde0 	bl	80015e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa24:	4b0f      	ldr	r3, [pc, #60]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800aa26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa28:	4a0e      	ldr	r2, [pc, #56]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800aa2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa2e:	6353      	str	r3, [r2, #52]	; 0x34
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800aa36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa38:	4a0a      	ldr	r2, [pc, #40]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800aa3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa3e:	6453      	str	r3, [r2, #68]	; 0x44
 800aa40:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <HAL_PCD_MspInit+0xa0>)
 800aa42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2105      	movs	r1, #5
 800aa50:	2043      	movs	r0, #67	; 0x43
 800aa52:	f7f6 fa0b 	bl	8000e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa56:	2043      	movs	r0, #67	; 0x43
 800aa58:	f7f6 fa24 	bl	8000ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa5c:	bf00      	nop
 800aa5e:	3728      	adds	r7, #40	; 0x28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	40023800 	.word	0x40023800
 800aa68:	40020000 	.word	0x40020000

0800aa6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f7fb ff0e 	bl	80068a4 <USBD_LL_SetupStage>
}
 800aa88:	bf00      	nop
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aaa2:	78fa      	ldrb	r2, [r7, #3]
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	1a9b      	subs	r3, r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	440b      	add	r3, r1
 800aab0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	4619      	mov	r1, r3
 800aaba:	f7fb ff48 	bl	800694e <USBD_LL_DataOutStage>
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	460b      	mov	r3, r1
 800aad0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aad8:	78fa      	ldrb	r2, [r7, #3]
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	4613      	mov	r3, r2
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	1a9b      	subs	r3, r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	440b      	add	r3, r1
 800aae6:	3348      	adds	r3, #72	; 0x48
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7fb ff91 	bl	8006a14 <USBD_LL_DataInStage>
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fc f8a5 	bl	8006c58 <USBD_LL_SOF>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d001      	beq.n	800ab2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab2a:	f7f5 fedb 	bl	80008e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab34:	7bfa      	ldrb	r2, [r7, #15]
 800ab36:	4611      	mov	r1, r2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fc f84f 	bl	8006bdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fb fffb 	bl	8006b40 <USBD_LL_Reset>
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fc f84a 	bl	8006bfc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6812      	ldr	r2, [r2, #0]
 800ab76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab7a:	f043 0301 	orr.w	r3, r3, #1
 800ab7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab88:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <HAL_PCD_SuspendCallback+0x48>)
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	4a03      	ldr	r2, [pc, #12]	; (800ab9c <HAL_PCD_SuspendCallback+0x48>)
 800ab8e:	f043 0306 	orr.w	r3, r3, #6
 800ab92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	e000ed00 	.word	0xe000ed00

0800aba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fc f83a 	bl	8006c28 <USBD_LL_Resume>
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	460b      	mov	r3, r1
 800abc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abce:	78fa      	ldrb	r2, [r7, #3]
 800abd0:	4611      	mov	r1, r2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fc f888 	bl	8006ce8 <USBD_LL_IsoOUTIncomplete>
}
 800abd8:	bf00      	nop
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abf2:	78fa      	ldrb	r2, [r7, #3]
 800abf4:	4611      	mov	r1, r2
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fc f850 	bl	8006c9c <USBD_LL_IsoINIncomplete>
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fc f88e 	bl	8006d34 <USBD_LL_DevConnected>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fc f88b 	bl	8006d4a <USBD_LL_DevDisconnected>
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d13c      	bne.n	800acc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac4c:	4a20      	ldr	r2, [pc, #128]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a1e      	ldr	r2, [pc, #120]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac5c:	4b1c      	ldr	r3, [pc, #112]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac64:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac66:	2204      	movs	r2, #4
 800ac68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac6a:	4b19      	ldr	r3, [pc, #100]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac70:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac76:	4b16      	ldr	r3, [pc, #88]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac78:	2202      	movs	r2, #2
 800ac7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac7c:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac82:	4b13      	ldr	r3, [pc, #76]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac88:	4b11      	ldr	r3, [pc, #68]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac8e:	4b10      	ldr	r3, [pc, #64]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac94:	4b0e      	ldr	r3, [pc, #56]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac9a:	480d      	ldr	r0, [pc, #52]	; (800acd0 <USBD_LL_Init+0x94>)
 800ac9c:	f7f6 fe72 	bl	8001984 <HAL_PCD_Init>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aca6:	f7f5 fe1d 	bl	80008e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800acaa:	2180      	movs	r1, #128	; 0x80
 800acac:	4808      	ldr	r0, [pc, #32]	; (800acd0 <USBD_LL_Init+0x94>)
 800acae:	f7f7 ffd0 	bl	8002c52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acb2:	2240      	movs	r2, #64	; 0x40
 800acb4:	2100      	movs	r1, #0
 800acb6:	4806      	ldr	r0, [pc, #24]	; (800acd0 <USBD_LL_Init+0x94>)
 800acb8:	f7f7 ff84 	bl	8002bc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800acbc:	2280      	movs	r2, #128	; 0x80
 800acbe:	2101      	movs	r1, #1
 800acc0:	4803      	ldr	r0, [pc, #12]	; (800acd0 <USBD_LL_Init+0x94>)
 800acc2:	f7f7 ff7f 	bl	8002bc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20005c2c 	.word	0x20005c2c

0800acd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acea:	4618      	mov	r0, r3
 800acec:	f7f6 ff67 	bl	8001bbe <HAL_PCD_Start>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f942 	bl	800af80 <USBD_Get_USB_Status>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	4608      	mov	r0, r1
 800ad14:	4611      	mov	r1, r2
 800ad16:	461a      	mov	r2, r3
 800ad18:	4603      	mov	r3, r0
 800ad1a:	70fb      	strb	r3, [r7, #3]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70bb      	strb	r3, [r7, #2]
 800ad20:	4613      	mov	r3, r2
 800ad22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad32:	78bb      	ldrb	r3, [r7, #2]
 800ad34:	883a      	ldrh	r2, [r7, #0]
 800ad36:	78f9      	ldrb	r1, [r7, #3]
 800ad38:	f7f7 fb4b 	bl	80023d2 <HAL_PCD_EP_Open>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f91c 	bl	800af80 <USBD_Get_USB_Status>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	460b      	mov	r3, r1
 800ad60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	4611      	mov	r1, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7f7 fb94 	bl	80024a2 <HAL_PCD_EP_Close>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 f8fd 	bl	800af80 <USBD_Get_USB_Status>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7f7 fc6c 	bl	8002690 <HAL_PCD_EP_SetStall>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 f8de 	bl	800af80 <USBD_Get_USB_Status>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b084      	sub	sp, #16
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	460b      	mov	r3, r1
 800addc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adec:	78fa      	ldrb	r2, [r7, #3]
 800adee:	4611      	mov	r1, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7f7 fcb1 	bl	8002758 <HAL_PCD_EP_ClrStall>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f8bf 	bl	800af80 <USBD_Get_USB_Status>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	da0b      	bge.n	800ae44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae32:	68f9      	ldr	r1, [r7, #12]
 800ae34:	4613      	mov	r3, r2
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	1a9b      	subs	r3, r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	440b      	add	r3, r1
 800ae3e:	333e      	adds	r3, #62	; 0x3e
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	e00b      	b.n	800ae5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	1a9b      	subs	r3, r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	440b      	add	r3, r1
 800ae56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7f7 fa7e 	bl	8002388 <HAL_PCD_SetAddress>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 f874 	bl	800af80 <USBD_Get_USB_Status>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b086      	sub	sp, #24
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	603b      	str	r3, [r7, #0]
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aec4:	7af9      	ldrb	r1, [r7, #11]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	f7f7 fb97 	bl	80025fc <HAL_PCD_EP_Transmit>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 f853 	bl	800af80 <USBD_Get_USB_Status>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aede:	7dbb      	ldrb	r3, [r7, #22]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	607a      	str	r2, [r7, #4]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	460b      	mov	r3, r1
 800aef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af06:	7af9      	ldrb	r1, [r7, #11]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	f7f7 fb13 	bl	8002536 <HAL_PCD_EP_Receive>
 800af10:	4603      	mov	r3, r0
 800af12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af14:	7dfb      	ldrb	r3, [r7, #23]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f832 	bl	800af80 <USBD_Get_USB_Status>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af20:	7dbb      	ldrb	r3, [r7, #22]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	460b      	mov	r3, r1
 800af34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af3c:	78fa      	ldrb	r2, [r7, #3]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f7f7 fb43 	bl	80025cc <HAL_PCD_EP_GetRxCount>
 800af46:	4603      	mov	r3, r0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af58:	4b03      	ldr	r3, [pc, #12]	; (800af68 <USBD_static_malloc+0x18>)
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	20004bd8 	.word	0x20004bd8

0800af6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]

}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	2b03      	cmp	r3, #3
 800af92:	d817      	bhi.n	800afc4 <USBD_Get_USB_Status+0x44>
 800af94:	a201      	add	r2, pc, #4	; (adr r2, 800af9c <USBD_Get_USB_Status+0x1c>)
 800af96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9a:	bf00      	nop
 800af9c:	0800afad 	.word	0x0800afad
 800afa0:	0800afb3 	.word	0x0800afb3
 800afa4:	0800afb9 	.word	0x0800afb9
 800afa8:	0800afbf 	.word	0x0800afbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
    break;
 800afb0:	e00b      	b.n	800afca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afb2:	2303      	movs	r3, #3
 800afb4:	73fb      	strb	r3, [r7, #15]
    break;
 800afb6:	e008      	b.n	800afca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afb8:	2301      	movs	r3, #1
 800afba:	73fb      	strb	r3, [r7, #15]
    break;
 800afbc:	e005      	b.n	800afca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afbe:	2303      	movs	r3, #3
 800afc0:	73fb      	strb	r3, [r7, #15]
    break;
 800afc2:	e002      	b.n	800afca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afc4:	2303      	movs	r3, #3
 800afc6:	73fb      	strb	r3, [r7, #15]
    break;
 800afc8:	bf00      	nop
  }
  return usb_status;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <msg_handler>:

#include "messages.h"
uint8_t msg_in_buf[128];
uint8_t msg_out_buf[128];

void msg_handler(uint8_t type, uint8_t id, uint8_t *msg, uint16_t length) {
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	603a      	str	r2, [r7, #0]
 800afe0:	461a      	mov	r2, r3
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
 800afe6:	460b      	mov	r3, r1
 800afe8:	71bb      	strb	r3, [r7, #6]
 800afea:	4613      	mov	r3, r2
 800afec:	80bb      	strh	r3, [r7, #4]
	switch (type) {
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	2b05      	cmp	r3, #5
 800aff2:	d018      	beq.n	800b026 <msg_handler+0x4e>
 800aff4:	2b05      	cmp	r3, #5
 800aff6:	dc1c      	bgt.n	800b032 <msg_handler+0x5a>
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d014      	beq.n	800b026 <msg_handler+0x4e>
 800affc:	2b04      	cmp	r3, #4
 800affe:	d118      	bne.n	800b032 <msg_handler+0x5a>
	case MSG_TYPE_WRITE: {
		switch (id) {
 800b000:	79bb      	ldrb	r3, [r7, #6]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d002      	beq.n	800b00c <msg_handler+0x34>
 800b006:	2b02      	cmp	r3, #2
 800b008:	d006      	beq.n	800b018 <msg_handler+0x40>
		}
		case MSG_WRITE_STATUS_LED_ID:
			msg_write_status_led(msg, length);
			break;
		}
		break;
 800b00a:	e012      	b.n	800b032 <msg_handler+0x5a>
			msg_write_discrete_led(msg, length);
 800b00c:	88bb      	ldrh	r3, [r7, #4]
 800b00e:	4619      	mov	r1, r3
 800b010:	6838      	ldr	r0, [r7, #0]
 800b012:	f000 f8ea 	bl	800b1ea <msg_write_discrete_led>
			break;
 800b016:	e005      	b.n	800b024 <msg_handler+0x4c>
			msg_write_status_led(msg, length);
 800b018:	88bb      	ldrh	r3, [r7, #4]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6838      	ldr	r0, [r7, #0]
 800b01e:	f000 f939 	bl	800b294 <msg_write_status_led>
			break;
 800b022:	bf00      	nop
		break;
 800b024:	e005      	b.n	800b032 <msg_handler+0x5a>
	}
	case MSG_TYPE_REQUEST: {
		case MSG_REQUEST_ECHO_ID:
		msg_request_echo(msg, length);
 800b026:	88bb      	ldrh	r3, [r7, #4]
 800b028:	4619      	mov	r1, r3
 800b02a:	6838      	ldr	r0, [r7, #0]
 800b02c:	f000 f858 	bl	800b0e0 <msg_request_echo>
		break;
 800b030:	bf00      	nop
	}
	}
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <send_msg>:

void send_msg(uint8_t type, uint8_t id, uint8_t *data, uint16_t length) {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	603a      	str	r2, [r7, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	4603      	mov	r3, r0
 800b048:	71fb      	strb	r3, [r7, #7]
 800b04a:	460b      	mov	r3, r1
 800b04c:	71bb      	strb	r3, [r7, #6]
 800b04e:	4613      	mov	r3, r2
 800b050:	80bb      	strh	r3, [r7, #4]
	usb_tx_buf[0] = HEADER_0;
 800b052:	4b18      	ldr	r3, [pc, #96]	; (800b0b4 <send_msg+0x78>)
 800b054:	22aa      	movs	r2, #170	; 0xaa
 800b056:	701a      	strb	r2, [r3, #0]
	usb_tx_buf[1] = HEADER_1;
 800b058:	4b16      	ldr	r3, [pc, #88]	; (800b0b4 <send_msg+0x78>)
 800b05a:	22bb      	movs	r2, #187	; 0xbb
 800b05c:	705a      	strb	r2, [r3, #1]
	usb_tx_buf[2] = type;
 800b05e:	4a15      	ldr	r2, [pc, #84]	; (800b0b4 <send_msg+0x78>)
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	7093      	strb	r3, [r2, #2]
	usb_tx_buf[3] = id;
 800b064:	4a13      	ldr	r2, [pc, #76]	; (800b0b4 <send_msg+0x78>)
 800b066:	79bb      	ldrb	r3, [r7, #6]
 800b068:	70d3      	strb	r3, [r2, #3]
	usb_tx_buf[4] = length;
 800b06a:	88bb      	ldrh	r3, [r7, #4]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	4b11      	ldr	r3, [pc, #68]	; (800b0b4 <send_msg+0x78>)
 800b070:	711a      	strb	r2, [r3, #4]
	if (MSG_CRC8_ENABLE){

	} else {
		usb_tx_buf[5] = 0x00; //CRC8
 800b072:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <send_msg+0x78>)
 800b074:	2200      	movs	r2, #0
 800b076:	715a      	strb	r2, [r3, #5]
	}
	memcpy(&usb_tx_buf[6], data, length);
 800b078:	88bb      	ldrh	r3, [r7, #4]
 800b07a:	461a      	mov	r2, r3
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	480e      	ldr	r0, [pc, #56]	; (800b0b8 <send_msg+0x7c>)
 800b080:	f000 fb60 	bl	800b744 <memcpy>
	usb_tx_buf[6 + length] = FOOTER_0;
 800b084:	88bb      	ldrh	r3, [r7, #4]
 800b086:	3306      	adds	r3, #6
 800b088:	4a0a      	ldr	r2, [pc, #40]	; (800b0b4 <send_msg+0x78>)
 800b08a:	21cc      	movs	r1, #204	; 0xcc
 800b08c:	54d1      	strb	r1, [r2, r3]

	uint8_t ret = usb_send_data(usb_tx_buf, length + 7);
 800b08e:	88bb      	ldrh	r3, [r7, #4]
 800b090:	3307      	adds	r3, #7
 800b092:	b29b      	uxth	r3, r3
 800b094:	4619      	mov	r1, r3
 800b096:	4807      	ldr	r0, [pc, #28]	; (800b0b4 <send_msg+0x78>)
 800b098:	f000 f890 	bl	800b1bc <usb_send_data>
 800b09c:	4603      	mov	r3, r0
 800b09e:	73fb      	strb	r3, [r7, #15]
	if (!ret){
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d102      	bne.n	800b0ac <send_msg+0x70>
		error_handler(ERROR_ID_USB_TRANSMIT);
 800b0a6:	2001      	movs	r0, #1
 800b0a8:	f000 f940 	bl	800b32c <error_handler>
	}
}
 800b0ac:	bf00      	nop
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	2000613c 	.word	0x2000613c
 800b0b8:	20006142 	.word	0x20006142

0800b0bc <error_msg>:

void error_msg(uint8_t error_id, uint8_t *data, uint16_t length) {
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	6039      	str	r1, [r7, #0]
 800b0c6:	71fb      	strb	r3, [r7, #7]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	80bb      	strh	r3, [r7, #4]
	send_msg(MSG_TYPE_ERROR, error_id, data, length);
 800b0cc:	88bb      	ldrh	r3, [r7, #4]
 800b0ce:	79f9      	ldrb	r1, [r7, #7]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	2003      	movs	r0, #3
 800b0d4:	f7ff ffb2 	bl	800b03c <send_msg>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <msg_request_echo>:
 *      Author: Dustin Lehmann
 */

#include "request_messages.h"

void msg_request_echo(uint8_t *msg, uint16_t length) {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	807b      	strh	r3, [r7, #2]
	msg_request_echo_answer(msg, length);
 800b0ec:	887b      	ldrh	r3, [r7, #2]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f804 	bl	800b0fe <msg_request_echo_answer>
}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <msg_request_echo_answer>:
void msg_request_echo_answer(uint8_t *msg, uint16_t length) {
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	460b      	mov	r3, r1
 800b108:	807b      	strh	r3, [r7, #2]
	send_msg(MSG_TYPE_RESPONSE, MSG_REQUEST_ECHO_ANSWER_ID, msg, length);
 800b10a:	887b      	ldrh	r3, [r7, #2]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	2101      	movs	r1, #1
 800b110:	2006      	movs	r0, #6
 800b112:	f7ff ff93 	bl	800b03c <send_msg>
}
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <usb_rx_handler>:

void usb_init(usb_cdc_interface_t* interface, void* rx_callback){
	interface->rx_callback = rx_callback;
}

void usb_rx_handler(uint8_t* data, uint32_t len){
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
	if (len<2){
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d805      	bhi.n	800b13c <usb_rx_handler+0x1c>
		error_msg(ERROR_MSG_INVALID, NULL, 0);
 800b130:	2200      	movs	r2, #0
 800b132:	2100      	movs	r1, #0
 800b134:	2001      	movs	r0, #1
 800b136:	f7ff ffc1 	bl	800b0bc <error_msg>
		return;
 800b13a:	e03a      	b.n	800b1b2 <usb_rx_handler+0x92>
	}
	// Check if the first two bytes are the correct header
	if (!(data[0] == HEADER_0 && data[1]==HEADER_1)){
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2baa      	cmp	r3, #170	; 0xaa
 800b142:	d104      	bne.n	800b14e <usb_rx_handler+0x2e>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3301      	adds	r3, #1
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2bbb      	cmp	r3, #187	; 0xbb
 800b14c:	d005      	beq.n	800b15a <usb_rx_handler+0x3a>
		error_msg(ERROR_MSG_INVALID, NULL, 0);
 800b14e:	2200      	movs	r2, #0
 800b150:	2100      	movs	r1, #0
 800b152:	2001      	movs	r0, #1
 800b154:	f7ff ffb2 	bl	800b0bc <error_msg>
		return; // TODO Error Handling
 800b158:	e02b      	b.n	800b1b2 <usb_rx_handler+0x92>
	}

	// Check if the last byte is the correct footer
	if (!(data[len-1] == FOOTER_0)){
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	3b01      	subs	r3, #1
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	4413      	add	r3, r2
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2bcc      	cmp	r3, #204	; 0xcc
 800b166:	d11f      	bne.n	800b1a8 <usb_rx_handler+0x88>
		return; // TODO Error Handling
	}

	// check the minimum length
	if(len<8){
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	2b07      	cmp	r3, #7
 800b16c:	d91e      	bls.n	800b1ac <usb_rx_handler+0x8c>
		return; // TODO Error Handling
	}

	// extract the meta data
	uint8_t type = data[2];
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	789b      	ldrb	r3, [r3, #2]
 800b172:	73fb      	strb	r3, [r7, #15]
	uint8_t id = data[3];
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	78db      	ldrb	r3, [r3, #3]
 800b178:	73bb      	strb	r3, [r7, #14]
	uint8_t data_len = data[4];
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	791b      	ldrb	r3, [r3, #4]
 800b17e:	737b      	strb	r3, [r7, #13]
	if (MSG_CRC8_ENABLE){
		uint8_t crc8 = data[5];
	}

	// check if the data length is correct
	if (!((len-7) == data_len)){
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	1fda      	subs	r2, r3, #7
 800b184:	7b7b      	ldrb	r3, [r7, #13]
 800b186:	429a      	cmp	r2, r3
 800b188:	d112      	bne.n	800b1b0 <usb_rx_handler+0x90>
		return; // TODO Error Handling
	}

	// Copy the data to the msg_in_buffer
	memcpy(msg_in_buf,&data[6], data_len);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3306      	adds	r3, #6
 800b18e:	7b7a      	ldrb	r2, [r7, #13]
 800b190:	4619      	mov	r1, r3
 800b192:	4809      	ldr	r0, [pc, #36]	; (800b1b8 <usb_rx_handler+0x98>)
 800b194:	f000 fad6 	bl	800b744 <memcpy>

	// Invoke the message handler to execute the corresponding functions
	msg_handler(type, id, msg_in_buf, data_len);
 800b198:	7b7b      	ldrb	r3, [r7, #13]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	7bb9      	ldrb	r1, [r7, #14]
 800b19e:	7bf8      	ldrb	r0, [r7, #15]
 800b1a0:	4a05      	ldr	r2, [pc, #20]	; (800b1b8 <usb_rx_handler+0x98>)
 800b1a2:	f7ff ff19 	bl	800afd8 <msg_handler>
 800b1a6:	e004      	b.n	800b1b2 <usb_rx_handler+0x92>
		return; // TODO Error Handling
 800b1a8:	bf00      	nop
 800b1aa:	e002      	b.n	800b1b2 <usb_rx_handler+0x92>
		return; // TODO Error Handling
 800b1ac:	bf00      	nop
 800b1ae:	e000      	b.n	800b1b2 <usb_rx_handler+0x92>
		return; // TODO Error Handling
 800b1b0:	bf00      	nop
}
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	200060b4 	.word	0x200060b4

0800b1bc <usb_send_data>:


uint8_t usb_send_data(uint8_t* data, uint16_t len){
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	807b      	strh	r3, [r7, #2]
	uint8_t ret = CDC_Transmit_FS(data, len);
 800b1c8:	887b      	ldrh	r3, [r7, #2]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff fab1 	bl	800a734 <CDC_Transmit_FS>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	73fb      	strb	r3, [r7, #15]
	if (ret == USBD_OK){
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <usb_send_data+0x24>
		return USBD_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e000      	b.n	800b1e2 <usb_send_data+0x26>
	} else {
		return 1;
 800b1e0:	2301      	movs	r3, #1
	}
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <msg_write_discrete_led>:
 */

#include <stdint.h>
#include "write_messages.h"

void msg_write_discrete_led(uint8_t *msg, uint16_t length) {
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	807b      	strh	r3, [r7, #2]
	if (!(length == MSG_WRITE_DISCRETE_LED_LENGTH)) {
 800b1f6:	887b      	ldrh	r3, [r7, #2]
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d147      	bne.n	800b28c <msg_write_discrete_led+0xa2>
		return; //TODO ERROR HANDLING
	}
	if (msg[0] == 0 || msg[0] == 1) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <msg_write_discrete_led+0x22>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d105      	bne.n	800b218 <msg_write_discrete_led+0x2e>
		set_led(LED_GREEN, msg[0]);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	4619      	mov	r1, r3
 800b212:	2001      	movs	r0, #1
 800b214:	f000 f896 	bl	800b344 <set_led>
	}
	if (msg[1] == 0 || msg[1] == 1) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3301      	adds	r3, #1
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <msg_write_discrete_led+0x42>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3301      	adds	r3, #1
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d106      	bne.n	800b23a <msg_write_discrete_led+0x50>
		set_led(LED_BLUE, msg[1]);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3301      	adds	r3, #1
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	4619      	mov	r1, r3
 800b234:	2002      	movs	r0, #2
 800b236:	f000 f885 	bl	800b344 <set_led>
	}
	if (msg[2] == 0 || msg[2] == 1) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3302      	adds	r3, #2
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <msg_write_discrete_led+0x64>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3302      	adds	r3, #2
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d106      	bne.n	800b25c <msg_write_discrete_led+0x72>
		set_led(LED_ORANGE, msg[2]);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3302      	adds	r3, #2
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	4619      	mov	r1, r3
 800b256:	2003      	movs	r0, #3
 800b258:	f000 f874 	bl	800b344 <set_led>
	}

	if (msg[0] == 2) {
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d102      	bne.n	800b26a <msg_write_discrete_led+0x80>
		toggle_led(LED_GREEN);
 800b264:	2001      	movs	r0, #1
 800b266:	f000 f89f 	bl	800b3a8 <toggle_led>
	}
	if (msg[1] == 2) {
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3301      	adds	r3, #1
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d102      	bne.n	800b27a <msg_write_discrete_led+0x90>
		toggle_led(LED_BLUE);
 800b274:	2002      	movs	r0, #2
 800b276:	f000 f897 	bl	800b3a8 <toggle_led>
	}
	if (msg[2] == 2) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3302      	adds	r3, #2
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d104      	bne.n	800b28e <msg_write_discrete_led+0xa4>
		toggle_led(LED_ORANGE);
 800b284:	2003      	movs	r0, #3
 800b286:	f000 f88f 	bl	800b3a8 <toggle_led>
 800b28a:	e000      	b.n	800b28e <msg_write_discrete_led+0xa4>
		return; //TODO ERROR HANDLING
 800b28c:	bf00      	nop
	}
}
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <msg_write_status_led>:


void msg_write_status_led(uint8_t* msg, uint16_t length){
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	460b      	mov	r3, r1
 800b29e:	807b      	strh	r3, [r7, #2]
	if (!(length == MSG_WRITE_STATUS_LED_LENGTH)) {
 800b2a0:	887b      	ldrh	r3, [r7, #2]
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d10f      	bne.n	800b2c6 <msg_write_status_led+0x32>
		return; //TODO ERROR HANDLING
	}
	ws2812_set(0, msg[0], msg[1], msg[2]);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3302      	adds	r3, #2
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	f000 f92c 	bl	800b518 <ws2812_set>
	ws2812_send();
 800b2c0:	f000 f958 	bl	800b574 <ws2812_send>
 800b2c4:	e000      	b.n	800b2c8 <msg_write_status_led+0x34>
		return; //TODO ERROR HANDLING
 800b2c6:	bf00      	nop
}
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <firmware_init>:
TIM_HandleTypeDef *distance_sensor_timer;

distance_sensor_handler_t distance_sensor_handler;
distance_sensor_t distance_sensor_1;

void firmware_init() {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0

	// Set the status LED to IDLE
	set_status_led(LED_STATUS_IDLE);
 800b2d4:	2003      	movs	r0, #3
 800b2d6:	f000 f8a5 	bl	800b424 <set_status_led>
	// Initialize the USB Device
	MX_USB_DEVICE_Init();
 800b2da:	f7ff f967 	bl	800a5ac <MX_USB_DEVICE_Init>

	// Set the status LED to OK
	set_status_led(LED_STATUS_OK);
 800b2de:	2001      	movs	r0, #1
 800b2e0:	f000 f8a0 	bl	800b424 <set_status_led>

	// Define one distance sensor
	init_distance_sensor_handler(&distance_sensor_handler,
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <firmware_init+0x4c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	480c      	ldr	r0, [pc, #48]	; (800b320 <firmware_init+0x50>)
 800b2ee:	f000 f9b1 	bl	800b654 <init_distance_sensor_handler>
			distance_sensor_timer, NULL);

	distance_sensor_1.echo_port = GPIOB;
 800b2f2:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <firmware_init+0x54>)
 800b2f4:	4a0c      	ldr	r2, [pc, #48]	; (800b328 <firmware_init+0x58>)
 800b2f6:	601a      	str	r2, [r3, #0]
	distance_sensor_1.echo_pin = GPIO_PIN_14;
 800b2f8:	4b0a      	ldr	r3, [pc, #40]	; (800b324 <firmware_init+0x54>)
 800b2fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b2fe:	809a      	strh	r2, [r3, #4]
	distance_sensor_1.trig_port = GPIOB;
 800b300:	4b08      	ldr	r3, [pc, #32]	; (800b324 <firmware_init+0x54>)
 800b302:	4a09      	ldr	r2, [pc, #36]	; (800b328 <firmware_init+0x58>)
 800b304:	609a      	str	r2, [r3, #8]
	distance_sensor_1.trig_pin = GPIO_PIN_13;
 800b306:	4b07      	ldr	r3, [pc, #28]	; (800b324 <firmware_init+0x54>)
 800b308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b30c:	819a      	strh	r2, [r3, #12]

	register_distance_sensor(&distance_sensor_handler, &distance_sensor_1);
 800b30e:	4905      	ldr	r1, [pc, #20]	; (800b324 <firmware_init+0x54>)
 800b310:	4803      	ldr	r0, [pc, #12]	; (800b320 <firmware_init+0x50>)
 800b312:	f000 f9bd 	bl	800b690 <register_distance_sensor>

}
 800b316:	bf00      	nop
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20006350 	.word	0x20006350
 800b320:	2000633c 	.word	0x2000633c
 800b324:	20006354 	.word	0x20006354
 800b328:	40020400 	.word	0x40020400

0800b32c <error_handler>:

void error_handler(uint8_t error_id) {
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	71fb      	strb	r3, [r7, #7]
	set_status_led(LED_STATUS_ERROR);
 800b336:	2002      	movs	r0, #2
 800b338:	f000 f874 	bl	800b424 <set_status_led>
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <set_led>:
 *      Author: Dustin Lehmann
 */

#include "led.h"

void set_led(uint8_t led_num, uint8_t state) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	460a      	mov	r2, r1
 800b34e:	71fb      	strb	r3, [r7, #7]
 800b350:	4613      	mov	r3, r2
 800b352:	71bb      	strb	r3, [r7, #6]
	switch (led_num) {
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	2b03      	cmp	r3, #3
 800b358:	d016      	beq.n	800b388 <set_led+0x44>
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	dc1c      	bgt.n	800b398 <set_led+0x54>
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d002      	beq.n	800b368 <set_led+0x24>
 800b362:	2b02      	cmp	r3, #2
 800b364:	d008      	beq.n	800b378 <set_led+0x34>
		break;
	case LED_ORANGE:
		HAL_GPIO_WritePin(LED_ORANGE_PORT, LED_ORANGE_PIN, state);
		break;
	}
}
 800b366:	e017      	b.n	800b398 <set_led+0x54>
		HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, state);
 800b368:	79bb      	ldrb	r3, [r7, #6]
 800b36a:	461a      	mov	r2, r3
 800b36c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b370:	480b      	ldr	r0, [pc, #44]	; (800b3a0 <set_led+0x5c>)
 800b372:	f7f6 fabb 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 800b376:	e00f      	b.n	800b398 <set_led+0x54>
		HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, state);
 800b378:	79bb      	ldrb	r3, [r7, #6]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b380:	4808      	ldr	r0, [pc, #32]	; (800b3a4 <set_led+0x60>)
 800b382:	f7f6 fab3 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 800b386:	e007      	b.n	800b398 <set_led+0x54>
		HAL_GPIO_WritePin(LED_ORANGE_PORT, LED_ORANGE_PIN, state);
 800b388:	79bb      	ldrb	r3, [r7, #6]
 800b38a:	461a      	mov	r2, r3
 800b38c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b390:	4803      	ldr	r0, [pc, #12]	; (800b3a0 <set_led+0x5c>)
 800b392:	f7f6 faab 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 800b396:	bf00      	nop
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	40020800 	.word	0x40020800
 800b3a4:	40020000 	.word	0x40020000

0800b3a8 <toggle_led>:

void toggle_led(uint8_t led_num) {
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	71fb      	strb	r3, [r7, #7]
	switch (led_num) {
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d012      	beq.n	800b3de <toggle_led+0x36>
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	dc16      	bgt.n	800b3ea <toggle_led+0x42>
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d002      	beq.n	800b3c6 <toggle_led+0x1e>
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d006      	beq.n	800b3d2 <toggle_led+0x2a>
		break;
	case LED_ORANGE:
		HAL_GPIO_TogglePin(LED_ORANGE_PORT, LED_ORANGE_PIN);
		break;
	}
}
 800b3c4:	e011      	b.n	800b3ea <toggle_led+0x42>
		HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 800b3c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b3ca:	480a      	ldr	r0, [pc, #40]	; (800b3f4 <toggle_led+0x4c>)
 800b3cc:	f7f6 faa7 	bl	800191e <HAL_GPIO_TogglePin>
		break;
 800b3d0:	e00b      	b.n	800b3ea <toggle_led+0x42>
		HAL_GPIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
 800b3d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3d6:	4808      	ldr	r0, [pc, #32]	; (800b3f8 <toggle_led+0x50>)
 800b3d8:	f7f6 faa1 	bl	800191e <HAL_GPIO_TogglePin>
		break;
 800b3dc:	e005      	b.n	800b3ea <toggle_led+0x42>
		HAL_GPIO_TogglePin(LED_ORANGE_PORT, LED_ORANGE_PIN);
 800b3de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3e2:	4804      	ldr	r0, [pc, #16]	; (800b3f4 <toggle_led+0x4c>)
 800b3e4:	f7f6 fa9b 	bl	800191e <HAL_GPIO_TogglePin>
		break;
 800b3e8:	bf00      	nop
}
 800b3ea:	bf00      	nop
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	40020800 	.word	0x40020800
 800b3f8:	40020000 	.word	0x40020000

0800b3fc <set_status_led_color>:

void set_status_led_color(uint8_t red, uint8_t green, uint8_t blue) {
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	71fb      	strb	r3, [r7, #7]
 800b406:	460b      	mov	r3, r1
 800b408:	71bb      	strb	r3, [r7, #6]
 800b40a:	4613      	mov	r3, r2
 800b40c:	717b      	strb	r3, [r7, #5]
	ws2812_set(0, red, green, blue);
 800b40e:	79f9      	ldrb	r1, [r7, #7]
 800b410:	79ba      	ldrb	r2, [r7, #6]
 800b412:	797b      	ldrb	r3, [r7, #5]
 800b414:	2000      	movs	r0, #0
 800b416:	f000 f87f 	bl	800b518 <ws2812_set>
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <set_status_led>:
void set_status_led(uint8_t state) {
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	2b03      	cmp	r3, #3
 800b432:	d823      	bhi.n	800b47c <set_status_led+0x58>
 800b434:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <set_status_led+0x18>)
 800b436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43a:	bf00      	nop
 800b43c:	0800b459 	.word	0x0800b459
 800b440:	0800b465 	.word	0x0800b465
 800b444:	0800b44d 	.word	0x0800b44d
 800b448:	0800b471 	.word	0x0800b471
	case LED_STATUS_ERROR:
		set_status_led_color(60, 0, 0);
 800b44c:	2200      	movs	r2, #0
 800b44e:	2100      	movs	r1, #0
 800b450:	203c      	movs	r0, #60	; 0x3c
 800b452:	f7ff ffd3 	bl	800b3fc <set_status_led_color>
		break;
 800b456:	e011      	b.n	800b47c <set_status_led+0x58>
	case LED_STATUS_OFF:
		set_status_led_color(0, 0, 0);
 800b458:	2200      	movs	r2, #0
 800b45a:	2100      	movs	r1, #0
 800b45c:	2000      	movs	r0, #0
 800b45e:	f7ff ffcd 	bl	800b3fc <set_status_led_color>
		break;
 800b462:	e00b      	b.n	800b47c <set_status_led+0x58>
	case LED_STATUS_OK:
		set_status_led_color(0, 60, 0);
 800b464:	2200      	movs	r2, #0
 800b466:	213c      	movs	r1, #60	; 0x3c
 800b468:	2000      	movs	r0, #0
 800b46a:	f7ff ffc7 	bl	800b3fc <set_status_led_color>
		break;
 800b46e:	e005      	b.n	800b47c <set_status_led+0x58>
	case LED_STATUS_IDLE:
		set_status_led_color(0, 0, 60);
 800b470:	223c      	movs	r2, #60	; 0x3c
 800b472:	2100      	movs	r1, #0
 800b474:	2000      	movs	r0, #0
 800b476:	f7ff ffc1 	bl	800b3fc <set_status_led_color>
		break;
 800b47a:	bf00      	nop
	}
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_TIM_PWM_PulseFinishedCallback>:

uint16_t pwmData[(24*MAX_LED)+50];


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws2812_tim, WS2812_TIM_CHANNEL);
 800b48c:	4b06      	ldr	r3, [pc, #24]	; (800b4a8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2104      	movs	r1, #4
 800b492:	4618      	mov	r0, r3
 800b494:	f7f8 fb1c 	bl	8003ad0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	701a      	strb	r2, [r3, #0]
}
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20004dfc 	.word	0x20004dfc
 800b4ac:	20004df8 	.word	0x20004df8

0800b4b0 <ws2812_init>:

void ws2812_init(TIM_HandleTypeDef* tim){
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	ws2812_tim = tim;
 800b4b8:	4a15      	ldr	r2, [pc, #84]	; (800b510 <ws2812_init+0x60>)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6013      	str	r3, [r2, #0]
	for (int i=0;i<MAX_LED;i++){
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	e01a      	b.n	800b4fa <ws2812_init+0x4a>
		LED_Data[i][0] = i;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	b2d9      	uxtb	r1, r3
 800b4c8:	4a12      	ldr	r2, [pc, #72]	; (800b514 <ws2812_init+0x64>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 800b4d0:	4a10      	ldr	r2, [pc, #64]	; (800b514 <ws2812_init+0x64>)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	2200      	movs	r2, #0
 800b4da:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 800b4dc:	4a0d      	ldr	r2, [pc, #52]	; (800b514 <ws2812_init+0x64>)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	4413      	add	r3, r2
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 800b4e8:	4a0a      	ldr	r2, [pc, #40]	; (800b514 <ws2812_init+0x64>)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	70da      	strb	r2, [r3, #3]
	for (int i=0;i<MAX_LED;i++){
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2b0f      	cmp	r3, #15
 800b4fe:	dde1      	ble.n	800b4c4 <ws2812_init+0x14>
	}
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	20004dfc 	.word	0x20004dfc
 800b514:	20006370 	.word	0x20006370

0800b518 <ws2812_set>:

void ws2812_set(int LEDnum, int Red, int Green, int Blue)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	b2d9      	uxtb	r1, r3
 800b52a:	4a11      	ldr	r2, [pc, #68]	; (800b570 <ws2812_set+0x58>)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	b2d9      	uxtb	r1, r3
 800b536:	4a0e      	ldr	r2, [pc, #56]	; (800b570 <ws2812_set+0x58>)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	460a      	mov	r2, r1
 800b540:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	b2d9      	uxtb	r1, r3
 800b546:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <ws2812_set+0x58>)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	460a      	mov	r2, r1
 800b550:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	b2d9      	uxtb	r1, r3
 800b556:	4a06      	ldr	r2, [pc, #24]	; (800b570 <ws2812_set+0x58>)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	460a      	mov	r2, r1
 800b560:	70da      	strb	r2, [r3, #3]
}
 800b562:	bf00      	nop
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20006370 	.word	0x20006370

0800b574 <ws2812_send>:
	}
#endif
}

void ws2812_send(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800b57e:	2300      	movs	r3, #0
 800b580:	613b      	str	r3, [r7, #16]
 800b582:	e036      	b.n	800b5f2 <ws2812_send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 800b584:	4a2f      	ldr	r2, [pc, #188]	; (800b644 <ws2812_send+0xd0>)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4413      	add	r3, r2
 800b58c:	785b      	ldrb	r3, [r3, #1]
 800b58e:	041a      	lsls	r2, r3, #16
 800b590:	492c      	ldr	r1, [pc, #176]	; (800b644 <ws2812_send+0xd0>)
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	440b      	add	r3, r1
 800b598:	789b      	ldrb	r3, [r3, #2]
 800b59a:	021b      	lsls	r3, r3, #8
 800b59c:	431a      	orrs	r2, r3
 800b59e:	4929      	ldr	r1, [pc, #164]	; (800b644 <ws2812_send+0xd0>)
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	440b      	add	r3, r1
 800b5a6:	78db      	ldrb	r3, [r3, #3]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 800b5ac:	2317      	movs	r3, #23
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	e019      	b.n	800b5e6 <ws2812_send+0x72>
		{
			if (color&(1<<i))
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4013      	ands	r3, r2
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d005      	beq.n	800b5d0 <ws2812_send+0x5c>
			{
				pwmData[indx] = 40;  // 2/3 of 60
 800b5c4:	4a20      	ldr	r2, [pc, #128]	; (800b648 <ws2812_send+0xd4>)
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2128      	movs	r1, #40	; 0x28
 800b5ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b5ce:	e004      	b.n	800b5da <ws2812_send+0x66>
			}

			else pwmData[indx] = 20;  // 1/3 of 60
 800b5d0:	4a1d      	ldr	r2, [pc, #116]	; (800b648 <ws2812_send+0xd4>)
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2114      	movs	r1, #20
 800b5d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	60fb      	str	r3, [r7, #12]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dae2      	bge.n	800b5b2 <ws2812_send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	613b      	str	r3, [r7, #16]
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b0f      	cmp	r3, #15
 800b5f6:	ddc5      	ble.n	800b584 <ws2812_send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60bb      	str	r3, [r7, #8]
 800b5fc:	e00a      	b.n	800b614 <ws2812_send+0xa0>
	{
		pwmData[indx] = 0;
 800b5fe:	4a12      	ldr	r2, [pc, #72]	; (800b648 <ws2812_send+0xd4>)
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2100      	movs	r1, #0
 800b604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	3301      	adds	r3, #1
 800b60c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	3301      	adds	r3, #1
 800b612:	60bb      	str	r3, [r7, #8]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b31      	cmp	r3, #49	; 0x31
 800b618:	ddf1      	ble.n	800b5fe <ws2812_send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(ws2812_tim, WS2812_TIM_CHANNEL, (uint32_t *)pwmData, indx);
 800b61a:	4b0c      	ldr	r3, [pc, #48]	; (800b64c <ws2812_send+0xd8>)
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	b29b      	uxth	r3, r3
 800b622:	4a09      	ldr	r2, [pc, #36]	; (800b648 <ws2812_send+0xd4>)
 800b624:	2104      	movs	r1, #4
 800b626:	f7f8 f8a3 	bl	8003770 <HAL_TIM_PWM_Start_DMA>
	while (datasentflag==0){
 800b62a:	bf00      	nop
 800b62c:	4b08      	ldr	r3, [pc, #32]	; (800b650 <ws2812_send+0xdc>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0fa      	beq.n	800b62c <ws2812_send+0xb8>

	};
	datasentflag = 0;
 800b636:	4b06      	ldr	r3, [pc, #24]	; (800b650 <ws2812_send+0xdc>)
 800b638:	2200      	movs	r2, #0
 800b63a:	701a      	strb	r2, [r3, #0]
}
 800b63c:	bf00      	nop
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20006370 	.word	0x20006370
 800b648:	200063f0 	.word	0x200063f0
 800b64c:	20004dfc 	.word	0x20004dfc
 800b650:	20004df8 	.word	0x20004df8

0800b654 <init_distance_sensor_handler>:
#include "distance.h"

distance_sensor_t* distance_sensors[MAX_NUM_SENSORS];


void init_distance_sensor_handler(distance_sensor_handler_t* handler, TIM_HandleTypeDef* timer, void* isr_callback){
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
	handler -> distance_sensors = distance_sensors;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <init_distance_sensor_handler+0x38>)
 800b664:	605a      	str	r2, [r3, #4]
	handler -> timer = timer;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	601a      	str	r2, [r3, #0]
	handler -> num_sensors = 0;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	721a      	strb	r2, [r3, #8]
	handler -> isr_callback = isr_callback;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	60da      	str	r2, [r3, #12]
	handler -> initialized = 1;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2201      	movs	r2, #1
 800b67c:	749a      	strb	r2, [r3, #18]

}
 800b67e:	bf00      	nop
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	20006754 	.word	0x20006754

0800b690 <register_distance_sensor>:


void register_distance_sensor(distance_sensor_handler_t* handler, distance_sensor_t* sensor){
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
	handler -> num_sensors++;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	7a1b      	ldrb	r3, [r3, #8]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	721a      	strb	r2, [r3, #8]
	handler -> distance_sensors[handler->num_sensors-1] = sensor;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	7a1b      	ldrb	r3, [r3, #8]
 800b6ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	601a      	str	r2, [r3, #0]
	sensor -> distance = -1;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	4a07      	ldr	r2, [pc, #28]	; (800b6dc <register_distance_sensor+0x4c>)
 800b6c0:	611a      	str	r2, [r3, #16]
	sensor -> overflow = 1;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	751a      	strb	r2, [r3, #20]
	sensor ->tick = 0;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	619a      	str	r2, [r3, #24]
}
 800b6ce:	bf00      	nop
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	bf800000 	.word	0xbf800000

0800b6e0 <HAL_GPIO_EXTI_Callback>:
}




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	80fb      	strh	r3, [r7, #6]
	// Calculate the distance from the tick variable


	// Handle overflow

}
 800b6ea:	bf00      	nop
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
	...

0800b6f8 <__libc_init_array>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	4d0d      	ldr	r5, [pc, #52]	; (800b730 <__libc_init_array+0x38>)
 800b6fc:	4c0d      	ldr	r4, [pc, #52]	; (800b734 <__libc_init_array+0x3c>)
 800b6fe:	1b64      	subs	r4, r4, r5
 800b700:	10a4      	asrs	r4, r4, #2
 800b702:	2600      	movs	r6, #0
 800b704:	42a6      	cmp	r6, r4
 800b706:	d109      	bne.n	800b71c <__libc_init_array+0x24>
 800b708:	4d0b      	ldr	r5, [pc, #44]	; (800b738 <__libc_init_array+0x40>)
 800b70a:	4c0c      	ldr	r4, [pc, #48]	; (800b73c <__libc_init_array+0x44>)
 800b70c:	f000 f8f6 	bl	800b8fc <_init>
 800b710:	1b64      	subs	r4, r4, r5
 800b712:	10a4      	asrs	r4, r4, #2
 800b714:	2600      	movs	r6, #0
 800b716:	42a6      	cmp	r6, r4
 800b718:	d105      	bne.n	800b726 <__libc_init_array+0x2e>
 800b71a:	bd70      	pop	{r4, r5, r6, pc}
 800b71c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b720:	4798      	blx	r3
 800b722:	3601      	adds	r6, #1
 800b724:	e7ee      	b.n	800b704 <__libc_init_array+0xc>
 800b726:	f855 3b04 	ldr.w	r3, [r5], #4
 800b72a:	4798      	blx	r3
 800b72c:	3601      	adds	r6, #1
 800b72e:	e7f2      	b.n	800b716 <__libc_init_array+0x1e>
 800b730:	0800ba2c 	.word	0x0800ba2c
 800b734:	0800ba2c 	.word	0x0800ba2c
 800b738:	0800ba2c 	.word	0x0800ba2c
 800b73c:	0800ba30 	.word	0x0800ba30

0800b740 <__retarget_lock_acquire_recursive>:
 800b740:	4770      	bx	lr

0800b742 <__retarget_lock_release_recursive>:
 800b742:	4770      	bx	lr

0800b744 <memcpy>:
 800b744:	440a      	add	r2, r1
 800b746:	4291      	cmp	r1, r2
 800b748:	f100 33ff 	add.w	r3, r0, #4294967295
 800b74c:	d100      	bne.n	800b750 <memcpy+0xc>
 800b74e:	4770      	bx	lr
 800b750:	b510      	push	{r4, lr}
 800b752:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b75a:	4291      	cmp	r1, r2
 800b75c:	d1f9      	bne.n	800b752 <memcpy+0xe>
 800b75e:	bd10      	pop	{r4, pc}

0800b760 <memset>:
 800b760:	4402      	add	r2, r0
 800b762:	4603      	mov	r3, r0
 800b764:	4293      	cmp	r3, r2
 800b766:	d100      	bne.n	800b76a <memset+0xa>
 800b768:	4770      	bx	lr
 800b76a:	f803 1b01 	strb.w	r1, [r3], #1
 800b76e:	e7f9      	b.n	800b764 <memset+0x4>

0800b770 <cleanup_glue>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	460c      	mov	r4, r1
 800b774:	6809      	ldr	r1, [r1, #0]
 800b776:	4605      	mov	r5, r0
 800b778:	b109      	cbz	r1, 800b77e <cleanup_glue+0xe>
 800b77a:	f7ff fff9 	bl	800b770 <cleanup_glue>
 800b77e:	4621      	mov	r1, r4
 800b780:	4628      	mov	r0, r5
 800b782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b786:	f000 b869 	b.w	800b85c <_free_r>
	...

0800b78c <_reclaim_reent>:
 800b78c:	4b2c      	ldr	r3, [pc, #176]	; (800b840 <_reclaim_reent+0xb4>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4283      	cmp	r3, r0
 800b792:	b570      	push	{r4, r5, r6, lr}
 800b794:	4604      	mov	r4, r0
 800b796:	d051      	beq.n	800b83c <_reclaim_reent+0xb0>
 800b798:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b79a:	b143      	cbz	r3, 800b7ae <_reclaim_reent+0x22>
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d14a      	bne.n	800b838 <_reclaim_reent+0xac>
 800b7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7a4:	6819      	ldr	r1, [r3, #0]
 800b7a6:	b111      	cbz	r1, 800b7ae <_reclaim_reent+0x22>
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 f857 	bl	800b85c <_free_r>
 800b7ae:	6961      	ldr	r1, [r4, #20]
 800b7b0:	b111      	cbz	r1, 800b7b8 <_reclaim_reent+0x2c>
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 f852 	bl	800b85c <_free_r>
 800b7b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b7ba:	b111      	cbz	r1, 800b7c2 <_reclaim_reent+0x36>
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 f84d 	bl	800b85c <_free_r>
 800b7c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b7c4:	b111      	cbz	r1, 800b7cc <_reclaim_reent+0x40>
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 f848 	bl	800b85c <_free_r>
 800b7cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b7ce:	b111      	cbz	r1, 800b7d6 <_reclaim_reent+0x4a>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 f843 	bl	800b85c <_free_r>
 800b7d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7d8:	b111      	cbz	r1, 800b7e0 <_reclaim_reent+0x54>
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 f83e 	bl	800b85c <_free_r>
 800b7e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b7e2:	b111      	cbz	r1, 800b7ea <_reclaim_reent+0x5e>
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 f839 	bl	800b85c <_free_r>
 800b7ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b7ec:	b111      	cbz	r1, 800b7f4 <_reclaim_reent+0x68>
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 f834 	bl	800b85c <_free_r>
 800b7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7f6:	b111      	cbz	r1, 800b7fe <_reclaim_reent+0x72>
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f000 f82f 	bl	800b85c <_free_r>
 800b7fe:	69a3      	ldr	r3, [r4, #24]
 800b800:	b1e3      	cbz	r3, 800b83c <_reclaim_reent+0xb0>
 800b802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b804:	4620      	mov	r0, r4
 800b806:	4798      	blx	r3
 800b808:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b80a:	b1b9      	cbz	r1, 800b83c <_reclaim_reent+0xb0>
 800b80c:	4620      	mov	r0, r4
 800b80e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b812:	f7ff bfad 	b.w	800b770 <cleanup_glue>
 800b816:	5949      	ldr	r1, [r1, r5]
 800b818:	b941      	cbnz	r1, 800b82c <_reclaim_reent+0xa0>
 800b81a:	3504      	adds	r5, #4
 800b81c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b81e:	2d80      	cmp	r5, #128	; 0x80
 800b820:	68d9      	ldr	r1, [r3, #12]
 800b822:	d1f8      	bne.n	800b816 <_reclaim_reent+0x8a>
 800b824:	4620      	mov	r0, r4
 800b826:	f000 f819 	bl	800b85c <_free_r>
 800b82a:	e7ba      	b.n	800b7a2 <_reclaim_reent+0x16>
 800b82c:	680e      	ldr	r6, [r1, #0]
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 f814 	bl	800b85c <_free_r>
 800b834:	4631      	mov	r1, r6
 800b836:	e7ef      	b.n	800b818 <_reclaim_reent+0x8c>
 800b838:	2500      	movs	r5, #0
 800b83a:	e7ef      	b.n	800b81c <_reclaim_reent+0x90>
 800b83c:	bd70      	pop	{r4, r5, r6, pc}
 800b83e:	bf00      	nop
 800b840:	20000184 	.word	0x20000184

0800b844 <__malloc_lock>:
 800b844:	4801      	ldr	r0, [pc, #4]	; (800b84c <__malloc_lock+0x8>)
 800b846:	f7ff bf7b 	b.w	800b740 <__retarget_lock_acquire_recursive>
 800b84a:	bf00      	nop
 800b84c:	20006768 	.word	0x20006768

0800b850 <__malloc_unlock>:
 800b850:	4801      	ldr	r0, [pc, #4]	; (800b858 <__malloc_unlock+0x8>)
 800b852:	f7ff bf76 	b.w	800b742 <__retarget_lock_release_recursive>
 800b856:	bf00      	nop
 800b858:	20006768 	.word	0x20006768

0800b85c <_free_r>:
 800b85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b85e:	2900      	cmp	r1, #0
 800b860:	d048      	beq.n	800b8f4 <_free_r+0x98>
 800b862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b866:	9001      	str	r0, [sp, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f1a1 0404 	sub.w	r4, r1, #4
 800b86e:	bfb8      	it	lt
 800b870:	18e4      	addlt	r4, r4, r3
 800b872:	f7ff ffe7 	bl	800b844 <__malloc_lock>
 800b876:	4a20      	ldr	r2, [pc, #128]	; (800b8f8 <_free_r+0x9c>)
 800b878:	9801      	ldr	r0, [sp, #4]
 800b87a:	6813      	ldr	r3, [r2, #0]
 800b87c:	4615      	mov	r5, r2
 800b87e:	b933      	cbnz	r3, 800b88e <_free_r+0x32>
 800b880:	6063      	str	r3, [r4, #4]
 800b882:	6014      	str	r4, [r2, #0]
 800b884:	b003      	add	sp, #12
 800b886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b88a:	f7ff bfe1 	b.w	800b850 <__malloc_unlock>
 800b88e:	42a3      	cmp	r3, r4
 800b890:	d90b      	bls.n	800b8aa <_free_r+0x4e>
 800b892:	6821      	ldr	r1, [r4, #0]
 800b894:	1862      	adds	r2, r4, r1
 800b896:	4293      	cmp	r3, r2
 800b898:	bf04      	itt	eq
 800b89a:	681a      	ldreq	r2, [r3, #0]
 800b89c:	685b      	ldreq	r3, [r3, #4]
 800b89e:	6063      	str	r3, [r4, #4]
 800b8a0:	bf04      	itt	eq
 800b8a2:	1852      	addeq	r2, r2, r1
 800b8a4:	6022      	streq	r2, [r4, #0]
 800b8a6:	602c      	str	r4, [r5, #0]
 800b8a8:	e7ec      	b.n	800b884 <_free_r+0x28>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	b10b      	cbz	r3, 800b8b4 <_free_r+0x58>
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d9fa      	bls.n	800b8aa <_free_r+0x4e>
 800b8b4:	6811      	ldr	r1, [r2, #0]
 800b8b6:	1855      	adds	r5, r2, r1
 800b8b8:	42a5      	cmp	r5, r4
 800b8ba:	d10b      	bne.n	800b8d4 <_free_r+0x78>
 800b8bc:	6824      	ldr	r4, [r4, #0]
 800b8be:	4421      	add	r1, r4
 800b8c0:	1854      	adds	r4, r2, r1
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	d1dd      	bne.n	800b884 <_free_r+0x28>
 800b8c8:	681c      	ldr	r4, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	6053      	str	r3, [r2, #4]
 800b8ce:	4421      	add	r1, r4
 800b8d0:	6011      	str	r1, [r2, #0]
 800b8d2:	e7d7      	b.n	800b884 <_free_r+0x28>
 800b8d4:	d902      	bls.n	800b8dc <_free_r+0x80>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	6003      	str	r3, [r0, #0]
 800b8da:	e7d3      	b.n	800b884 <_free_r+0x28>
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	1961      	adds	r1, r4, r5
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf04      	itt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	bf04      	itt	eq
 800b8ec:	1949      	addeq	r1, r1, r5
 800b8ee:	6021      	streq	r1, [r4, #0]
 800b8f0:	6054      	str	r4, [r2, #4]
 800b8f2:	e7c7      	b.n	800b884 <_free_r+0x28>
 800b8f4:	b003      	add	sp, #12
 800b8f6:	bd30      	pop	{r4, r5, pc}
 800b8f8:	20004e00 	.word	0x20004e00

0800b8fc <_init>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr

0800b908 <_fini>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	bf00      	nop
 800b90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90e:	bc08      	pop	{r3}
 800b910:	469e      	mov	lr, r3
 800b912:	4770      	bx	lr
